This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
aerospace/
  config/
    aerospace.toml
  default.nix
borders/
  config/
    bordersrc
ghostty/
  config/
    config
    keybindings
  default.nix
goku/
  config/
    karabiner.edn
  default.nix
helix/
  config/
    config.toml
    external-snippets.toml
    languages.toml
  default.nix
kanata/
  config/
    personal.kbd
  default.nix
kitty/
  config/
    current-theme.conf
    kitty.conf
    startup-session.conf
  default.nix
sketchybar/
  config/
    helpers/
      event_providers/
        cpu_load/
          cpu_load.c
          cpu.h
          makefile
        network_load/
          makefile
          network_load.c
          network.h
        makefile
        sketchybar.h
      menus/
        makefile
        menus.c
      .gitignore
      app_icons.lua
      default_font.lua
      init.lua
      makefile
    items/
      widgets/
        battery.lua
        cpu.lua
        init.lua
        volume.lua
        wifi.lua
      apple.lua
      calendar.lua
      front_app.lua
      init.lua
      media.lua
      menus.lua
      spaces.lua
    bar.lua
    colors.lua
    default.lua
    icons.lua
    init.lua
    settings.lua
    sketchybarrc
  default.nix
skhd/
  config/
    skhdrc
  default.nix
starship/
  config/
    starship.toml
svim/
  config/
    blacklist
    svim.sh
    svimrc
tmux/
  config/
    themes/
      tokyonight.tmux
    .gitignore
    tmux.conf
  default.nix
yabai/
  config/
    yabairc
default.nix

================================================================
Files
================================================================

================
File: aerospace/config/aerospace.toml
================
# Place a copy of this config to ~/.aerospace.toml
# After that, you can edit ~/.aerospace.toml to your liking

# You can use it to add commands that run after login to macOS user session.
# 'start-at-login' needs to be 'true' for 'after-login-command' to work
# Available commands: https://nikitabobko.github.io/AeroSpace/commands
after-login-command = []

# You can use it to add commands that run after AeroSpace startup.
# 'after-startup-command' is run after 'after-login-command'
# Available commands : https://nikitabobko.github.io/AeroSpace/commands
after-startup-command = [
    # JankyBorders has a built-in detection of already running process,
    # so it won't be run twice on AeroSpace restart
    'exec-and-forget borders active_color=0xffe1e3e4 inactive_color=0xff494d64 width=5.0',
    'exec-and-forget sketchybar'
]

# Notify Sketchybar about workspace change
exec-on-workspace-change = ['/bin/bash', '-c',
    'sketchybar --trigger aerospace_workspace_change FOCUSED_WORKSPACE=$AEROSPACE_FOCUSED_WORKSPACE'
]


# Start AeroSpace at login
start-at-login = true

# Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable-normalization-flatten-containers = true
enable-normalization-opposite-orientation-for-nested-containers = true

# See: https://nikitabobko.github.io/AeroSpace/guide#layouts
# The 'accordion-padding' specifies the size of accordion padding
# You can set 0 to disable the padding feature
accordion-padding = 30

# Possible values: tiles|accordion
default-root-container-layout = 'tiles'

# Possible values: horizontal|vertical|auto
# 'auto' means: wide monitor (anything wider than high) gets horizontal orientation,
#               tall monitor (anything higher than wide) gets vertical orientation
default-root-container-orientation = 'auto'



# Mouse follows focus when focused monitor changes
# Drop it from your config, if you don't like this behavior
# See https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks
# See https://nikitabobko.github.io/AeroSpace/commands#move-mouse
# Fallback value (if you omit the key): on-focused-monitor-changed = []
on-focused-monitor-changed = ['move-mouse monitor-lazy-center']

# You can effectively turn off macOS "Hide application" (cmd-h) feature by toggling this flag
# Useful if you don't use this macOS feature, but accidentally hit cmd-h or cmd-alt-h key
# Also see: https://nikitabobko.github.io/AeroSpace/goodies#disable-hide-app
automatically-unhide-macos-hidden-apps = false

# Possible values: (qwerty|dvorak)
# See https://nikitabobko.github.io/AeroSpace/guide#key-mapping
[key-mapping]
    preset = 'qwerty'

# Gaps between windows (inner-*) and between monitor edges (outer-*).
# Possible values:
# - Constant:     gaps.outer.top = 8
# - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
#                 In this example, 24 is a default value when there is no match.
#                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
#                 See:
#                 https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
[gaps]
    inner.horizontal = 4
    inner.vertical =   4
    outer.left =       4
    outer.bottom =     4
    outer.top =        4
    outer.right =      4

# 'main' binding mode declaration
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
# 'main' binding mode must be always presented
# Fallback value (if you omit the key): mode.main.binding = {}
[mode.main.binding]

    # All possible keys:
    # - Letters.        a, b, c, ..., z
    # - Numbers.        0, 1, 2, ..., 9
    # - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
    # - F-keys.         f1, f2, ..., f20
    # - Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon,
    #                   backtick, leftSquareBracket, rightSquareBracket, space, enter, esc,
    #                   backspace, tab
    # - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
    #                   keypadMinus, keypadMultiply, keypadPlus
    # - Arrows.         left, down, up, right

    # All possible modifiers: cmd, alt, ctrl, shift

    # All possible commands: https://nikitabobko.github.io/AeroSpace/commands

    # See: https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget
    # You can uncomment the following lines to open up terminal with alt + enter shortcut
    # (like in i3)
    # alt-enter = '''exec-and-forget osascript -e '
    # tell application "Terminal"
    #     do script
    #     activate
    # end tell'
    # '''

    # See: https://nikitabobko.github.io/AeroSpace/commands#layout
    alt-slash = 'layout tiles horizontal vertical'
    alt-comma = 'layout accordion horizontal vertical'

    # See: https://nikitabobko.github.io/AeroSpace/commands#focus
    alt-h = 'focus left'
    alt-j = 'focus down'
    alt-k = 'focus up'
    alt-l = 'focus right'

    # See: https://nikitabobko.github.io/AeroSpace/commands#move
    alt-shift-h = 'move left'
    alt-shift-j = 'move down'
    alt-shift-k = 'move up'
    alt-shift-l = 'move right'

    # See: https://nikitabobko.github.io/AeroSpace/commands#resize
    alt-minus = 'resize smart -50'
    alt-equal = 'resize smart +50'

    # See: https://nikitabobko.github.io/AeroSpace/commands#workspace
    alt-1 = 'workspace 1'
    alt-2 = 'workspace 2'
    alt-3 = 'workspace 3'
    alt-4 = 'workspace 4'
    alt-5 = 'workspace 5'
    alt-6 = 'workspace 6'
    alt-7 = 'workspace 7'
    alt-8 = 'workspace 8'
    alt-9 = 'workspace 9'

    # See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
    alt-shift-1 = 'move-node-to-workspace 1'
    alt-shift-2 = 'move-node-to-workspace 2'
    alt-shift-3 = 'move-node-to-workspace 3'
    alt-shift-4 = 'move-node-to-workspace 4'
    alt-shift-5 = 'move-node-to-workspace 5'
    alt-shift-6 = 'move-node-to-workspace 6'
    alt-shift-7 = 'move-node-to-workspace 7'
    alt-shift-8 = 'move-node-to-workspace 8'
    alt-shift-9 = 'move-node-to-workspace 9'

    # See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
    alt-tab = 'workspace-back-and-forth'
    # See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor
    alt-shift-tab = 'move-workspace-to-monitor --wrap-around next'

    # See: https://nikitabobko.github.io/AeroSpace/commands#mode
    alt-shift-semicolon = 'mode service'

# 'service' binding mode declaration.
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
[mode.service.binding]
    esc = ['reload-config', 'mode main']
    r = ['flatten-workspace-tree', 'mode main'] # reset layout
    f = ['layout floating tiling', 'mode main'] # Toggle between floating and tiling layout
    backspace = ['close-all-windows-but-current', 'mode main']

    # sticky is not yet supported https://github.com/nikitabobko/AeroSpace/issues/2
    #s = ['layout sticky tiling', 'mode main']

    alt-shift-h = ['join-with left', 'mode main']
    alt-shift-j = ['join-with down', 'mode main']
    alt-shift-k = ['join-with up', 'mode main']
    alt-shift-l = ['join-with right', 'mode main']

    down = 'volume down'
    up = 'volume up'
    shift-down = ['volume set 0', 'mode main']

================
File: aerospace/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/aerospace".source = homeManagerConfig.linkHostApp config "aerospace";
}

================
File: borders/config/bordersrc
================
#!/bin/bash

options=(
	style=round
	width=6.0
	hidpi=off
	active_color=0xc0e2e2e3
	inactive_color=0xc02c2e34
	background_color=0x302c2e34
)

borders "${options[@]}"

================
File: ghostty/config/config
================
shell-integration = zsh
shell-integration-features = cursor,title,sudo

theme = catppuccin-mocha

font-family = "BerkeleyMonoVariable Nerd Font"
font-size = 14
font-feature = -calt
font-feature = -liga
font-feature = -dlig

adjust-cell-height = 20%
adjust-cursor-height = 20%

background-opacity = 0.7
background-blur-radius = 20

clipboard-read = allow
clipboard-write = allow
clipboard-paste-protection = false
clipboard-trim-trailing-spaces = true

macos-auto-secure-input = false
macos-secure-input-indication = true
macos-titlebar-style = tabs

config-file = keybindings

================
File: ghostty/config/keybindings
================
keybind = super+equal=increase_font_size:1
keybind = super+minus=decrease_font_size:1
keybind = super+shift+0=reset_font_size

keybind = ctrl+;>escape=reload_config
keybind = ctrl+;>e=open_config

keybind = ctrl+;>c=new_tab
keybind = ctrl+;>x=close_surface
keybind = ctrl+;>h=previous_tab
keybind = ctrl+;>l=next_tab
# keybind = ctrl+;>r=set_tab_title
# keybind = ctrl+;>w=select_tab

keybind = ctrl+;>1=goto_tab:1
keybind = ctrl+;>2=goto_tab:2
keybind = ctrl+;>3=goto_tab:3
keybind = ctrl+;>4=goto_tab:4
keybind = ctrl+;>5=goto_tab:5
keybind = ctrl+;>6=goto_tab:6
keybind = ctrl+;>7=goto_tab:7
keybind = ctrl+;>8=goto_tab:8
keybind = ctrl+;>9=goto_tab:9

# vim: set ft=conf :

================
File: ghostty/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/ghostty".source = homeManagerConfig.linkHostApp config "ghostty";
}

================
File: goku/config/karabiner.edn
================
{:des "caps_lock" :rules [[:##caps_lock :left_control nil {:alone : escape} 11}

================
File: goku/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/goku".source = homeManagerConfig.linkHostApp config "goku";
}

================
File: helix/config/config.toml
================
theme = "sonokai"

[editor]
bufferline = "always"
text-width = 79
rulers = [80]
line-number = "relative"
auto-save = true

[editor.whitespace.render]
newline = "all"
nbsp = "all"
space = "none"
tab = "none"

[editor.statusline]
left = ["mode", "spacer", "version-control" ,"spinner", "read-only-indicator", "file-modification-indicator"]
mode.normal = "NORMAL"
mode.insert = "INSERT"
mode.select = "SELECT"

[editor.indent-guides]
render = true

[editor.soft-wrap]
enable = true
wrap-at-text-width = true

[editor.cursor-shape]
insert = "bar"

[keys.select]
j = "extend_char_left"
k = "extend_visual_line_down"
l = "extend_visual_line_up"
"ö" = "extend_char_right"
"ß" = "extend_to_line_end"
"0" = "extend_to_line_start"
"C-n" = "extend_search_next"
"C-p" = "extend_search_prev"
p = "paste_clipboard_after"
P = "paste_clipboard_before"
y = "yank_to_clipboard"
Y = "yank_joined_to_clipboard"
R = "replace_selections_with_clipboard"

[keys.normal]
a = ["ensure_selections_forward", "collapse_selection", "move_char_right", "insert_mode"]
j = "move_char_left"
k = "move_visual_line_down"
l = "move_visual_line_up"
K = "join_selections"
J = "keep_selections"
X = "extend_line_above"
"ö" = "move_char_right"
"ß" = "goto_line_end"
"0" = "goto_line_start"
"C-n" = "extend_search_next"
"C-p" = "extend_search_prev"
d = "delete_selection_noyank"
c = "change_selection_noyank"
p = "paste_clipboard_after"
P = "paste_clipboard_before"
y = "yank_to_clipboard"
Y = "yank_joined_to_clipboard"
R = "replace_selections_with_clipboard"
"C-c" = ":write-quit"

[keys.normal.g]
j = "goto_line_start"
k = "move_line_down"
l = "move_line_up"
a = "code_action"
q = ":reflow"
"ö" = "goto_line_end"

[keys.normal.z]
k = "scroll_down"
l = "scroll_up"

[keys.normal.space]
c = "toggle_comments"

[keys.select.space]
c = "toggle_comments"

================
File: helix/config/external-snippets.toml
================
[[sources]]
name = "friendly-snippets"
git = "https://github.com/rafamadriz/friendly-snippets.git"

[[sources.paths]]
scope = ["latex"]
path = "snippets/latex/"

================
File: helix/config/languages.toml
================
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 20
snippets_first = true
feature_words = true
feature_snippets = true
feature_unicode_input = true
feature_paths = true

[[language]]
name = "latex"
language-servers = [ "scls", "texlab" ]

================
File: helix/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/helix".source = homeManagerConfig.linkHostApp config "helix";
}

================
File: kanata/config/personal.kbd
================
;; Caps to escape/control configuration for Kanata

(defcfg
  process-unmapped-keys yes
)

(defsrc
  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10   f11   f12
  caps a s d f j k l ;
)

(defvar
  tap-time 150
  hold-time 200
)

;; Definine two aliases, one for esc/control to other for function key
(defalias
  escctrl (tap-hold 100 100 esc lctl)
  a (tap-hold $tap-time $hold-time a lmet)
  s (tap-hold $tap-time $hold-time s lalt)
  d (tap-hold $tap-time $hold-time d lsft)
  f (tap-hold $tap-time $hold-time f lctl)
  j (tap-hold $tap-time $hold-time j rctl)
  k (tap-hold $tap-time $hold-time k rsft)
  l (tap-hold $tap-time $hold-time l ralt)
  ; (tap-hold $tap-time $hold-time ; rmet)
)

(deflayer base
  brdn     brup  _    _    _    _   prev  pp  next  mute  vold  volu
  @escctrl @a    @s   @d   @f   @j  @k    @l  @;
)

(deflayer fn
  f1       f2  f3  f4  f5  f6  f7  f8  f9   f10   f11   f12
  @escctrl _   _   _   _   _   _   _   _
)
      
;; vim:ft=lisp:

================
File: kanata/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/kanata".source = homeManagerConfig.linkHostApp config "kanata";
}

================
File: kitty/config/current-theme.conf
================
# vim:ft=kitty

## name: Tokyo Night
## license: MIT
## author: Folke Lemaitre
## upstream: https://github.com/folke/tokyonight.nvim/raw/main/extras/kitty/tokyonight_night.conf


background #1a1b26
foreground #c0caf5
selection_background #283457
selection_foreground #c0caf5
url_color #73daca
cursor #c0caf5
cursor_text_color #1a1b26

# Tabs
active_tab_background #7aa2f7
active_tab_foreground #16161e
inactive_tab_background #292e42
inactive_tab_foreground #545c7e
#tab_bar_background #15161e

# Windows
active_border_color #7aa2f7
inactive_border_color #292e42

# normal
color0 #15161e
color1 #f7768e
color2 #9ece6a
color3 #e0af68
color4 #7aa2f7
color5 #bb9af7
color6 #7dcfff
color7 #a9b1d6

# bright
color8 #414868
color9 #f7768e
color10 #9ece6a
color11 #e0af68
color12 #7aa2f7
color13 #bb9af7
color14 #7dcfff
color15 #c0caf5

# extended colors
color16 #ff9e64
color17 #db4b4b

================
File: kitty/config/kitty.conf
================
font_family      Liga SFMono Nerd Font
bold_font        Liga SFMono Nerd Font Bold
italic_font      Liga SFMono Nerd Font Regular Italic
bold_italic_font Liga SFMono Nerd Font Bold Italic
font_size 13.0
hide_window_decorations titlebar-only
window_margin_width 4
cursor_blink_interval 0
macos_quit_when_last_window_closed no
macos_colorspace default
macos_show_window_title_in window
repaint_delay 8
input_delay 1
resize_draw_strategy blank
remember_window_size no
resize_debounce_time 0.001
confirm_os_window_close -2

tab_bar_edge top
tab_bar_style powerline
tab_powerline_style slanted
tab_activity_symbol 
tab_title_max_length 30
tab_title_template "{fmt.fg.red}{bell_symbol}{fmt.fg.tab} {index}: ({tab.active_oldest_exe}) {title} {activity_symbol}"
map cmd+1 goto_tab 1
map cmd+2 goto_tab 2
map cmd+3 goto_tab 3
map cmd+4 goto_tab 4
map cmd+5 goto_tab 5
map cmd+6 goto_tab 6
map cmd+7 goto_tab 7
map cmd+8 goto_tab 8
map cmd+9 goto_tab 9
map cmd+0 goto_tab 10

map cmd+t launch --type=tab --cwd=current
map cmd+n launch --type=os-window --cwd=current 

symbol_map U+F0001-U+F1af0 Hack Nerd Font
symbol_map U+F8FF,U+100000-U+1018C7 SF Pro

# Sonokai
background #2c2e34
foreground #e1e3e4

selection_background #3d4455
selection_foreground #e1e3e4

cursor #e1e3e4
cursor_text_color background

active_tab_background #2a2f38
active_tab_foreground #e1e3e4
active_tab_font_style bold
inactive_tab_background #2a2f38
inactive_tab_foreground #e1e3e4
inactive_tab_font_style normal

# Black
color0 #181a1c
color8 #828a9a

# Red
color1 #ff6578
color9 #ff6578

# Green
color2 #9dd274
color10 #9dd274

# Yellow
color3 #eacb64
color11 #eacb64

# Blue
color4 #72cce8
color12 #72cce8

# Magenta
color5 #ba9cf3
color13 #ba9cf3

# Cyan
color6 #f69c5e
color7 #f69c5e

# White
color7 #e1e3e4
color15 #e1e3e4

# vim:ft=kitty

## name:     Catppuccin Kitty Mocha
## author:   Catppuccin Org
## license:  MIT
## upstream: https://github.com/catppuccin/kitty/blob/main/mocha.conf
## blurb:    Soothing pastel theme for the high-spirited!

# The basic colors
# foreground              #CDD6F4
# background              #1E1E2E
# selection_foreground    #1E1E2E
# selection_background    #F5E0DC

# Cursor colors
# cursor                  #F5E0DC
# cursor_text_color       #1E1E2E

# URL underline color when hovering with mouse
# url_color               #F5E0DC

# Kitty window border colors
# active_border_color     #B4BEFE
# inactive_border_color   #6C7086
# bell_border_color       #F9E2AF

# OS Window titlebar colors
wayland_titlebar_color system
macos_titlebar_color system

# Tab bar colors
# active_tab_foreground   #11111B
# active_tab_background   #A6E3A1
# inactive_tab_foreground #CDD6F4
# inactive_tab_background #3C3E4F
# tab_bar_background      #3C3E4F

# Colors for marks (marked text in the terminal)
# mark1_foreground #1E1E2E
# mark1_background #B4BEFE
# mark2_foreground #1E1E2E
# mark2_background #CBA6F7
# mark3_foreground #1E1E2E
# mark3_background #74C7EC

# The 16 terminal colors

# black
# color0 #45475A
# color8 #585B70

# red
# color1 #F38BA8
# color9 #F38BA8

# green
# color2  #A6E3A1
# color10 #A6E3A1

# yellow
# color3  #F9E2AF
# color11 #F9E2AF

# blue
# color4  #89B4FA
# color12 #89B4FA

# magenta
# color5  #F5C2E7
# color13 #F5C2E7

# cyan
# color6  #94E2D5
# color14 #94E2D5

# white
# color7  #BAC2DE
# color15 #A6ADC8

================
File: kitty/config/startup-session.conf
================
new_tab personal
cd ~
enabled_layouts tall
layout stack
launch zsh

# new_tab malenia
# enabled_layouts tall
# layout stack
# launch ssh malenia

# new_tab miquella
# enabled_layouts tall
# layout stack
# launch ssh miquella

================
File: kitty/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/kitty".source = homeManagerConfig.linkHostApp config "kitty";
}

================
File: sketchybar/config/helpers/event_providers/cpu_load/cpu_load.c
================
#include "cpu.h"
#include "../sketchybar.h"

int main (int argc, char** argv) {
  float update_freq;
  if (argc < 3 || (sscanf(argv[2], "%f", &update_freq) != 1)) {
    printf("Usage: %s \"<event-name>\" \"<event_freq>\"\n", argv[0]);
    exit(1);
  }

  alarm(0);
  struct cpu cpu;
  cpu_init(&cpu);

  // Setup the event in sketchybar
  char event_message[512];
  snprintf(event_message, 512, "--add event '%s'", argv[1]);
  sketchybar(event_message);

  char trigger_message[512];
  for (;;) {
    // Acquire new info
    cpu_update(&cpu);

    // Prepare the event message
    snprintf(trigger_message,
             512,
             "--trigger '%s' user_load='%d' sys_load='%02d' total_load='%02d'",
             argv[1],
             cpu.user_load,
             cpu.sys_load,
             cpu.total_load                                        );

    // Trigger the event
    sketchybar(trigger_message);

    // Wait
    usleep(update_freq * 1000000);
  }
  return 0;
}

================
File: sketchybar/config/helpers/event_providers/cpu_load/cpu.h
================
#include <mach/mach.h>
#include <stdbool.h>
#include <unistd.h>
#include <stdio.h>

struct cpu {
  host_t host;
  mach_msg_type_number_t count;
  host_cpu_load_info_data_t load;
  host_cpu_load_info_data_t prev_load;
  bool has_prev_load;

  int user_load;
  int sys_load;
  int total_load;
};

static inline void cpu_init(struct cpu* cpu) {
  cpu->host = mach_host_self();
  cpu->count = HOST_CPU_LOAD_INFO_COUNT;
  cpu->has_prev_load = false;
}

static inline void cpu_update(struct cpu* cpu) {
  kern_return_t error = host_statistics(cpu->host,
                                        HOST_CPU_LOAD_INFO,
                                        (host_info_t)&cpu->load,
                                        &cpu->count                );

  if (error != KERN_SUCCESS) {
    printf("Error: Could not read cpu host statistics.\n");
    return;
  }

  if (cpu->has_prev_load) {
    uint32_t delta_user = cpu->load.cpu_ticks[CPU_STATE_USER]
                          - cpu->prev_load.cpu_ticks[CPU_STATE_USER];

    uint32_t delta_system = cpu->load.cpu_ticks[CPU_STATE_SYSTEM]
                            - cpu->prev_load.cpu_ticks[CPU_STATE_SYSTEM];

    uint32_t delta_idle = cpu->load.cpu_ticks[CPU_STATE_IDLE]
                          - cpu->prev_load.cpu_ticks[CPU_STATE_IDLE];

    cpu->user_load = (double)delta_user / (double)(delta_system
                                                     + delta_user
                                                     + delta_idle) * 100.0;

    cpu->sys_load = (double)delta_system / (double)(delta_system
                                                      + delta_user
                                                      + delta_idle) * 100.0;

    cpu->total_load = cpu->user_load + cpu->sys_load;
  }

  cpu->prev_load = cpu->load;
  cpu->has_prev_load = true;
}

================
File: sketchybar/config/helpers/event_providers/cpu_load/makefile
================
bin/cpu_load: cpu_load.c cpu.h ../sketchybar.h | bin
	clang -std=c99 -O3 $< -o $@

bin:
	mkdir bin

================
File: sketchybar/config/helpers/event_providers/network_load/makefile
================
bin/network_load: network_load.c network.h ../sketchybar.h | bin
	clang -std=c99 -O3 $< -o $@

bin:
	mkdir bin

================
File: sketchybar/config/helpers/event_providers/network_load/network_load.c
================
#include <unistd.h>
#include "network.h"
#include "../sketchybar.h"

int main (int argc, char** argv) {
  float update_freq;
  if (argc < 4 || (sscanf(argv[3], "%f", &update_freq) != 1)) {
    printf("Usage: %s \"<interface>\" \"<event-name>\" \"<event_freq>\"\n", argv[0]);
    exit(1);
  }

  alarm(0);
  // Setup the event in sketchybar
  char event_message[512];
  snprintf(event_message, 512, "--add event '%s'", argv[2]);
  sketchybar(event_message);

  struct network network;
  network_init(&network, argv[1]);
  char trigger_message[512];
  for (;;) {
    // Acquire new info
    network_update(&network);

    // Prepare the event message
    snprintf(trigger_message,
             512,
             "--trigger '%s' upload='%03d%s' download='%03d%s'",
             argv[2],
             network.up,
             unit_str[network.up_unit],
             network.down,
             unit_str[network.down_unit]);

    // Trigger the event
    sketchybar(trigger_message);

    // Wait
    usleep(update_freq * 1000000);
  }
  return 0;
}

================
File: sketchybar/config/helpers/event_providers/network_load/network.h
================
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <net/if.h>
#include <net/if_mib.h>
#include <sys/select.h>
#include <sys/sysctl.h>

static char unit_str[3][6] = { { " Bps" }, { "KBps" }, { "MBps" }, };

enum unit {
  UNIT_BPS,
  UNIT_KBPS,
  UNIT_MBPS
};
struct network {
  uint32_t row;
  struct ifmibdata data;
  struct timeval tv_nm1, tv_n, tv_delta;

  int up;
  int down;
  enum unit up_unit, down_unit;
};

static inline void ifdata(uint32_t net_row, struct ifmibdata* data) {
	static size_t size = sizeof(struct ifmibdata);
  static int32_t data_option[] = { CTL_NET, PF_LINK, NETLINK_GENERIC, IFMIB_IFDATA, 0, IFDATA_GENERAL };
  data_option[4] = net_row;
  sysctl(data_option, 6, data, &size, NULL, 0);
}

static inline void network_init(struct network* net, char* ifname) {
  memset(net, 0, sizeof(struct network));

  static int count_option[] = { CTL_NET, PF_LINK, NETLINK_GENERIC, IFMIB_SYSTEM, IFMIB_IFCOUNT };
  uint32_t interface_count = 0;
  size_t size = sizeof(uint32_t);
  sysctl(count_option, 5, &interface_count, &size, NULL, 0);

  for (int i = 0; i < interface_count; i++) {
    ifdata(i, &net->data);
    if (strcmp(net->data.ifmd_name, ifname) == 0) {
      net->row = i;
      break;
    }
  }
}

static inline void network_update(struct network* net) {
  gettimeofday(&net->tv_n, NULL);
  timersub(&net->tv_n, &net->tv_nm1, &net->tv_delta);
  net->tv_nm1 = net->tv_n;

  uint64_t ibytes_nm1 = net->data.ifmd_data.ifi_ibytes;
  uint64_t obytes_nm1 = net->data.ifmd_data.ifi_obytes;
  ifdata(net->row, &net->data);

  double time_scale = (net->tv_delta.tv_sec + 1e-6*net->tv_delta.tv_usec);
  if (time_scale < 1e-6 || time_scale > 1e2) return;
  double delta_ibytes = (double)(net->data.ifmd_data.ifi_ibytes - ibytes_nm1)
                        / time_scale;
  double delta_obytes = (double)(net->data.ifmd_data.ifi_obytes - obytes_nm1)
                        / time_scale;

  double exponent_ibytes = log10(delta_ibytes);
  double exponent_obytes = log10(delta_obytes);

  if (exponent_ibytes < 3) {
    net->down_unit = UNIT_BPS;
    net->down = delta_ibytes;
  } else if (exponent_ibytes < 6) {
    net->down_unit = UNIT_KBPS;
    net->down = delta_ibytes / 1000.0;
  } else if (exponent_ibytes < 9) {
    net->down_unit = UNIT_MBPS;
    net->down = delta_ibytes / 1000000.0;
  }

  if (exponent_obytes < 3) {
    net->up_unit = UNIT_BPS;
    net->up = delta_obytes;
  } else if (exponent_obytes < 6) {
    net->up_unit = UNIT_KBPS;
    net->up = delta_obytes / 1000.0;
  } else if (exponent_obytes < 9) {
    net->up_unit = UNIT_MBPS;
    net->up = delta_obytes / 1000000.0;
  }
}

================
File: sketchybar/config/helpers/event_providers/makefile
================
all:
	(cd cpu_load && $(MAKE))
	(cd network_load && $(MAKE))

================
File: sketchybar/config/helpers/event_providers/sketchybar.h
================
#pragma once

#include <mach/arm/kern_return.h>
#include <mach/mach.h>
#include <mach/mach_port.h>
#include <mach/message.h>
#include <bootstrap.h>
#include <stdlib.h>
#include <pthread.h>
#include <stdio.h>

typedef char* env;

#define MACH_HANDLER(name) void name(env env)
typedef MACH_HANDLER(mach_handler);

struct mach_message {
  mach_msg_header_t header;
  mach_msg_size_t msgh_descriptor_count;
  mach_msg_ool_descriptor_t descriptor;
};

struct mach_buffer {
  struct mach_message message;
  mach_msg_trailer_t trailer;
};

static mach_port_t g_mach_port = 0;

static inline mach_port_t mach_get_bs_port() {
  mach_port_name_t task = mach_task_self();

  mach_port_t bs_port;
  if (task_get_special_port(task,
                            TASK_BOOTSTRAP_PORT,
                            &bs_port            ) != KERN_SUCCESS) {
    return 0;
  }

  char* name = getenv("BAR_NAME");
  if (!name) name = "sketchybar";
  uint32_t lookup_len = 16 + strlen(name);

  char buffer[lookup_len];
  snprintf(buffer, lookup_len, "git.felix.%s", name);

  mach_port_t port;
  if (bootstrap_look_up(bs_port, buffer, &port) != KERN_SUCCESS) return 0;
  return port;
}

static inline bool mach_send_message(mach_port_t port, char* message, uint32_t len) {
  if (!message || !port) {
    return false;
  }

  struct mach_message msg = { 0 };
  msg.header.msgh_remote_port = port;
  msg.header.msgh_local_port = 0;
  msg.header.msgh_id = 0;
  msg.header.msgh_bits = MACH_MSGH_BITS_SET(MACH_MSG_TYPE_COPY_SEND,
                                            MACH_MSG_TYPE_MAKE_SEND,
                                            0,
                                            MACH_MSGH_BITS_COMPLEX       );

  msg.header.msgh_size = sizeof(struct mach_message);
  msg.msgh_descriptor_count = 1;
  msg.descriptor.address = message;
  msg.descriptor.size = len * sizeof(char);
  msg.descriptor.copy = MACH_MSG_VIRTUAL_COPY;
  msg.descriptor.deallocate = false;
  msg.descriptor.type = MACH_MSG_OOL_DESCRIPTOR;

  kern_return_t err = mach_msg(&msg.header,
                               MACH_SEND_MSG,
                               sizeof(struct mach_message),
                               0,
                               MACH_PORT_NULL,
                               MACH_MSG_TIMEOUT_NONE,
                               MACH_PORT_NULL              );

  return err == KERN_SUCCESS;
}

static inline uint32_t format_message(char* message, char* formatted_message) {
  // This is not actually robust, switch to stack based messaging.
  char outer_quote = 0;
  uint32_t caret = 0;
  uint32_t message_length = strlen(message) + 1;
  for (int i = 0; i < message_length; ++i) {
    if (message[i] == '"' || message[i] == '\'') {
      if (outer_quote && outer_quote == message[i]) outer_quote = 0;
      else if (!outer_quote) outer_quote = message[i];
      continue;
    }
    formatted_message[caret] = message[i];
    if (message[i] == ' ' && !outer_quote) formatted_message[caret] = '\0';
    caret++;
  }

  if (caret > 0 && formatted_message[caret] == '\0'
      && formatted_message[caret - 1] == '\0') {
    caret--;
  }
  formatted_message[caret] = '\0';
  return caret + 1;
}

static inline void sketchybar(char* message) {
  char formatted_message[strlen(message) + 2];
  uint32_t length = format_message(message, formatted_message);
  if (!length) return;

  if (!g_mach_port) g_mach_port = mach_get_bs_port();
  if (!mach_send_message(g_mach_port, formatted_message, length)) {
    g_mach_port = mach_get_bs_port();
    if (!mach_send_message(g_mach_port, formatted_message, length)) {
      // No sketchybar instance running, exit.
      exit(0);
    }
  }
}

================
File: sketchybar/config/helpers/menus/makefile
================
bin/menus: menus.c | bin
	clang -std=c99 -O3 -F/System/Library/PrivateFrameworks/ -framework Carbon -framework SkyLight $< -o $@

bin:
	mkdir bin

================
File: sketchybar/config/helpers/menus/menus.c
================
#include <Carbon/Carbon.h>

void ax_init() {
  const void *keys[] = { kAXTrustedCheckOptionPrompt };
  const void *values[] = { kCFBooleanTrue };

  CFDictionaryRef options;
  options = CFDictionaryCreate(kCFAllocatorDefault,
                               keys,
                               values,
                               sizeof(keys) / sizeof(*keys),
                               &kCFCopyStringDictionaryKeyCallBacks,
                               &kCFTypeDictionaryValueCallBacks     );

  bool trusted = AXIsProcessTrustedWithOptions(options);
  CFRelease(options);
  if (!trusted) exit(1);
}

void ax_perform_click(AXUIElementRef element) {
  if (!element) return;
  AXUIElementPerformAction(element, kAXCancelAction);
  usleep(150000);
  AXUIElementPerformAction(element, kAXPressAction);
}

CFStringRef ax_get_title(AXUIElementRef element) {
  CFTypeRef title = NULL;
  AXError error = AXUIElementCopyAttributeValue(element,
                                                kAXTitleAttribute,
                                                &title            );

  if (error != kAXErrorSuccess) return NULL;
  return title;
}

void ax_select_menu_option(AXUIElementRef app, int id) {
  AXUIElementRef menubars_ref = NULL;
  CFArrayRef children_ref = NULL;

  AXError error = AXUIElementCopyAttributeValue(app,
                                                kAXMenuBarAttribute,
                                                (CFTypeRef*)&menubars_ref);
  if (error == kAXErrorSuccess) {
    error = AXUIElementCopyAttributeValue(menubars_ref,
                                          kAXVisibleChildrenAttribute,
                                          (CFTypeRef*)&children_ref   );

    if (error == kAXErrorSuccess) {
      uint32_t count = CFArrayGetCount(children_ref);
      if (id < count) {
        AXUIElementRef item = CFArrayGetValueAtIndex(children_ref, id);
        ax_perform_click(item);
      }
      if (children_ref) CFRelease(children_ref);
    }
    if (menubars_ref) CFRelease(menubars_ref);
  }
}

void ax_print_menu_options(AXUIElementRef app) {
  AXUIElementRef menubars_ref = NULL;
  CFTypeRef menubar = NULL;
  CFArrayRef children_ref = NULL;

  AXError error = AXUIElementCopyAttributeValue(app,
                                                kAXMenuBarAttribute,
                                                (CFTypeRef*)&menubars_ref);
  if (error == kAXErrorSuccess) {
    error = AXUIElementCopyAttributeValue(menubars_ref,
                                          kAXVisibleChildrenAttribute,
                                          (CFTypeRef*)&children_ref   );

    if (error == kAXErrorSuccess) {
      uint32_t count = CFArrayGetCount(children_ref);

      for (int i = 1; i < count; i++) {
        AXUIElementRef item = CFArrayGetValueAtIndex(children_ref, i);
        CFTypeRef title = ax_get_title(item);

        if (title) {
          uint32_t buffer_len = 2*CFStringGetLength(title);
          char buffer[2*CFStringGetLength(title)];
          CFStringGetCString(title, buffer, buffer_len, kCFStringEncodingUTF8);
          printf("%s\n", buffer);
          CFRelease(title);
        }
      }
    }
    if (menubars_ref) CFRelease(menubars_ref);
    if (children_ref) CFRelease(children_ref);
  }
}

AXUIElementRef ax_get_extra_menu_item(char* alias) {
  pid_t pid = 0;
  CGRect bounds = CGRectNull;
  CFArrayRef window_list = CGWindowListCopyWindowInfo(kCGWindowListOptionAll,
                                                      kCGNullWindowID        );
  char owner_buffer[256];
  char name_buffer[256];
  char buffer[512];
  int window_count = CFArrayGetCount(window_list);
  for (int i = 0; i < window_count; ++i) {
    CFDictionaryRef dictionary = CFArrayGetValueAtIndex(window_list, i);
    if (!dictionary) continue;

    CFStringRef owner_ref = CFDictionaryGetValue(dictionary,
                                                 kCGWindowOwnerName);

    CFNumberRef owner_pid_ref = CFDictionaryGetValue(dictionary,
                                                     kCGWindowOwnerPID);

    CFStringRef name_ref = CFDictionaryGetValue(dictionary, kCGWindowName);
    CFNumberRef layer_ref = CFDictionaryGetValue(dictionary, kCGWindowLayer);
    CFDictionaryRef bounds_ref = CFDictionaryGetValue(dictionary,
                                                      kCGWindowBounds);

    if (!name_ref || !owner_ref || !owner_pid_ref || !layer_ref || !bounds_ref)
      continue;

    long long int layer = 0;
    CFNumberGetValue(layer_ref, CFNumberGetType(layer_ref), &layer);
    uint64_t owner_pid = 0;
    CFNumberGetValue(owner_pid_ref,
                     CFNumberGetType(owner_pid_ref),
                     &owner_pid                     );

    if (layer != 0x19) continue;
    bounds = CGRectNull;
    if (!CGRectMakeWithDictionaryRepresentation(bounds_ref, &bounds)) continue;
    CFStringGetCString(owner_ref,
                       owner_buffer,
                       sizeof(owner_buffer),
                       kCFStringEncodingUTF8);

    CFStringGetCString(name_ref,
                       name_buffer,
                       sizeof(name_buffer),
                       kCFStringEncodingUTF8);
    snprintf(buffer, sizeof(buffer), "%s,%s", owner_buffer, name_buffer);

    if (strcmp(buffer, alias) == 0) {
      pid = owner_pid;
      break;
    }
  }
  CFRelease(window_list);
  if (!pid) return NULL;

  AXUIElementRef app = AXUIElementCreateApplication(pid);
  if (!app) return NULL;
  AXUIElementRef result = NULL;
  CFTypeRef extras = NULL;
  CFArrayRef children_ref = NULL;
  AXError error = AXUIElementCopyAttributeValue(app,
                                                kAXExtrasMenuBarAttribute,
                                                &extras                   );
  if (error == kAXErrorSuccess) {
    error = AXUIElementCopyAttributeValue(extras,
                                          kAXVisibleChildrenAttribute,
                                          (CFTypeRef*)&children_ref   );

    if (error == kAXErrorSuccess) {
      uint32_t count = CFArrayGetCount(children_ref);
      for (uint32_t i = 0; i < count; i++) {
        AXUIElementRef item = CFArrayGetValueAtIndex(children_ref, i);
        CFTypeRef position_ref = NULL;
        CFTypeRef size_ref = NULL;
        AXUIElementCopyAttributeValue(item, kAXPositionAttribute,
                                            &position_ref        );
        AXUIElementCopyAttributeValue(item, kAXSizeAttribute,
                                            &size_ref        );
        if (!position_ref || !size_ref) continue;

        CGPoint position = CGPointZero;
        AXValueGetValue(position_ref, kAXValueCGPointType, &position);
        CGSize size = CGSizeZero;
        AXValueGetValue(size_ref, kAXValueCGSizeType, &size);
        CFRelease(position_ref);
        CFRelease(size_ref);
        // The offset is exactly 8 on macOS Sonoma...
        // printf("%f %f\n", position.x, bounds.origin.x);
        if (error == kAXErrorSuccess
            && fabs(position.x - bounds.origin.x) <= 10) {
          result = item;
          break;
        }
      }
    }
  }

  CFRelease(app);
  return result;
}

extern int SLSMainConnectionID();
extern void SLSSetMenuBarVisibilityOverrideOnDisplay(int cid, int did, bool enabled);
extern void SLSSetMenuBarVisibilityOverrideOnDisplay(int cid, int did, bool enabled);
extern void SLSSetMenuBarInsetAndAlpha(int cid, double u1, double u2, float alpha);
void ax_select_menu_extra(char* alias) {
  AXUIElementRef item = ax_get_extra_menu_item(alias);
  if (!item) return;
  SLSSetMenuBarInsetAndAlpha(SLSMainConnectionID(), 0, 1, 0.0);
  SLSSetMenuBarVisibilityOverrideOnDisplay(SLSMainConnectionID(), 0, true);
  SLSSetMenuBarInsetAndAlpha(SLSMainConnectionID(), 0, 1, 0.0);
  ax_perform_click(item);
  SLSSetMenuBarVisibilityOverrideOnDisplay(SLSMainConnectionID(), 0, false);
  SLSSetMenuBarInsetAndAlpha(SLSMainConnectionID(), 0, 1, 1.0);
  CFRelease(item);
}

extern void _SLPSGetFrontProcess(ProcessSerialNumber* psn);
extern void SLSGetConnectionIDForPSN(int cid, ProcessSerialNumber* psn, int* cid_out);
extern void SLSConnectionGetPID(int cid, pid_t* pid_out);
AXUIElementRef ax_get_front_app() {
  ProcessSerialNumber psn;
  _SLPSGetFrontProcess(&psn);
  int target_cid;
  SLSGetConnectionIDForPSN(SLSMainConnectionID(), &psn, &target_cid);

  pid_t pid;
  SLSConnectionGetPID(target_cid, &pid);
  return AXUIElementCreateApplication(pid);
}

int main (int argc, char **argv) {
  if (argc == 1) {
    printf("Usage: %s [-l | -s id/alias ]\n", argv[0]);
    exit(0);
  }
  ax_init();
  if (strcmp(argv[1], "-l") == 0) {
    AXUIElementRef app = ax_get_front_app();
    if (!app) return 1;
    ax_print_menu_options(app);
    CFRelease(app);
  } else if (argc == 3 && strcmp(argv[1], "-s") == 0) {
    int id = 0;
    if (sscanf(argv[2], "%d", &id) == 1) {
      AXUIElementRef app = ax_get_front_app();
      if (!app) return 1;
      ax_select_menu_option(app, id);
      CFRelease(app);
    } else ax_select_menu_extra(argv[2]);
  }
  return 0;
}

================
File: sketchybar/config/helpers/.gitignore
================
bin

================
File: sketchybar/config/helpers/app_icons.lua
================
return {
	["Live"] = ":ableton:",
	["Adobe Bridge"] = ":adobe_bridge:",
	["Affinity Designer"] = ":affinity_designer:",
	["Affinity Designer 2"] = ":affinity_designer_2:",
	["Affinity Photo"] = ":affinity_photo:",
	["Affinity Photo 2"] = ":affinity_photo_2:",
	["Affinity Publisher"] = ":affinity_publisher:",
	["Affinity Publisher 2"] = ":affinity_publisher_2:",
	["Airmail"] = ":airmail:",
	["Alacritty"] = ":alacritty:",
	["Alfred"] = ":alfred:",
	["Android Messages"] = ":android_messages:",
	["Android Studio"] = ":android_studio:",
	["Anki"] = ":anki:",
	["Anytype"] = ":anytype:",
	["App Eraser"] = ":app_eraser:",
	["App Store"] = ":app_store:",
	["Arc"] = ":arc:",
	["Arduino"] = ":arduino:",
	["Arduino IDE"] = ":arduino:",
	["Atom"] = ":atom:",
	["Audacity"] = ":audacity:",
	["Bambu Studio"] = ":bambu_studio:",
	["MoneyMoney"] = ":bank:",
	["Battle.net"] = ":battle_net:",
	["Bear"] = ":bear:",
	["BetterTouchTool"] = ":bettertouchtool:",
	["Bilibili"] = ":bilibili:",
	["哔哩哔哩"] = ":bilibili:",
	["Bitwarden"] = ":bit_warden:",
	["Blender"] = ":blender:",
	["BluOS Controller"] = ":bluos_controller:",
	["Calibre"] = ":book:",
	["Brave Browser"] = ":brave_browser:",
	["BusyCal"] = ":busycal:",
	["Calculator"] = ":calculator:",
	["Calculette"] = ":calculator:",
	["Calendar"] = ":calendar:",
	["日历"] = ":calendar:",
	["Fantastical"] = ":calendar:",
	["Cron"] = ":calendar:",
	["Amie"] = ":calendar:",
	["Calendrier"] = ":calendar:",
	["Notion Calendar"] = ":calendar:",
	["Caprine"] = ":caprine:",
	["Amazon Chime"] = ":chime:",
	["Citrix Workspace"] = ":citrix:",
	["Citrix Viewer"] = ":citrix:",
	["Claude"] = ":claude:",
	["ClickUp"] = ":click_up:",
	["Code"] = ":code:",
	["Code - Insiders"] = ":code:",
	["Cold Turkey Blocker"] = ":cold_turkey_blocker:",
	["Color Picker"] = ":color_picker:",
	["数码测色计"] = ":color_picker:",
	["Copilot"] = ":copilot:",
	["CotEditor"] = ":coteditor:",
	["Creative Cloud"] = ":creative_cloud:",
	["Cursor"] = ":cursor:",
	["Cypress"] = ":cypress:",
	["DataGrip"] = ":datagrip:",
	["DataSpell"] = ":dataspell:",
	["DaVinci Resolve"] = ":davinciresolve:",
	["Deezer"] = ":deezer:",
	["Default"] = ":default:",
	["CleanMyMac X"] = ":desktop:",
	["DEVONthink 3"] = ":devonthink3:",
	["DingTalk"] = ":dingtalk:",
	["钉钉"] = ":dingtalk:",
	["阿里钉"] = ":dingtalk:",
	["Discord"] = ":discord:",
	["Discord Canary"] = ":discord:",
	["Discord PTB"] = ":discord:",
	["Docker"] = ":docker:",
	["Docker Desktop"] = ":docker:",
	["GrandTotal"] = ":dollar:",
	["Receipts"] = ":dollar:",
	["Double Commander"] = ":doublecmd:",
	["Drafts"] = ":drafts:",
	["draw.io"] = ":draw_io:",
	["Dropbox"] = ":dropbox:",
	["Element"] = ":element:",
	["Emacs"] = ":emacs:",
	["Evernote Legacy"] = ":evernote_legacy:",
	["FaceTime"] = ":face_time:",
	["FaceTime 通话"] = ":face_time:",
	["Figma"] = ":figma:",
	["Final Cut Pro"] = ":final_cut_pro:",
	["Finder"] = ":finder:",
	["访达"] = ":finder:",
	["Firefox"] = ":firefox:",
	["Firefox Developer Edition"] = ":firefox_developer_edition:",
	["Firefox Nightly"] = ":firefox_developer_edition:",
	["Folx"] = ":folx:",
	["Fork"] = ":fork:",
	["FreeTube"] = ":freetube:",
	["Fusion"] = ":fusion:",
	["System Preferences"] = ":gear:",
	["System Settings"] = ":gear:",
	["系统设置"] = ":gear:",
	["Réglages Système"] = ":gear:",
	["GitHub Desktop"] = ":git_hub:",
	["Godot"] = ":godot:",
	["GoLand"] = ":goland:",
	["Chromium"] = ":google_chrome:",
	["Google Chrome"] = ":google_chrome:",
	["Google Chrome Canary"] = ":google_chrome:",
	["Grammarly Editor"] = ":grammarly:",
	["Home Assistant"] = ":home_assistant:",
	["Hyper"] = ":hyper:",
	["IntelliJ IDEA"] = ":idea:",
	["IINA"] = ":iina:",
	["Adobe Illustrator"] = ":illustrator:",
	["Illustrator"] = ":illustrator:",
	["Adobe InDesign"] = ":indesign:",
	["InDesign"] = ":indesign:",
	["Inkdrop"] = ":inkdrop:",
	["Inkscape"] = ":inkscape:",
	["Insomnia"] = ":insomnia:",
	["Iris"] = ":iris:",
	["iTerm"] = ":iterm:",
	["iTerm2"] = ":iterm:",
	["Jellyfin Media Player"] = ":jellyfin:",
	["Joplin"] = ":joplin:",
	["카카오톡"] = ":kakaotalk:",
	["KakaoTalk"] = ":kakaotalk:",
	["Kakoune"] = ":kakoune:",
	["KeePassXC"] = ":kee_pass_x_c:",
	["Keyboard Maestro"] = ":keyboard_maestro:",
	["Keynote"] = ":keynote:",
	["Keynote 讲演"] = ":keynote:",
	["kitty"] = ":kitty:",
	["League of Legends"] = ":league_of_legends:",
	["LibreWolf"] = ":libre_wolf:",
	["Adobe Lightroom"] = ":lightroom:",
	["Lightroom Classic"] = ":lightroomclassic:",
	["LINE"] = ":line:",
	["Linear"] = ":linear:",
	["LM Studio"] = ":lm_studio:",
	["LocalSend"] = ":localsend:",
	["Logic Pro"] = ":logicpro:",
	["Logseq"] = ":logseq:",
	["Canary Mail"] = ":mail:",
	["HEY"] = ":mail:",
	["Mail"] = ":mail:",
	["Mailspring"] = ":mail:",
	["MailMate"] = ":mail:",
	["Superhuman"] = ":mail:",
	["Spark"] = ":mail:",
	["邮件"] = ":mail:",
	["MAMP"] = ":mamp:",
	["MAMP PRO"] = ":mamp:",
	["Maps"] = ":maps:",
	["Google Maps"] = ":maps:",
	["Marta"] = ":marta:",
	["Matlab"] = ":matlab:",
	["Mattermost"] = ":mattermost:",
	["Messages"] = ":messages:",
	["信息"] = ":messages:",
	["Nachrichten"] = ":messages:",
	["Messenger"] = ":messenger:",
	["Microsoft Edge"] = ":microsoft_edge:",
	["Microsoft Excel"] = ":microsoft_excel:",
	["Microsoft Outlook"] = ":microsoft_outlook:",
	["Microsoft PowerPoint"] = ":microsoft_power_point:",
	["Microsoft Remote Desktop"] = ":microsoft_remote_desktop:",
	["Microsoft Teams"] = ":microsoft_teams:",
	["Microsoft Teams (work or school)"] = ":microsoft_teams:",
	["Microsoft Word"] = ":microsoft_word:",
	["Min"] = ":min_browser:",
	["Miro"] = ":miro:",
	["MongoDB Compass"] = ":mongodb:",
	["mpv"] = ":mpv:",
	["Mullvad Browser"] = ":mullvad_browser:",
	["Music"] = ":music:",
	["音乐"] = ":music:",
	["Musique"] = ":music:",
	["Neovide"] = ":neovide:",
	["neovide"] = ":neovide:",
	["Neovim"] = ":neovim:",
	["neovim"] = ":neovim:",
	["nvim"] = ":neovim:",
	["网易云音乐"] = ":netease_music:",
	["Noodl"] = ":noodl:",
	["Noodl Editor"] = ":noodl:",
	["NordVPN"] = ":nord_vpn:",
	["Notability"] = ":notability:",
	["Notes"] = ":notes:",
	["备忘录"] = ":notes:",
	["Notion"] = ":notion:",
	["Nova"] = ":nova:",
	["Numbers"] = ":numbers:",
	["Numbers 表格"] = ":numbers:",
	["Obsidian"] = ":obsidian:",
	["OBS"] = ":obsstudio:",
	["OmniFocus"] = ":omni_focus:",
	["1Password"] = ":one_password:",
	["Open Video Downloader"] = ":open_video_downloader:",
	["ChatGPT"] = ":openai:",
	["OpenVPN Connect"] = ":openvpn_connect:",
	["Opera"] = ":opera:",
	["OrbStack"] = ":orbstack:",
	["OrcaSlicer"] = ":orcaslicer:",
	["Orion"] = ":orion:",
	["Orion RC"] = ":orion:",
	["Pages"] = ":pages:",
	["Pages 文稿"] = ":pages:",
	["Parallels Desktop"] = ":parallels:",
	["Parsec"] = ":parsec:",
	["Preview"] = ":pdf:",
	["预览"] = ":pdf:",
	["Skim"] = ":pdf:",
	["zathura"] = ":pdf:",
	["Aperçu"] = ":pdf:",
	["PDF Expert"] = ":pdf_expert:",
	["Pearcleaner"] = ":pearcleaner:",
	["Phoenix Slides"] = ":phoenix_slides:",
	["Adobe Photoshop"] = ":photoshop:",
	["PhpStorm"] = ":php_storm:",
	["Pi-hole Remote"] = ":pihole:",
	["Pine"] = ":pine:",
	["Plex"] = ":plex:",
	["Plexamp"] = ":plexamp:",
	["Podcasts"] = ":podcasts:",
	["播客"] = ":podcasts:",
	["PomoDone App"] = ":pomodone:",
	["Postman"] = ":postman:",
	["Proton Mail"] = ":proton_mail:",
	["Proton Mail Bridge"] = ":proton_mail:",
	["PrusaSlicer"] = ":prusaslicer:",
	["SuperSlicer"] = ":prusaslicer:",
	["PyCharm"] = ":pycharm:",
	["QQ"] = ":qq:",
	["QQ音乐"] = ":qqmusic:",
	["QQMusic"] = ":qqmusic:",
	["Quantumult X"] = ":quantumult_x:",
	["qutebrowser"] = ":qute_browser:",
	["Raindrop.io"] = ":raindrop_io:",
	["Reeder"] = ":reeder5:",
	["Reminders"] = ":reminders:",
	["提醒事项"] = ":reminders:",
	["Rappels"] = ":reminders:",
	["Replit"] = ":replit:",
	["Rider"] = ":rider:",
	["JetBrains Rider"] = ":rider:",
	["Rio"] = ":rio:",
	["Royal TSX"] = ":royaltsx:",
	["Safari"] = ":safari:",
	["Safari浏览器"] = ":safari:",
	["Safari Technology Preview"] = ":safari:",
	["Sequel Ace"] = ":sequel_ace:",
	["Sequel Pro"] = ":sequel_pro:",
	["Setapp"] = ":setapp:",
	["SF Symbols"] = ":sf_symbols:",
	["Signal"] = ":signal:",
	["sioyek"] = ":sioyek:",
	["Sketch"] = ":sketch:",
	["Skype"] = ":skype:",
	["Slack"] = ":slack:",
	["Spark Desktop"] = ":spark:",
	["Spotify"] = ":spotify:",
	["Spotlight"] = ":spotlight:",
	["Sublime Text"] = ":sublime_text:",
	["superProductivity"] = ":superproductivity:",
	["Tana"] = ":tana:",
	["TeamSpeak 3"] = ":team_speak:",
	["Telegram"] = ":telegram:",
	["Terminal"] = ":terminal:",
	["终端"] = ":terminal:",
	["Typora"] = ":text:",
	["Microsoft To Do"] = ":things:",
	["Things"] = ":things:",
	["Thunderbird"] = ":thunderbird:",
	["TickTick"] = ":tick_tick:",
	["TIDAL"] = ":tidal:",
	["Tiny RDM"] = ":tinyrdm:",
	["Todoist"] = ":todoist:",
	["Toggl Track"] = ":toggl_track:",
	["Tor Browser"] = ":tor_browser:",
	["Tower"] = ":tower:",
	["Transmit"] = ":transmit:",
	["Trello"] = ":trello:",
	["Tweetbot"] = ":twitter:",
	["Twitter"] = ":twitter:",
	["UTM"] = ":utm:",
	["MacVim"] = ":vim:",
	["Vim"] = ":vim:",
	["VimR"] = ":vim:",
	["Vivaldi"] = ":vivaldi:",
	["VLC"] = ":vlc:",
	["VMware Fusion"] = ":vmware_fusion:",
	["VSCodium"] = ":vscodium:",
	["Warp"] = ":warp:",
	["WebStorm"] = ":web_storm:",
	["微信"] = ":wechat:",
	["WeChat"] = ":wechat:",
	["企业微信"] = ":wecom:",
	["WeCom"] = ":wecom:",
	["WezTerm"] = ":wezterm:",
	["WhatsApp"] = ":whats_app:",
	["‎WhatsApp"] = ":whats_app:",
	["Xcode"] = ":xcode:",
	["Yandex Music"] = ":yandex_music:",
	["Yuque"] = ":yuque:",
	["语雀"] = ":yuque:",
	["Zed"] = ":zed:",
	["Zen Browser"] = ":zen_browser:",
	["Zeplin"] = ":zeplin:",
	["zoom.us"] = ":zoom:",
	["Zotero"] = ":zotero:",
	["Zulip"] = ":zulip:",
}

================
File: sketchybar/config/helpers/default_font.lua
================
return {
  text = "SF Pro", -- Used for text
  numbers = "SF Mono", -- Used for numbers

  -- Unified font style map
  style_map = {
    ["Regular"] = "Regular",
    ["Semibold"] = "Semibold",
    ["Bold"] = "Bold",
    ["Heavy"] = "Heavy",
    ["Black"] = "Black",
  }
}

================
File: sketchybar/config/helpers/init.lua
================
-- Add the sketchybar module to the package cpath
package.cpath = package.cpath .. ";/Users/" .. os.getenv("USER") .. "/.local/share/sketchybar_lua/?.so"

os.execute("(cd helpers && make)")

================
File: sketchybar/config/helpers/makefile
================
all:
	(cd event_providers && $(MAKE)) >/dev/null
	(cd menus && $(MAKE)) >/dev/null

================
File: sketchybar/config/items/widgets/battery.lua
================
local icons = require("icons")
local colors = require("colors")
local settings = require("settings")

local battery = sbar.add("item", "widgets.battery", {
  position = "right",
  icon = {
    font = {
      style = settings.font.style_map["Regular"],
      size = 19.0,
    }
  },
  label = { font = { family = settings.font.numbers } },
  update_freq = 180,
  popup = { align = "center" }
})

local remaining_time = sbar.add("item", {
  position = "popup." .. battery.name,
  icon = {
    string = "Time remaining:",
    width = 100,
    align = "left"
  },
  label = {
    string = "??:??h",
    width = 100,
    align = "right"
  },
})


battery:subscribe({"routine", "power_source_change", "system_woke"}, function()
  sbar.exec("pmset -g batt", function(batt_info)
    local icon = "!"
    local label = "?"

    local found, _, charge = batt_info:find("(%d+)%%")
    if found then
      charge = tonumber(charge)
      label = charge .. "%"
    end

    local color = colors.green
    local charging, _, _ = batt_info:find("AC Power")

    if charging then
      icon = icons.battery.charging
    else
      if found and charge > 80 then
        icon = icons.battery._100
      elseif found and charge > 60 then
        icon = icons.battery._75
      elseif found and charge > 40 then
        icon = icons.battery._50
      elseif found and charge > 20 then
        icon = icons.battery._25
        color = colors.orange
      else
        icon = icons.battery._0
        color = colors.red
      end
    end

    local lead = ""
    if found and charge < 10 then
      lead = "0"
    end

    battery:set({
      icon = {
        string = icon,
        color = color
      },
      label = { string = lead .. label },
    })
  end)
end)

battery:subscribe("mouse.clicked", function(env)
  local drawing = battery:query().popup.drawing
  battery:set( { popup = { drawing = "toggle" } })

  if drawing == "off" then
    sbar.exec("pmset -g batt", function(batt_info)
      local found, _, remaining = batt_info:find(" (%d+:%d+) remaining")
      local label = found and remaining .. "h" or "No estimate"
      remaining_time:set( { label = label })
    end)
  end
end)

sbar.add("bracket", "widgets.battery.bracket", { battery.name }, {
  background = { color = colors.bg1 }
})

sbar.add("item", "widgets.battery.padding", {
  position = "right",
  width = settings.group_paddings
})

================
File: sketchybar/config/items/widgets/cpu.lua
================
local icons = require("icons")
local colors = require("colors")
local settings = require("settings")

-- Execute the event provider binary which provides the event "cpu_update" for
-- the cpu load data, which is fired every 2.0 seconds.
sbar.exec("killall cpu_load >/dev/null; $CONFIG_DIR/helpers/event_providers/cpu_load/bin/cpu_load cpu_update 2.0")

local cpu = sbar.add("graph", "widgets.cpu" , 42, {
  position = "right",
  graph = { color = colors.blue },
  background = {
    height = 22,
    color = { alpha = 0 },
    border_color = { alpha = 0 },
    drawing = true,
  },
  icon = { string = icons.cpu },
  label = {
    string = "cpu ??%",
    font = {
      family = settings.font.numbers,
      style = settings.font.style_map["Bold"],
      size = 9.0,
    },
    align = "right",
    padding_right = 0,
    width = 0,
    y_offset = 4
  },
  padding_right = settings.paddings + 6
})

cpu:subscribe("cpu_update", function(env)
  -- Also available: env.user_load, env.sys_load
  local load = tonumber(env.total_load)
  cpu:push({ load / 100. })

  local color = colors.blue
  if load > 30 then
    if load < 60 then
      color = colors.yellow
    elseif load < 80 then
      color = colors.orange
    else
      color = colors.red
    end
  end

  cpu:set({
    graph = { color = color },
    label = "cpu " .. env.total_load .. "%",
  })
end)

cpu:subscribe("mouse.clicked", function(env)
  sbar.exec("open -a 'Activity Monitor'")
end)

-- Background around the cpu item
sbar.add("bracket", "widgets.cpu.bracket", { cpu.name }, {
  background = { color = colors.bg1 }
})

-- Background around the cpu item
sbar.add("item", "widgets.cpu.padding", {
  position = "right",
  width = settings.group_paddings
})

================
File: sketchybar/config/items/widgets/init.lua
================
require("items.widgets.battery")
require("items.widgets.volume")
require("items.widgets.wifi")
require("items.widgets.cpu")

================
File: sketchybar/config/items/widgets/volume.lua
================
local colors = require("colors")
local icons = require("icons")
local settings = require("settings")

local popup_width = 250

local volume_percent = sbar.add("item", "widgets.volume1", {
  position = "right",
  icon = { drawing = false },
  label = {
    string = "??%",
    padding_left = -1,
    font = { family = settings.font.numbers }
  },
})

local volume_icon = sbar.add("item", "widgets.volume2", {
  position = "right",
  padding_right = -1,
  icon = {
    string = icons.volume._100,
    width = 0,
    align = "left",
    color = colors.grey,
    font = {
      style = settings.font.style_map["Regular"],
      size = 14.0,
    },
  },
  label = {
    width = 25,
    align = "left",
    font = {
      style = settings.font.style_map["Regular"],
      size = 14.0,
    },
  },
})

local volume_bracket = sbar.add("bracket", "widgets.volume.bracket", {
  volume_icon.name,
  volume_percent.name
}, {
  background = { color = colors.bg1 },
  popup = { align = "center" }
})

sbar.add("item", "widgets.volume.padding", {
  position = "right",
  width = settings.group_paddings
})

local volume_slider = sbar.add("slider", popup_width, {
  position = "popup." .. volume_bracket.name,
  slider = {
    highlight_color = colors.blue,
    background = {
      height = 6,
      corner_radius = 3,
      color = colors.bg2,
    },
    knob= {
      string = "􀀁",
      drawing = true,
    },
  },
  background = { color = colors.bg1, height = 2, y_offset = -20 },
  click_script = 'osascript -e "set volume output volume $PERCENTAGE"'
})

volume_percent:subscribe("volume_change", function(env)
  local volume = tonumber(env.INFO)
  local icon = icons.volume._0
  if volume > 60 then
    icon = icons.volume._100
  elseif volume > 30 then
    icon = icons.volume._66
  elseif volume > 10 then
    icon = icons.volume._33
  elseif volume > 0 then
    icon = icons.volume._10
  end

  local lead = ""
  if volume < 10 then
    lead = "0"
  end

  volume_icon:set({ label = icon })
  volume_percent:set({ label = lead .. volume .. "%" })
  volume_slider:set({ slider = { percentage = volume } })
end)

local function volume_collapse_details()
  local drawing = volume_bracket:query().popup.drawing == "on"
  if not drawing then return end
  volume_bracket:set({ popup = { drawing = false } })
  sbar.remove('/volume.device\\.*/')
end

local current_audio_device = "None"
local function volume_toggle_details(env)
  if env.BUTTON == "right" then
    sbar.exec("open /System/Library/PreferencePanes/Sound.prefpane")
    return
  end

  local should_draw = volume_bracket:query().popup.drawing == "off"
  if should_draw then
    volume_bracket:set({ popup = { drawing = true } })
    sbar.exec("SwitchAudioSource -t output -c", function(result)
      current_audio_device = result:sub(1, -2)
      sbar.exec("SwitchAudioSource -a -t output", function(available)
        current = current_audio_device
        local color = colors.grey
        local counter = 0

        for device in string.gmatch(available, '[^\r\n]+') do
          local color = colors.grey
          if current == device then
            color = colors.white
          end
          sbar.add("item", "volume.device." .. counter, {
            position = "popup." .. volume_bracket.name,
            width = popup_width,
            align = "center",
            label = { string = device, color = color },
            click_script = 'SwitchAudioSource -s "' .. device .. '" && sketchybar --set /volume.device\\.*/ label.color=' .. colors.grey .. ' --set $NAME label.color=' .. colors.white

          })
          counter = counter + 1
        end
      end)
    end)
  else
    volume_collapse_details()
  end
end

local function volume_scroll(env)
  local delta = env.INFO.delta
  if not (env.INFO.modifier == "ctrl") then delta = delta * 10.0 end

  sbar.exec('osascript -e "set volume output volume (output volume of (get volume settings) + ' .. delta .. ')"')
end

volume_icon:subscribe("mouse.clicked", volume_toggle_details)
volume_icon:subscribe("mouse.scrolled", volume_scroll)
volume_percent:subscribe("mouse.clicked", volume_toggle_details)
volume_percent:subscribe("mouse.exited.global", volume_collapse_details)
volume_percent:subscribe("mouse.scrolled", volume_scroll)

================
File: sketchybar/config/items/widgets/wifi.lua
================
local icons = require("icons")
local colors = require("colors")
local settings = require("settings")

-- Execute the event provider binary which provides the event "network_update"
-- for the network interface "en0", which is fired every 2.0 seconds.
sbar.exec("killall network_load >/dev/null; $CONFIG_DIR/helpers/event_providers/network_load/bin/network_load en0 network_update 2.0")

local popup_width = 250

local wifi_up = sbar.add("item", "widgets.wifi1", {
  position = "right",
  padding_left = -5,
  width = 0,
  icon = {
    padding_right = 0,
    font = {
      style = settings.font.style_map["Bold"],
      size = 9.0,
    },
    string = icons.wifi.upload,
  },
  label = {
    font = {
      family = settings.font.numbers,
      style = settings.font.style_map["Bold"],
      size = 9.0,
    },
    color = colors.red,
    string = "??? Bps",
  },
  y_offset = 4,
})

local wifi_down = sbar.add("item", "widgets.wifi2", {
  position = "right",
  padding_left = -5,
  icon = {
    padding_right = 0,
    font = {
      style = settings.font.style_map["Bold"],
      size = 9.0,
    },
    string = icons.wifi.download,
  },
  label = {
    font = {
      family = settings.font.numbers,
      style = settings.font.style_map["Bold"],
      size = 9.0,
    },
    color = colors.blue,
    string = "??? Bps",
  },
  y_offset = -4,
})

local wifi = sbar.add("item", "widgets.wifi.padding", {
  position = "right",
  label = { drawing = false },
})

-- Background around the item
local wifi_bracket = sbar.add("bracket", "widgets.wifi.bracket", {
  wifi.name,
  wifi_up.name,
  wifi_down.name
}, {
  background = { color = colors.bg1 },
  popup = { align = "center", height = 30 }
})

local ssid = sbar.add("item", {
  position = "popup." .. wifi_bracket.name,
  icon = {
    font = {
      style = settings.font.style_map["Bold"]
    },
    string = icons.wifi.router,
  },
  width = popup_width,
  align = "center",
  label = {
    font = {
      size = 15,
      style = settings.font.style_map["Bold"]
    },
    max_chars = 18,
    string = "????????????",
  },
  background = {
    height = 2,
    color = colors.grey,
    y_offset = -15
  }
})

local hostname = sbar.add("item", {
  position = "popup." .. wifi_bracket.name,
  icon = {
    align = "left",
    string = "Hostname:",
    width = popup_width / 2,
  },
  label = {
    max_chars = 20,
    string = "????????????",
    width = popup_width / 2,
    align = "right",
  }
})

local ip = sbar.add("item", {
  position = "popup." .. wifi_bracket.name,
  icon = {
    align = "left",
    string = "IP:",
    width = popup_width / 2,
  },
  label = {
    string = "???.???.???.???",
    width = popup_width / 2,
    align = "right",
  }
})

local mask = sbar.add("item", {
  position = "popup." .. wifi_bracket.name,
  icon = {
    align = "left",
    string = "Subnet mask:",
    width = popup_width / 2,
  },
  label = {
    string = "???.???.???.???",
    width = popup_width / 2,
    align = "right",
  }
})

local router = sbar.add("item", {
  position = "popup." .. wifi_bracket.name,
  icon = {
    align = "left",
    string = "Router:",
    width = popup_width / 2,
  },
  label = {
    string = "???.???.???.???",
    width = popup_width / 2,
    align = "right",
  },
})

sbar.add("item", { position = "right", width = settings.group_paddings })

wifi_up:subscribe("network_update", function(env)
  local up_color = (env.upload == "000 Bps") and colors.grey or colors.red
  local down_color = (env.download == "000 Bps") and colors.grey or colors.blue
  wifi_up:set({
    icon = { color = up_color },
    label = {
      string = env.upload,
      color = up_color
    }
  })
  wifi_down:set({
    icon = { color = down_color },
    label = {
      string = env.download,
      color = down_color
    }
  })
end)

wifi:subscribe({"wifi_change", "system_woke"}, function(env)
  sbar.exec("ipconfig getifaddr en0", function(ip)
    local connected = not (ip == "")
    wifi:set({
      icon = {
        string = connected and icons.wifi.connected or icons.wifi.disconnected,
        color = connected and colors.white or colors.red,
      },
    })
  end)
end)

local function hide_details()
  wifi_bracket:set({ popup = { drawing = false } })
end

local function toggle_details()
  local should_draw = wifi_bracket:query().popup.drawing == "off"
  if should_draw then
    wifi_bracket:set({ popup = { drawing = true }})
    sbar.exec("networksetup -getcomputername", function(result)
      hostname:set({ label = result })
    end)
    sbar.exec("ipconfig getifaddr en0", function(result)
      ip:set({ label = result })
    end)
    sbar.exec("ipconfig getsummary en0 | awk -F ' SSID : '  '/ SSID : / {print $2}'", function(result)
      ssid:set({ label = result })
    end)
    sbar.exec("networksetup -getinfo Wi-Fi | awk -F 'Subnet mask: ' '/^Subnet mask: / {print $2}'", function(result)
      mask:set({ label = result })
    end)
    sbar.exec("networksetup -getinfo Wi-Fi | awk -F 'Router: ' '/^Router: / {print $2}'", function(result)
      router:set({ label = result })
    end)
  else
    hide_details()
  end
end

wifi_up:subscribe("mouse.clicked", toggle_details)
wifi_down:subscribe("mouse.clicked", toggle_details)
wifi:subscribe("mouse.clicked", toggle_details)
wifi:subscribe("mouse.exited.global", hide_details)

local function copy_label_to_clipboard(env)
  local label = sbar.query(env.NAME).label.value
  sbar.exec("echo \"" .. label .. "\" | pbcopy")
  sbar.set(env.NAME, { label = { string = icons.clipboard, align="center" } })
  sbar.delay(1, function()
    sbar.set(env.NAME, { label = { string = label, align = "right" } })
  end)
end

ssid:subscribe("mouse.clicked", copy_label_to_clipboard)
hostname:subscribe("mouse.clicked", copy_label_to_clipboard)
ip:subscribe("mouse.clicked", copy_label_to_clipboard)
mask:subscribe("mouse.clicked", copy_label_to_clipboard)
router:subscribe("mouse.clicked", copy_label_to_clipboard)

================
File: sketchybar/config/items/apple.lua
================
local colors = require("colors")
local icons = require("icons")
local settings = require("settings")

-- Padding item required because of bracket
sbar.add("item", { width = 5 })

local apple = sbar.add("item", {
  icon = {
    font = { size = 16.0 },
    string = icons.apple,
    padding_right = 8,
    padding_left = 8,
  },
  label = { drawing = false },
  background = {
    color = colors.bg2,
    border_color = colors.black,
    border_width = 1
  },
  padding_left = 1,
  padding_right = 1,
  click_script = "$CONFIG_DIR/helpers/menus/bin/menus -s 0"
})

-- Double border for apple using a single item bracket
sbar.add("bracket", { apple.name }, {
  background = {
    color = colors.transparent,
    height = 30,
    border_color = colors.grey,
  }
})

-- Padding item required because of bracket
sbar.add("item", { width = 7 })

================
File: sketchybar/config/items/calendar.lua
================
local settings = require("settings")
local colors = require("colors")

-- Padding item required because of bracket
sbar.add("item", { position = "right", width = settings.group_paddings })

local cal = sbar.add("item", {
  icon = {
    color = colors.white,
    padding_left = 8,
    font = {
      style = settings.font.style_map["Black"],
      size = 12.0,
    },
  },
  label = {
    color = colors.white,
    padding_right = 8,
    width = 49,
    align = "right",
    font = { family = settings.font.numbers },
  },
  position = "right",
  update_freq = 30,
  padding_left = 1,
  padding_right = 1,
  background = {
    color = colors.bg2,
    border_color = colors.black,
    border_width = 1
  },
  click_script = "open -a 'Calendar'"
})

-- Double border for calendar using a single item bracket
sbar.add("bracket", { cal.name }, {
  background = {
    color = colors.transparent,
    height = 30,
    border_color = colors.grey,
  }
})

-- Padding item required because of bracket
sbar.add("item", { position = "right", width = settings.group_paddings })

cal:subscribe({ "forced", "routine", "system_woke" }, function(env)
  cal:set({ icon = os.date("%a. %d %b."), label = os.date("%H:%M") })
end)

================
File: sketchybar/config/items/front_app.lua
================
local colors = require("colors")
local settings = require("settings")

local front_app = sbar.add("item", "front_app", {
  display = "active",
  icon = { drawing = false },
  label = {
    font = {
      style = settings.font.style_map["Black"],
      size = 12.0,
    },
  },
  updates = true,
})

front_app:subscribe("front_app_switched", function(env)
  front_app:set({ label = { string = env.INFO } })
end)

front_app:subscribe("mouse.clicked", function(env)
  sbar.trigger("swap_menus_and_spaces")
end)

================
File: sketchybar/config/items/init.lua
================
require("items.apple")
require("items.menus")
require("items.spaces")
require("items.front_app")
require("items.calendar")
require("items.widgets")
require("items.media")

================
File: sketchybar/config/items/media.lua
================
local icons = require("icons")
local colors = require("colors")

local whitelist = { ["Spotify"] = true,
                    ["Music"] = true    };

local media_cover = sbar.add("item", {
  position = "right",
  background = {
    image = {
      string = "media.artwork",
      scale = 0.85,
    },
    color = colors.transparent,
  },
  label = { drawing = false },
  icon = { drawing = false },
  drawing = false,
  updates = true,
  popup = {
    align = "center",
    horizontal = true,
  }
})

local media_artist = sbar.add("item", {
  position = "right",
  drawing = false,
  padding_left = 3,
  padding_right = 0,
  width = 0,
  icon = { drawing = false },
  label = {
    width = 0,
    font = { size = 9 },
    color = colors.with_alpha(colors.white, 0.6),
    max_chars = 18,
    y_offset = 6,
  },
})

local media_title = sbar.add("item", {
  position = "right",
  drawing = false,
  padding_left = 3,
  padding_right = 0,
  icon = { drawing = false },
  label = {
    font = { size = 11 },
    width = 0,
    max_chars = 16,
    y_offset = -5,
  },
})

sbar.add("item", {
  position = "popup." .. media_cover.name,
  icon = { string = icons.media.back },
  label = { drawing = false },
  click_script = "nowplaying-cli previous",
})
sbar.add("item", {
  position = "popup." .. media_cover.name,
  icon = { string = icons.media.play_pause },
  label = { drawing = false },
  click_script = "nowplaying-cli togglePlayPause",
})
sbar.add("item", {
  position = "popup." .. media_cover.name,
  icon = { string = icons.media.forward },
  label = { drawing = false },
  click_script = "nowplaying-cli next",
})

local interrupt = 0
local function animate_detail(detail)
  if (not detail) then interrupt = interrupt - 1 end
  if interrupt > 0 and (not detail) then return end

  sbar.animate("tanh", 30, function()
    media_artist:set({ label = { width = detail and "dynamic" or 0 } })
    media_title:set({ label = { width = detail and "dynamic" or 0 } })
  end)
end

media_cover:subscribe("media_change", function(env)
  if whitelist[env.INFO.app] then
    local drawing = (env.INFO.state == "playing")
    media_artist:set({ drawing = drawing, label = env.INFO.artist, })
    media_title:set({ drawing = drawing, label = env.INFO.title, })
    media_cover:set({ drawing = drawing })

    if drawing then
      animate_detail(true)
      interrupt = interrupt + 1
      sbar.delay(5, animate_detail)
    else
      media_cover:set({ popup = { drawing = false } })
    end
  end
end)

media_cover:subscribe("mouse.entered", function(env)
  interrupt = interrupt + 1
  animate_detail(true)
end)

media_cover:subscribe("mouse.exited", function(env)
  animate_detail(false)
end)

media_cover:subscribe("mouse.clicked", function(env)
  media_cover:set({ popup = { drawing = "toggle" }})
end)

media_title:subscribe("mouse.exited.global", function(env)
  media_cover:set({ popup = { drawing = false }})
end)

================
File: sketchybar/config/items/menus.lua
================
local colors = require("colors")
local icons = require("icons")
local settings = require("settings")

local menu_watcher = sbar.add("item", {
  drawing = false,
  updates = false,
})
local space_menu_swap = sbar.add("item", {
  drawing = false,
  updates = true,
})
sbar.add("event", "swap_menus_and_spaces")

local max_items = 15
local menu_items = {}
for i = 1, max_items, 1 do
  local menu = sbar.add("item", "menu." .. i, {
    padding_left = settings.paddings,
    padding_right = settings.paddings,
    drawing = false,
    icon = { drawing = false },
    label = {
      font = {
        style = settings.font.style_map[i == 1 and "Heavy" or "Semibold"]
      },
      padding_left = 6,
      padding_right = 6,
    },
    click_script = "$CONFIG_DIR/helpers/menus/bin/menus -s " .. i,
  })

  menu_items[i] = menu
end

sbar.add("bracket", { '/menu\\..*/' }, {
  background = { color = colors.bg1 }
})

local menu_padding = sbar.add("item", "menu.padding", {
  drawing = false,
  width = 5
})

local function update_menus(env)
  sbar.exec("$CONFIG_DIR/helpers/menus/bin/menus -l", function(menus)
    sbar.set('/menu\\..*/', { drawing = false })
    menu_padding:set({ drawing = true })
    id = 1
    for menu in string.gmatch(menus, '[^\r\n]+') do
      if id < max_items then
        menu_items[id]:set( { label = menu, drawing = true } )
      else break end
      id = id + 1
    end
  end)
end

menu_watcher:subscribe("front_app_switched", update_menus)

space_menu_swap:subscribe("swap_menus_and_spaces", function(env)
  local drawing = menu_items[1]:query().geometry.drawing == "on"
  if drawing then
    menu_watcher:set( { updates = false })
    sbar.set("/menu\\..*/", { drawing = false })
    sbar.set("/space\\..*/", { drawing = true })
    sbar.set("front_app", { drawing = true })
  else
    menu_watcher:set( { updates = true })
    sbar.set("/space\\..*/", { drawing = false })
    sbar.set("front_app", { drawing = false })
    update_menus()
  end
end)

return menu_watcher

================
File: sketchybar/config/items/spaces.lua
================
local colors = require("colors")
local icons = require("icons")
local settings = require("settings")
local app_icons = require("helpers.app_icons")

local spaces = {}

for i = 1, 10, 1 do
  local space = sbar.add("space", "space." .. i, {
    space = i,
    icon = {
      font = { family = settings.font.numbers },
      string = i,
      padding_left = 15,
      padding_right = 8,
      color = colors.white,
      highlight_color = colors.red,
    },
    label = {
      padding_right = 20,
      color = colors.grey,
      highlight_color = colors.white,
      font = "sketchybar-app-font:Regular:16.0",
      y_offset = -1,
    },
    padding_right = 1,
    padding_left = 1,
    background = {
      color = colors.bg1,
      border_width = 1,
      height = 26,
      border_color = colors.black,
    },
    popup = { background = { border_width = 5, border_color = colors.black } }
  })

  spaces[i] = space

  -- Single item bracket for space items to achieve double border on highlight
  local space_bracket = sbar.add("bracket", { space.name }, {
    background = {
      color = colors.transparent,
      border_color = colors.bg2,
      height = 28,
      border_width = 2
    }
  })

  -- Padding space
  sbar.add("space", "space.padding." .. i, {
    space = i,
    script = "",
    width = settings.group_paddings,
  })

  local space_popup = sbar.add("item", {
    position = "popup." .. space.name,
    padding_left= 5,
    padding_right= 0,
    background = {
      drawing = true,
      image = {
        corner_radius = 9,
        scale = 0.2
      }
    }
  })

  space:subscribe("space_change", function(env)
    local selected = env.SELECTED == "true"
    local color = selected and colors.grey or colors.bg2
    space:set({
      icon = { highlight = selected, },
      label = { highlight = selected },
      background = { border_color = selected and colors.black or colors.bg2 }
    })
    space_bracket:set({
      background = { border_color = selected and colors.grey or colors.bg2 }
    })
  end)

  space:subscribe("mouse.clicked", function(env)
    if env.BUTTON == "other" then
      space_popup:set({ background = { image = "space." .. env.SID } })
      space:set({ popup = { drawing = "toggle" } })
    else
      local op = (env.BUTTON == "right") and "--destroy" or "--focus"
      sbar.exec("yabai -m space " .. op .. " " .. env.SID)
    end
  end)

  space:subscribe("mouse.exited", function(_)
    space:set({ popup = { drawing = false } })
  end)
end

local space_window_observer = sbar.add("item", {
  drawing = false,
  updates = true,
})

local spaces_indicator = sbar.add("item", {
  padding_left = -3,
  padding_right = 0,
  icon = {
    padding_left = 8,
    padding_right = 9,
    color = colors.grey,
    string = icons.switch.on,
  },
  label = {
    width = 0,
    padding_left = 0,
    padding_right = 8,
    string = "Spaces",
    color = colors.bg1,
  },
  background = {
    color = colors.with_alpha(colors.grey, 0.0),
    border_color = colors.with_alpha(colors.bg1, 0.0),
  }
})

space_window_observer:subscribe("space_windows_change", function(env)
  local icon_line = ""
  local no_app = true
  for app, count in pairs(env.INFO.apps) do
    no_app = false
    local lookup = app_icons[app]
    local icon = ((lookup == nil) and app_icons["Default"] or lookup)
    icon_line = icon_line .. icon
  end

  if (no_app) then
    icon_line = " —"
  end
  sbar.animate("tanh", 10, function()
    spaces[env.INFO.space]:set({ label = icon_line })
  end)
end)

spaces_indicator:subscribe("swap_menus_and_spaces", function(env)
  local currently_on = spaces_indicator:query().icon.value == icons.switch.on
  spaces_indicator:set({
    icon = currently_on and icons.switch.off or icons.switch.on
  })
end)

spaces_indicator:subscribe("mouse.entered", function(env)
  sbar.animate("tanh", 30, function()
    spaces_indicator:set({
      background = {
        color = { alpha = 1.0 },
        border_color = { alpha = 1.0 },
      },
      icon = { color = colors.bg1 },
      label = { width = "dynamic" }
    })
  end)
end)

spaces_indicator:subscribe("mouse.exited", function(env)
  sbar.animate("tanh", 30, function()
    spaces_indicator:set({
      background = {
        color = { alpha = 0.0 },
        border_color = { alpha = 0.0 },
      },
      icon = { color = colors.grey },
      label = { width = 0, }
    })
  end)
end)

spaces_indicator:subscribe("mouse.clicked", function(env)
  sbar.trigger("swap_menus_and_spaces")
end)

================
File: sketchybar/config/bar.lua
================
local colors = require("colors")

-- Equivalent to the --bar domain
sbar.bar({
  height = 40,
  color = colors.bar.bg,
  padding_right = 2,
  padding_left = 2,
})

================
File: sketchybar/config/colors.lua
================
return {
  black = 0xff181819,
  white = 0xffe2e2e3,
  red = 0xfffc5d7c,
  green = 0xff9ed072,
  blue = 0xff76cce0,
  yellow = 0xffe7c664,
  orange = 0xfff39660,
  magenta = 0xffb39df3,
  grey = 0xff7f8490,
  transparent = 0x00000000,

  bar = {
    bg = 0xf02c2e34,
    border = 0xff2c2e34,
  },
  popup = {
    bg = 0xc02c2e34,
    border = 0xff7f8490
  },
  bg1 = 0xff363944,
  bg2 = 0xff414550,

  with_alpha = function(color, alpha)
    if alpha > 1.0 or alpha < 0.0 then return color end
    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)
  end,
}

================
File: sketchybar/config/default.lua
================
local settings = require("settings")
local colors = require("colors")

-- Equivalent to the --default domain
sbar.default({
  updates = "when_shown",
  icon = {
    font = {
      family = settings.font.text,
      style = settings.font.style_map["Bold"],
      size = 14.0
    },
    color = colors.white,
    padding_left = settings.paddings,
    padding_right = settings.paddings,
    background = { image = { corner_radius = 9 } },
  },
  label = {
    font = {
      family = settings.font.text,
      style = settings.font.style_map["Semibold"],
      size = 13.0
    },
    color = colors.white,
    padding_left = settings.paddings,
    padding_right = settings.paddings,
  },
  background = {
    height = 28,
    corner_radius = 9,
    border_width = 2,
    border_color = colors.bg2,
    image = {
      corner_radius = 9,
      border_color = colors.grey,
      border_width = 1
    }
  },
  popup = {
    background = {
      border_width = 2,
      corner_radius = 9,
      border_color = colors.popup.border,
      color = colors.popup.bg,
      shadow = { drawing = true },
    },
    blur_radius = 50,
  },
  padding_left = 5,
  padding_right = 5,
  scroll_texts = true,
})

================
File: sketchybar/config/icons.lua
================
local settings = require("settings")

local icons = {
  sf_symbols = {
    plus = "􀅼",
    loading = "􀖇",
    apple = "􀣺",
    gear = "􀍟",
    cpu = "􀫥",
    clipboard = "􀉄",

    switch = {
      on = "􁏮",
      off = "􁏯",
    },
    volume = {
      _100="􀊩",
      _66="􀊧",
      _33="􀊥",
      _10="􀊡",
      _0="􀊣",
    },
    battery = {
      _100 = "􀛨",
      _75 = "􀺸",
      _50 = "􀺶",
      _25 = "􀛩",
      _0 = "􀛪",
      charging = "􀢋"
    },
    wifi = {
      upload = "􀄨",
      download = "􀄩",
      connected = "􀙇",
      disconnected = "􀙈",
      router = "􁓤",
    },
    media = {
      back = "􀊊",
      forward = "􀊌",
      play_pause = "􀊈",
    },
  },

  -- Alternative NerdFont icons
  nerdfont = {
    plus = "",
    loading = "",
    apple = "",
    gear = "",
    cpu = "",
    clipboard = "Missing Icon",

    switch = {
      on = "󱨥",
      off = "󱨦",
    },
    volume = {
      _100="",
      _66="",
      _33="",
      _10="",
      _0="",
    },
    battery = {
      _100 = "",
      _75 = "",
      _50 = "",
      _25 = "",
      _0 = "",
      charging = ""
    },
    wifi = {
      upload = "",
      download = "",
      connected = "󰖩",
      disconnected = "󰖪",
      router = "Missing Icon"
    },
    media = {
      back = "",
      forward = "",
      play_pause = "",
    },
  },
}

if not (settings.icons == "NerdFont") then
  return icons.sf_symbols
else
  return icons.nerdfont
end

================
File: sketchybar/config/init.lua
================
-- Require the sketchybar module
sbar = require("sketchybar")

-- Set the bar name, if you are using another bar instance than sketchybar
-- sbar.set_bar_name("bottom_bar")

-- Bundle the entire initial configuration into a single message to sketchybar
sbar.begin_config()
require("bar")
require("default")
require("items")
sbar.end_config()

-- Run the event loop of the sketchybar module (without this there will be no
-- callback functions executed in the lua module)
sbar.event_loop()

================
File: sketchybar/config/settings.lua
================
return {
  paddings = 3,
  group_paddings = 5,

  icons = "sf-symbols", -- alternatively available: NerdFont

  -- This is a font configuration for SF Pro and SF Mono (installed manually)
  font = require("helpers.default_font"),

  -- Alternatively, this is a font config for JetBrainsMono Nerd Font
  -- font = {
  --   text = "JetBrainsMono Nerd Font", -- Used for text
  --   numbers = "JetBrainsMono Nerd Font", -- Used for numbers
  --   style_map = {
  --     ["Regular"] = "Regular",
  --     ["Semibold"] = "Medium",
  --     ["Bold"] = "SemiBold",
  --     ["Heavy"] = "Bold",
  --     ["Black"] = "ExtraBold",
  --   },
  -- },
}

================
File: sketchybar/config/sketchybarrc
================
#!/usr/bin/env lua

-- Load the sketchybar-package and prepare the helper binaries
require("helpers")
require("init")

================
File: sketchybar/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/sketchybar".source = homeManagerConfig.linkHostApp config "sketchybar";
}

================
File: skhd/config/skhdrc
================
## Navigation (lalt - ...)
# Space Navigation (four spaces per display): lalt - {1, 2, 3, 4}
lalt - 1 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[1] ]] && yabai -m space --focus $SPACES[1]
lalt - 2 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[2] ]] && yabai -m space --focus $SPACES[2]
lalt - 3 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[3] ]] && yabai -m space --focus $SPACES[3]
lalt - 4 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[4] ]] && yabai -m space --focus $SPACES[4]

# Window Navigation (through display borders): lalt - {j, k, l, ö}
lalt - j    : yabai -m window --focus west  || yabai -m display --focus west
lalt - k    : yabai -m window --focus south || yabai -m display --focus south
lalt - l    : yabai -m window --focus north || yabai -m display --focus north
lalt - 0x29 : yabai -m window --focus east  || yabai -m display --focus east

# Extended Window Navigation: lalt - {h, ä}
lalt -    h : yabai -m window --focus first
lalt - 0x27 : yabai -m window --focus  last

# Float / Unfloat window: lalt - space
lalt - space : yabai -m window --toggle float

# Make window zoom to fullscreen: shift + lalt - f
shift + lalt - f : yabai -m window --toggle zoom-fullscreen

# Make window zoom to parent node: lalt - f 
lalt - f : yabai -m window --toggle zoom-parent

## Window Movement (shift + lalt - ...)
# Moving windows in spaces: shift + lalt - {j, k, l, ö}
shift + lalt - j : yabai -m window --warp west || $(yabai -m window --display west && yabai -m display --focus west && yabai -m window --warp last) || yabai -m window --move rel:-10:0
shift + lalt - k : yabai -m window --warp south || $(yabai -m window --display south && yabai -m display --focus south) || yabai -m window --move rel:0:10
shift + lalt - l : yabai -m window --warp north || $(yabai -m window --display north && yabai -m display --focus north) || yabai -m window --move rel:0:-10
shift + lalt - 0x29 : yabai -m window --warp east || $(yabai -m window --display east && yabai -m display --focus east && yabai -m window --warp first) || yabai -m window --move rel:10:0

# Toggle split orientation of the selected windows node: shift + lalt - s
shift + lalt - s : yabai -m window --toggle split

# Moving windows between spaces: shift + lalt - {1, 2, 3, 4, p, n } (Assumes 4 Spaces Max per Display)
shift + lalt - 1 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[1] ]] \
                  && yabai -m window --space $SPACES[1]

shift + lalt - 2 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[2] ]] \
                  && yabai -m window --space $SPACES[2]

shift + lalt - 3 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[3] ]] \
                  && yabai -m window --space $SPACES[3]

shift + lalt - 4 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[4] ]] \
                  && yabai -m window --space $SPACES[4]

shift + lalt - p : yabai -m window --space prev && yabai -m space --focus prev
shift + lalt - n : yabai -m window --space next && yabai -m space --focus next

# Mirror Space on X and Y Axis: shift + lalt - {x, y}
shift + lalt - x : yabai -m space --mirror x-axis
shift + lalt - y : yabai -m space --mirror y-axis

## Stacks (shift + ctrl - ...)
# Add the active window to the window or stack to the {direction}: shift + ctrl - {j, k, l, ö}
shift + ctrl - j    : yabai -m window  west --stack $(yabai -m query --windows --window | jq -r '.id')
shift + ctrl - k    : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id')
shift + ctrl - l    : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id')
shift + ctrl - 0x29 : yabai -m window  east --stack $(yabai -m query --windows --window | jq -r '.id')

# Stack Navigation: shift + ctrl - {n, p}
shift + ctrl - n : yabai -m window --focus stack.next
shift + ctrl - p : yabai -m window --focus stack.prev

## Resize (ctrl + lalt - ...)
# Resize windows: ctrl + lalt - {j, k, l, ö}
ctrl + lalt - j    : yabai -m window --resize right:-100:0 || yabai -m window --resize left:-100:0
ctrl + lalt - k    : yabai -m window --resize bottom:0:100 || yabai -m window --resize top:0:100
ctrl + lalt - l    : yabai -m window --resize bottom:0:-100 || yabai -m window --resize top:0:-100
ctrl + lalt - 0x29 : yabai -m window --resize right:100:0 || yabai -m window --resize left:100:0

# Equalize size of windows: ctrl + lalt - e
ctrl + lalt - e : yabai -m space --balance

# Enable / Disable gaps in current workspace: ctrl + lalt - g
ctrl + lalt - g : yabai -m space --toggle padding; yabai -m space --toggle gap

## Insertion (shift + ctrl + lalt - ...)
# Set insertion point for focused container: shift + ctrl + lalt - {j, k, l, ö, s}
shift + ctrl + lalt - j : yabai -m window --insert west
shift + ctrl + lalt - k : yabai -m window --insert south
shift + ctrl + lalt - l : yabai -m window --insert north
shift + ctrl + lalt - 0x29 : yabai -m window --insert east
shift + ctrl + lalt - s : yabai -m window --insert stack

# New window in hor./ vert. splits for all applications with yabai
lalt - s : yabai -m window --insert east;  skhd -k "cmd - n"
lalt - v : yabai -m window --insert south; skhd -k "cmd - n"

# Toggle sketchybar
shift + lalt - space : sketchybar --bar hidden=toggle

================
File: skhd/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/skhd".source = homeManagerConfig.linkHostApp config "skhd";
}

================
File: starship/config/starship.toml
================
add_newline = false

[character]
success_symbol = '[ #](bold green)'
error_symbol = "[ x](bold red)"
vicmd_symbol = "[ V](bold green)"

[git_status]
disabled = false

[git_commit]
commit_hash_length = 7
tag_disabled = false
only_detached = false

[battery]
disabled = true

[python]
disabled = true

[cmake]
disabled = true

[directory]
read_only = "(read only)"

[git_metrics]
disabled = false
format = '([+$added]($added_style)) ([-$deleted]($deleted_style)) '

================
File: svim/config/blacklist
================
kitty
Alacritty
iTerm2
WezTerm
MacVim
Neovide
JupyterApp

================
File: svim/config/svim.sh
================
#!/bin/bash

# This script is executed when either the mode changes,
# or the commandline changes

# Here I am simply passing the event to sketchybar, where an item could handle it.

sketchybar --trigger svim_update MODE="$MODE" CMDLINE="$CMDLINE"

================
File: svim/config/svimrc
================
noremap j h
noremap k j
noremap l k
noremap ö l
noremap ß $

================
File: tmux/config/themes/tokyonight.tmux
================
#!/usr/bin/env bash

# TokyoNight colors for Tmux

set -g mode-style "fg=#7aa2f7,bg=#3b4261"

set -g message-style "fg=#7aa2f7,bg=#3b4261"
set -g message-command-style "fg=#7aa2f7,bg=#3b4261"

set -g pane-border-style "fg=#3b4261"
set -g pane-active-border-style "fg=#7aa2f7"

set -g status "on"
set -g status-justify "left"

set -g status-style "fg=#7aa2f7,bg=#16161e"

set -g status-left-length "100"
set -g status-right-length "100"

set -g status-left-style NONE
set -g status-right-style NONE

set -g status-left "#[fg=#15161e,bg=#7aa2f7,bold] #S #[fg=#7aa2f7,bg=#16161e,nobold,nounderscore,noitalics] "
set -g status-right "#[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics] #[fg=#7aa2f7,bg=#16161e] #{prefix_highlight} #[fg=#3b4261,bg=#16161e,nobold,nounderscore,noitalics] #[fg=#7aa2f7,bg=#3b4261] %Y-%m-%d | %I:%M %p #[fg=#7aa2f7,bg=#3b4261,nobold,nounderscore,noitalics] #[fg=#15161e,bg=#7aa2f7,bold] #h "
if-shell '[ "$(tmux show-option -gqv "clock-mode-style")" == "24" ]' {
  set -g status-right "#[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics] #[fg=#7aa2f7,bg=#16161e] #{prefix_highlight} #[fg=#3b4261,bg=#16161e,nobold,nounderscore,noitalics] #[fg=#7aa2f7,bg=#3b4261] %Y-%m-%d | %H:%M #[fg=#7aa2f7,bg=#3b4261,nobold,nounderscore,noitalics] #[fg=#15161e,bg=#7aa2f7,bold] #h "
}

setw -g window-status-activity-style "underscore,fg=#a9b1d6,bg=#16161e"
setw -g window-status-separator ""
setw -g window-status-style "NONE,fg=#a9b1d6,bg=#16161e"
setw -g window-status-format "#[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics] #[default]#I :: #W #F #[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics] "
setw -g window-status-current-format "#[fg=#16161e,bg=#3b4261,nobold,nounderscore,noitalics] #[fg=#7aa2f7,bg=#3b4261,bold]#I :: #W #F #[fg=#3b4261,bg=#16161e,nobold,nounderscore,noitalics] "

# tmux-plugins/tmux-prefix-highlight support
set -g @prefix_highlight_output_prefix "#[fg=#16161e]#[bg=#e0af68] "
set -g @prefix_highlight_output_suffix " "

================
File: tmux/config/.gitignore
================
plugins

================
File: tmux/config/tmux.conf
================
set -g mouse on

unbind C-b
set -g prefix C-j
bind C-j send-prefix

# Vim style pane selection
bind h select-pane -L
bind j select-pane -D 
bind k select-pane -U
bind l select-pane -R

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on
set-option -g status-position top

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'christoomey/vim-tmux-navigator'

source-file "~/.config/tmux/themes/tokyonight.tmux"

# set vi-mode
set-window-option -g mode-keys vi

# keybindings
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

bind '"' split-window -v -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

bind R source-file "~/.config/tmux/tmux.conf"

run '~/.config/tmux/plugins/tpm/tpm'

================
File: tmux/default.nix
================
{ homeManagerConfig, config, ... }:

{
  programs.tmux.enable = true;

  home.file.".config/tmux".source = homeManagerConfig.linkHostApp config "tmux";
}

================
File: yabai/config/yabairc
================
#!/usr/bin/env sh

sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"

yabai -m config external_bar               all:40:0       \
                mouse_follows_focus        off            \
                focus_follows_mouse        off            \
                window_zoom_persist        off            \
                window_placement           second_child   \
                window_shadow              float          \
                window_opacity             on             \
                window_opacity_duration    0.2            \
                active_window_opacity      1.0            \
                normal_window_opacity      0.8            \
                window_animation_duration  0.5            \
                window_animation_easing    ease_out_quint \
                insert_feedback_color      0xff9dd274     \
                split_ratio                0.50           \
                auto_balance               off            \
                mouse_modifier             fn             \
                mouse_action1              move           \
                mouse_action2              resize         \
                mouse_drop_action          swap           \
                                                          \
                top_padding                8              \
                bottom_padding             8              \
                left_padding               8              \
                right_padding              8              \
                window_gap                 10

# Exclude problematic apps from being managed:
yabai -m rule --add app="^(LuLu|Calculator|Software Update|Dictionary|VLC|System Preferences|System Settings|zoom.us|Photo Booth|Archive Utility|Python|LibreOffice|App Store|Steam|Alfred|Activity Monitor)$" manage=off
yabai -m rule --add label="Finder" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
yabai -m rule --add label="Safari" app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add label="Select file to save to" app="^Inkscape$" title="Select file to save to" manage=off

yabai -m config layout bsp

echo "yabai configuration loaded.."

================
File: default.nix
================
{ ... }:

{
  imports = [
    ./tmux
    ./aerospace
    ./sketchybar
    ./helix
    ./kanata
    ./ghostty
  ];
}



================================================================
End of Codebase
================================================================
