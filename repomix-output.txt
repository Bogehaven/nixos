This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
hosts/
  malenia/
    containers/
      arr/
        default.nix
      audiobookshelf/
        default.nix
      authentik/
        default.nix
      baikal/
        default.nix
      dozzle/
        default.nix
      freshrss/
        default.nix
      homepage/
        config/
          custom.css
          docker.nix
          services.nix
          settings.nix
          widgets.nix
        default.nix
      immich/
        default.nix
      ntfy/
        config/
          server.nix
        default.nix
      ollama-webui/
        default.nix
      overseerr/
        default.nix
      paperless/
        default.nix
      qbittorrent/
        default.nix
      speedtest/
        default.nix
      tautulli/
        default.nix
      traefik/
        config/
          config.nix
          dynamic.nix
        default.nix
      vaultwarden/
        default.nix
      whisper/
        default.nix
      default.nix
    services/
      grafana/
        default.nix
      jellyfin/
        default.nix
      ollama/
        default.nix
      plex/
        default.nix
      restic/
        default.nix
      default.nix
    default.nix
    filesystems.nix
    hardware-configuration.nix
    pkgs.nix
    users.nix
    vars.nix
  miquella/
    containers/
      nginx/
        default.nix
      traefik/
        config/
          config.nix
          dynamic.nix
        default.nix
      default.nix
    default.nix
    filesystems.nix
    hardware-configuration.nix
    vars.nix
  solaire/
    services/
      kanata/
        default.nix
      default.nix
    default.nix
modules/
  darwin/
    brew.nix
    default.nix
    macos.nix
    pkgs.nix
    system.nix
  home-manager/
    hosts/
      malenia/
        default.nix
      miquella/
        default.nix
      solaire/
        aerospace/
          config/
            aerospace.toml
          default.nix
        borders/
          config/
            bordersrc
        ghostty/
          config/
            config
            keybindings
          default.nix
        goku/
          config/
            karabiner.edn
          default.nix
        helix/
          config/
            config.toml
            external-snippets.toml
            languages.toml
          default.nix
        kanata/
          config/
            personal.kbd
          default.nix
        kitty/
          config/
            current-theme.conf
            kitty.conf
            startup-session.conf
          default.nix
        sketchybar/
          config/
            helpers/
              event_providers/
                cpu_load/
                  cpu_load.c
                  cpu.h
                  makefile
                network_load/
                  makefile
                  network_load.c
                  network.h
                makefile
                sketchybar.h
              menus/
                makefile
                menus.c
              .gitignore
              app_icons.lua
              default_font.lua
              init.lua
              makefile
            items/
              widgets/
                battery.lua
                cpu.lua
                init.lua
                volume.lua
                wifi.lua
              apple.lua
              calendar.lua
              front_app.lua
              init.lua
              media.lua
              menus.lua
              spaces.lua
            bar.lua
            colors.lua
            default.lua
            icons.lua
            init.lua
            settings.lua
            sketchybarrc
          default.nix
        skhd/
          config/
            skhdrc
          default.nix
        starship/
          config/
            starship.toml
        svim/
          config/
            blacklist
            svim.sh
            svimrc
        tmux/
          config/
            themes/
              tokyonight.tmux
            .gitignore
            tmux.conf
          default.nix
        yabai/
          config/
            yabairc
        default.nix
    shared/
      bat/
        config/
          themes/
            tokyonight_night.tmTheme
        default.nix
      lazygit/
        config/
          config.yml
        default.nix
      neovim/
        config/
          lua/
            configs/
              lazy.lua
              mappings.lua
              options.lua
            plugins/
              bfpimentel/
                completions.lua
                lsp.lua
                markdown.lua
                mini.lua
                misc.lua
                neotree.lua
                statusline.lua
                telescope.lua
                terminal.lua
                theme.lua
                treesitter.lua
              nvchad/
                conform.lua
                git.lua
                lsp.lua
                markdown.lua
                mini.lua
                tree.lua
                treesitter.lua
            chadrc.lua
          .gitignore
          .stylua.toml
          init.lua
        default.nix
      nh/
        default.nix
      ssh/
        default.nix
      zsh/
        config/
          plugins/
            antigen.zsh
          themes/
            tokyonight.omp.toml
          .gitignore
          .zshrc
        default.nix
      default.nix
    users/
      hjalte.nix
    default.nix
  nixos/
    services/
      glances/
        default.nix
      prometheus/
        default.nix
      ssh/
        default.nix
      tailscale/
        default.nix
      default.nix
    age.nix
    default.nix
    locale.nix
    networking.nix
    pkgs.nix
    system.nix
    users.nix
overlays/
  patches/
    slirp4netns.patch
  default.nix
pkgs/
  default.nix
flake.lock
flake.nix
README.md

================================================================
Files
================================================================

================
File: hosts/malenia/containers/arr/default.nix
================
{ vars, username, ... }:

let
  arrPaths = {
    volumes = {
      sonarr = "${vars.containersConfigRoot}/sonarr";
      radarr = "${vars.containersConfigRoot}/radarr";
      readarr = "${vars.containersConfigRoot}/readarr";
      prowlarr = "${vars.containersConfigRoot}/prowlarr";
      bazarr = "${vars.containersConfigRoot}/bazarr";
    };
    mounts = {
      downloads = "${vars.mediaMountLocation}/downloads";
      movies = "${vars.mediaMountLocation}/movies";
      anime = "${vars.mediaMountLocation}/anime";
      shows = "${vars.mediaMountLocation}/shows";
      audiobooks = "${vars.mediaMountLocation}/audiobooks";
      ebooks = "${vars.mediaMountLocation}/ebooks";
      podcasts = "${vars.mediaMountLocation}/podcasts";
    };
  };

  puid = toString vars.defaultUserUID;
  pgid = toString vars.defaultUserGID;
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues arrPaths.volumes
  );

  virtualisation.oci-containers.containers = with arrPaths; {
    sonarr = {
      image = "lscr.io/linuxserver/sonarr:develop";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [
        "${volumes.sonarr}:/config"
        "${mounts.downloads}:/downloads"
        "${mounts.anime}:/anime"
        "${mounts.shows}:/shows"
      ];
      environment = {
        TZ = vars.timeZone;
        PUID = puid;
        PGID = pgid;
        UMASK = "002";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.sonarr.rule" = "Host(`sonarr.${vars.domain}`)";
        "traefik.http.routers.sonarr.middlewares" = "auth@file";
        "traefik.http.services.sonarr.loadbalancer.server.port" = "8989";
        # Homepage
        "homepage.group" = "Media Managers";
        "homepage.name" = "Sonarr";
        "homepage.icon" = "sonarr.svg";
        "homepage.href" = "https://sonarr.${vars.domain}";
        "homepage.weight" = "10";
        "homepage.widget.type" = "sonarr";
        "homepage.widget.key" = "{{HOMEPAGE_VAR_SONARR_KEY}}";
        "homepage.widget.url" = "http://sonarr:8989";
      };
    };
    radarr = {
      image = "lscr.io/linuxserver/radarr:develop";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [
        "${volumes.radarr}:/config"
        "${mounts.downloads}:/downloads"
        "${mounts.movies}:/movies"
      ];
      environment = {
        TZ = vars.timeZone;
        PUID = puid;
        PGID = pgid;
        UMASK = "002";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.radarr.rule" = "Host(`radarr.${vars.domain}`)";
        "traefik.http.routers.radarr.middlewares" = "auth@file";
        "traefik.http.services.radarr.loadbalancer.server.port" = "7878";
        # Homepage
        "homepage.group" = "Media Managers";
        "homepage.name" = "Radarr";
        "homepage.icon" = "radarr.svg";
        "homepage.href" = "https://radarr.${vars.domain}";
        "homepage.weight" = "20";
        "homepage.widget.type" = "radarr";
        "homepage.widget.key" = "{{HOMEPAGE_VAR_RADARR_KEY}}";
        "homepage.widget.url" = "http://radarr:7878";
      };
    };
    bazarr = {
      image = "lscr.io/linuxserver/bazarr:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [
        "${volumes.bazarr}:/config"
        "${mounts.movies}:/movies"
        "${mounts.anime}:/anime"
        "${mounts.shows}:/shows"
      ];
      environment = {
        TZ = vars.timeZone;
        PUID = puid;
        PGID = pgid;
        UMASK = "002";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.bazarr.rule" = "Host(`bazarr.${vars.domain}`)";
        "traefik.http.routers.bazarr.middlewares" = "auth@file";
        "traefik.http.services.bazarr.loadbalancer.server.port" = "6767";
        # Homepage
        "homepage.group" = "Media Managers";
        "homepage.name" = "Bazarr";
        "homepage.icon" = "bazarr.svg";
        "homepage.href" = "https://bazarr.${vars.domain}";
        "homepage.weight" = "30";
        "homepage.widget.type" = "bazarr";
        "homepage.widget.key" = "{{HOMEPAGE_VAR_BAZARR_KEY}}";
        "homepage.widget.url" = "http://bazarr:6767";
      };
    };
    prowlarr = {
      image = "lscr.io/linuxserver/prowlarr:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [ "${volumes.prowlarr}:/config" ];
      environment = {
        TZ = vars.timeZone;
        PUID = puid;
        PGID = pgid;
        UMASK = "002";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.prowlarr.rule" = "Host(`prowlarr.${vars.domain}`)";
        "traefik.http.routers.prowlarr.middlewares" = "auth@file";
        "traefik.http.services.prowlarr.loadbalancer.server.port" = "9696";
        # Homepage
        "homepage.group" = "Media Managers";
        "homepage.name" = "Prowlarr";
        "homepage.icon" = "prowlarr.svg";
        "homepage.href" = "https://prowlarr.${vars.domain}";
        "homepage.weight" = "40";
        "homepage.widget.type" = "prowlarr";
        "homepage.widget.key" = "{{HOMEPAGE_VAR_PROWLARR_KEY}}";
        "homepage.widget.url" = "http://prowlarr:9696";
      };
    };
    flaresolverr = {
      image = "ghcr.io/flaresolverr/flaresolverr:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      environment = {
        TZ = vars.timeZone;
        LOG_LEVEL = "info";
        LOG_HTML = "false";
      };
    };
  };
}

================
File: hosts/malenia/containers/audiobookshelf/default.nix
================
{ username, vars, ... }:

let
  audioBookshelfPaths =
    let
      root = "${vars.containersConfigRoot}/audiobookshelf";
    in
    {
      volumes = {
        inherit root;
        config = "${root}/config";
        metadata = "${root}/metadata";
      };
      mounts = {
        audiobooks = "${vars.mediaMountLocation}/audiobooks";
        podcasts = "${vars.mediaMountLocation}/podcasts";
      };
    };
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues audioBookshelfPaths.volumes
  );

  virtualisation.oci-containers.containers = with audioBookshelfPaths; {
    audiobookshelf = {
      image = "ghcr.io/advplyr/audiobookshelf:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [
        "${volumes.config}:/config"
        "${volumes.metadata}:/metadata"
        "${mounts.audiobooks}:/audiobooks"
        "${mounts.podcasts}:/podcasts"
      ];
      environment = {
        TZ = vars.timeZone;
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.audiobookshelf.rule" = "Host(`audiobooks.${vars.domain}`)";
        "traefik.http.routers.audiobookshelf.entryPoints" = "https";
        "traefik.http.services.audiobookshelf.loadbalancer.server.port" = "80";
        # Homepage
        "homepage.group" = "Media";
        "homepage.name" = "Audio Bookshelf";
        "homepage.icon" = "audiobookshelf.png";
        "homepage.href" = "https://audiobooks.${vars.domain}";
        "homepage.weight" = "7";
        "homepage.widget.type" = "audiobookshelf";
        "homepage.widget.key" = "{{HOMEPAGE_VAR_AUDIOBOOKSHELF_KEY}}";
        "homepage.widget.url" = "http://audiobookshelf:80";
      };
    };
  };
}

================
File: hosts/malenia/containers/authentik/default.nix
================
{
  username,
  vars,
  config,
  ...
}:

let
  authentikPaths =
    let
      root = "${vars.containersConfigRoot}/authentik";
    in
    {
      volumes = {
        inherit root;
        media = "${root}/media";
        templates = "${root}/templates";
        certs = "${root}/certs";
      };
      postgres = "${root}/db";
    };
in
{
  systemd.tmpfiles.rules =
    map (x: "d ${x} 0775 ${username} ${username} - -") (builtins.attrValues authentikPaths.volumes)
    ++ map (x: "d ${x} 0775 postgres ${username} - -") [ authentikPaths.postgres ];

  virtualisation.oci-containers.containers = {
    authentik-server = {
      image = "ghcr.io/goauthentik/server:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      cmd = [ "server" ];
      dependsOn = [
        "authentik-db"
        "authentik-redis"
      ];
      ports = [ "9000:9000" ];
      volumes = [
        "${authentikPaths.volumes.media}:/media"
        "${authentikPaths.volumes.templates}:/templates"
      ];
      environmentFiles = [ config.age.secrets.authentik.path ];
      environment = {
        AUTHENTIK_REDIS__HOST = "authentik-redis";
        AUTHENTIK_POSTGRESQL__HOST = "authentik-db";
        AUTHENTIK_POSTGRESQL__USER = "authentik";
        AUTHENTIK_POSTGRESQL__NAME = "authentik";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.authentik.entrypoints" = "https";
        "traefik.http.routers.authentik.rule" = "Host(`auth.${vars.domain}`)";
        "traefik.http.services.authentik.loadbalancer.server.port" = "9000";
        # Homepage
        "homepage.group" = "Auth";
        "homepage.name" = "Authentik";
        "homepage.icon" = "authentik.png";
        "homepage.href" = "https://auth.${vars.externalDomain}";
      };
    };
    authentik-worker = {
      image = "ghcr.io/goauthentik/server:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      cmd = [ "worker" ];
      dependsOn = [
        "authentik-db"
        "authentik-redis"
      ];
      volumes = [
        "${authentikPaths.volumes.media}:/media"
        "${authentikPaths.volumes.templates}:/templates"
        "${authentikPaths.volumes.certs}:/certs"
      ];
      environmentFiles = [ config.age.secrets.authentik.path ];
      environment = {
        AUTHENTIK_REDIS__HOST = "authentik-redis";
        AUTHENTIK_POSTGRESQL__HOST = "authentik-db";
        AUTHENTIK_POSTGRESQL__USER = "authentik";
        AUTHENTIK_POSTGRESQL__NAME = "authentik";
      };
    };
    authentik-db = {
      image = "docker.io/library/postgres:12-alpine";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [
        "${authentikPaths.postgres}:/var/lib/postgresql/data"
      ];
      environmentFiles = [ config.age.secrets.authentik.path ];
      environment = {
        POSTGRES_USER = "authentik";
        POSTGRES_DB = "authentik";
      };
    };
    authentik-redis = {
      image = "docker.io/library/redis:alpine";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
    };
  };
}

================
File: hosts/malenia/containers/baikal/default.nix
================
{ username, vars, ... }:

let
  baikalPaths =
    let
      root = "${vars.containersConfigRoot}/baikal";
    in
    {
      inherit root;
      data = "${root}/data";
      config = "${root}/config";
    };
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues baikalPaths
  );

  virtualisation.oci-containers.containers = {
    baikal = {
      image = "ckulka/baikal:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      ports = [ "9040:80" ];
      volumes = [
        "${baikalPaths.data}:/var/www/baikal/Specific"
        "${baikalPaths.config}:/var/www/baikal/config"
      ];
      labels = {
        # Homepage
        "homepage.group" = "Documents";
        "homepage.name" = "Baikal";
        "homepage.icon" = "baikal.png";
        "homepage.href" = "https://baikal.${vars.externalDomain}";
      };
    };
  };
}

================
File: hosts/malenia/containers/dozzle/default.nix
================
{ vars, ... }:

{
  virtualisation.oci-containers.containers = {
    dozzle = {
      image = "amir20/dozzle:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [
        "/var/run/podman/podman.sock:/var/run/docker.sock"
      ];
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.dozzle.rule" = "Host(`logs.${vars.domain}`)";
        "traefik.http.routers.dozzle.entryPoints" = "https";
        "traefik.http.services.dozzle.loadbalancer.server.port" = "8080";
        # Homepage
        "homepage.group" = "Monitoring";
        "homepage.name" = "Dozzle";
        "homepage.icon" = "dozzle.svg";
        "homepage.href" = "https://logs.${vars.domain}";
      };
    };
  };
}

================
File: hosts/malenia/containers/freshrss/default.nix
================
{
  username,
  vars,
  config,
  ...
}:

let
  freshrssPaths =
    let
      root = "${vars.containersConfigRoot}/freshrss";
    in
    {
      inherit root;
      config = "${root}/config";
    };

  puid = toString vars.defaultUserUID;
  pgid = toString vars.defaultUserGID;
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues freshrssPaths
  );

  virtualisation.oci-containers.containers = {
    freshrss = {
      image = "lscr.io/linuxserver/freshrss:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [
        "${freshrssPaths.config}:/config"
      ];
      environmentFiles = [ config.age.secrets.freshrss.path ];
      environment = {
        TZ = vars.timeZone;
        PUID = puid;
        PGID = pgid;
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.freshrss.rule" = "Host(`rss.${vars.domain}`)";
        "traefik.http.routers.freshrss.entryPoints" = "https";
        "traefik.http.services.freshrss.loadbalancer.server.port" = "80";
        # Homepage
        "homepage.group" = "Documents";
        "homepage.name" = "FreshRSS";
        "homepage.icon" = "freshrss.png";
        "homepage.href" = "https://rss.${vars.domain}";
      };
    };
  };
}

================
File: hosts/malenia/containers/homepage/config/custom.css
================
@import url('https://fonts.googleapis.com/css2?family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  h2 {
    font-family: 'Space Mono', monospace !important;
    @apply mt-4;
  }
}

h1 {
  font-family: 'Space Mono', monospace !important;
}

.information-widget-greeting {
  font-family: 'Space Mono', monospace !important;
}

div#footer {
  display: none;
}

================
File: hosts/malenia/containers/homepage/config/docker.nix
================
{
  nixos-podman = {
    socket = "/var/run/docker.sock";
  };
}

================
File: hosts/malenia/containers/homepage/config/services.nix
================
domain: networkInterface: [
  {
    "Glances" = [
      {
        "Info" = {
          widget = {
            type = "glances";
            url = "https://glances.${domain}";
            metric = "info";
            version = 4;
          };
        };
      }
      {
        "Temp" = {
          widget = {
            type = "glances";
            url = "https://glances.${domain}";
            metric = "sensor:Tctl";
            version = 4;
          };
        };
      }
      {
        "Storage" = {
          widget = {
            type = "glances";
            url = "https://glances.${domain}";
            metric = "process";
            version = 4;
          };
        };
      }
      {
        "Network" = {
          widget = {
            type = "glances";
            url = "https://glances.${domain}";
            metric = "network:${networkInterface}";
            chart = true;
            version = 4;
          };
        };
      }
    ];
  }
  {
    "Media" = [
      # {
      #   "Jellyfin" = {
      #     icon = "jellyfin";
      #     href = "https://media.${domain}";
      #     weight = 5;
      #     widget = {
      #       type = "jellyfin";
      #       url = "https://media.${domain}";
      #       key = "{{HOMEPAGE_VAR_JELLYFIN_KEY}}";
      #     };
      #   };
      # }
      {
        "Plex" = {
          icon = "plex";
          href = "https://media.${domain}";
          weight = 6;
          widget = {
            type = "tautulli";
            url = "http://tautulli:8181";
            key = "{{HOMEPAGE_VAR_PLEX_KEY}}";
            enableUser = true;
          };
        };
      }
    ];
  }
  { "Media Managers" = [ ]; }
  { "Download Managers" = [ ]; }
  { "Documents" = [ ]; }
  { "Misc" = [ ]; }
  {
    "Monitoring" = [
      {
        "Grafana" = {
          icon = "grafana";
          href = "https://grafana.${domain}";
          weight = 50;
        };
      }
    ];
  }
  {
    "Management" = [
      {
        "Home Assistant" = {
          icon = "home-assistant-alt";
          href = "https://home.${domain}";
        };
      }
      {
        "Unraid" = {
          icon = "unraid";
          href = "https://storage.${domain}";
        };
      }
    ];
  }
  {
    "Networking" = [
      {
        "Unifi Console" = {
          icon = "unifi";
          href = "https://unifi.ui.com";
        };
      }
    ];
  }
]

================
File: hosts/malenia/containers/homepage/config/settings.nix
================
{
  title = "bruno's lab";
  headerStyle = "clean";
  statusStyle = "dot";
  theme = "dark";
  useEqualHeights = true;
  hideVersion = true;
  background = {
    image = "/images/background.gif";
    blur = "sm";
    brightness = 50;
  };
  layout = [
    {
      "Glances" = {
        header = false;
        style = "row";
        columns = 4;
      };
    }
    {
      "Media" = {
        style = "row";
        columns = 4;
      };
    }
    {
      "Media Managers" = {
        style = "row";
        columns = 4;
      };
    }
    { "Download Managers" = { }; }
    { "Documents" = { }; }
    { "Misc" = { }; }
    { "Monitoring" = { }; }
    {
      "Auth" = {
        style = "row";
        columns = 4;
      };
    }
    {
      "Networking" = {
        style = "row";
        columns = 4;
      };
    }
    {
      "Management" = {
        style = "row";
        columns = 4;
      };
    }
  ];
}

================
File: hosts/malenia/containers/homepage/config/widgets.nix
================
[
  {
    "greeting" = {
      text_size = "xl";
      text = "bruno's lab";
    };
  }
]

================
File: hosts/malenia/containers/homepage/default.nix
================
{
  vars,
  pkgs,
  config,
  username,
  ...
}:

let
  homepagePaths =
    let
      settingsFormat = pkgs.formats.yaml { };
      root = "${vars.containersConfigRoot}/homepage";
    in
    {
      volumes = {
        inherit root;
        images = "${root}/images";
      };
      generated = {
        docker = settingsFormat.generate "docker.yaml" (import ./config/docker.nix);
        services = settingsFormat.generate "services.yaml" (
          (import ./config/services.nix) vars.domain vars.networkInterface
        );
        widgets = settingsFormat.generate "widgets.yaml" (import ./config/widgets.nix);
        settings = settingsFormat.generate "settings.yaml" (import ./config/settings.nix);
        css = pkgs.writeTextFile {
          name = "custom.css";
          text = builtins.readFile ./config/custom.css;
        };
        bookmarks = pkgs.writeTextFile {
          name = "bookmarks.yaml";
          text = "---";
        };
      };
    };
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues homepagePaths.volumes
  );

  virtualisation.oci-containers.containers = {
    homepage = {
      image = "ghcr.io/gethomepage/homepage:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [
        "/var/run/podman/podman.sock:/var/run/docker.sock:ro"
        "${homepagePaths.generated.docker}:/app/config/docker.yaml"
        "${homepagePaths.generated.services}:/app/config/services.yaml"
        "${homepagePaths.generated.settings}:/app/config/settings.yaml"
        "${homepagePaths.generated.widgets}:/app/config/widgets.yaml"
        "${homepagePaths.generated.bookmarks}:/app/config/bookmarks.yaml"
        "${homepagePaths.generated.css}:/app/config/custom.css"
        "${homepagePaths.volumes.images}:/app/public/images"
      ];
      environmentFiles = [
        config.age.secrets.immich.path
        config.age.secrets.audiobookshelf.path
        config.age.secrets.jellyfin.path
        config.age.secrets.radarr.path
        config.age.secrets.readarr.path
        config.age.secrets.sonarr.path
        config.age.secrets.bazarr.path
        config.age.secrets.prowlarr.path
        config.age.secrets.plex.path
      ];
      environment = {
        TZ = vars.timeZone;
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.homepage.entrypoints" = "https";
        "traefik.http.routers.homepage.rule" = "Host(`dash.${vars.domain}`)";
        "traefik.http.services.homepage.loadbalancer.server.port" = "3000";
      };
    };
  };
}

================
File: hosts/malenia/containers/immich/default.nix
================
{
  config,
  vars,
  username,
  ...
}:
let
  immichVersion = "v1.121.0";

  immichPaths =
    let
      root = "${vars.containersConfigRoot}/immich";
    in
    {
      volumes = {
        inherit root;
        machineLearning = "${root}/machine-learning";
      };
      mounts = {
        photos = vars.photosMountLocation;
      };
      postgres = "${root}/postgres";
    };

  puid = toString vars.defaultUserUID;
  pgid = toString vars.defaultUserGID;
in
{
  systemd.tmpfiles.rules =
    map (x: "d ${x} 0775 ${username} ${username} - -") (builtins.attrValues immichPaths.volumes)
    ++ map (x: "d ${x} 0775 postgres ${username} - -") [ immichPaths.postgres ];

  systemd.services = {
    podman-immich-postgres = {
      requires = [ "podman-immich-redis.service" ];
      after = [ "podman-immich-redis.service" ];
    };
  };

  virtualisation.oci-containers.containers = {
    immich = {
      image = "ghcr.io/immich-app/immich-server:${immichVersion}";
      autoStart = true;
      dependsOn = [
        "immich-redis"
        "immich-postgres"
        "immich-machine-learning"
      ];
      extraOptions = [ "--gpus=all" ];
      volumes = [ "${immichPaths.mounts.photos}:/usr/src/app/upload" ];
      environmentFiles = [ config.age.secrets.immich.path ];
      environment = {
        PUID = puid;
        PGID = pgid;
        TZ = vars.timeZone;
        DB_HOSTNAME = "immich-postgres";
        DB_USERNAME = "postgres";
        DB_DATABASE_NAME = "immich";
        REDIS_HOSTNAME = "immich-redis";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.immich.entrypoints" = "https";
        "traefik.http.routers.immich.rule" = "Host(`photos.${vars.domain}`)";
        "traefik.http.services.immich.loadbalancer.server.port" = "2283";
        # Homepage
        "homepage.group" = "Media";
        "homepage.name" = "Immich";
        "homepage.icon" = "immich.svg";
        "homepage.href" = "https://photos.${vars.domain}";
        "homepage.weight" = "0";
        "homepage.widget.type" = "immich";
        "homepage.widget.key" = "{{HOMEPAGE_VAR_IMMICH_KEY}}";
        "homepage.widget.url" = "http://immich:2283";
        "homepage.widget.fields" = ''["photos", "videos", "storage"]'';
        "homepage.widget.version" = "2";
      };
    };

    immich-machine-learning = {
      image = "ghcr.io/immich-app/immich-machine-learning:${immichVersion}-cuda";
      autoStart = true;
      extraOptions = [ "--gpus=all" ];
      user = "${puid}:${pgid}";
      volumes = [ "${immichPaths.volumes.machineLearning}:/cache" ];
      environmentFiles = [ config.age.secrets.immich.path ];
      environment = {
        DB_HOSTNAME = "immich-postgres";
        DB_DATABASE_NAME = "immich";
        DB_USERNAME = "postgres";
        REDIS_HOSTNAME = "immich-redis";
      };
    };

    immich-postgres = {
      image = "tensorchord/pgvecto-rs:pg14-v0.2.1";
      autoStart = true;
      dependsOn = [ "immich-redis" ];
      extraOptions = [ "--user=100001:100001" ];
      volumes = [ "${immichPaths.postgres}:/var/lib/postgresql/data" ];
      environmentFiles = [ config.age.secrets.immich.path ];
      environment = {
        POSTGRES_DB = "immich";
        POSTGRES_USER = "postgres";
      };
    };

    immich-redis = {
      image = "redis";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
    };
  };
}

================
File: hosts/malenia/containers/ntfy/config/server.nix
================
externalDomain: {
  base-url = "https://notify.${externalDomain}";
  listen-http = ":80";
  auth-file = "/etc/ntfy/user.db";
  auth-default-access = "deny-all";
  enable-signup = false;
  enable-login = true;
}

================
File: hosts/malenia/containers/ntfy/default.nix
================
{
  username,
  vars,
  pkgs,
  ...
}:

let
  ntfyPaths =
    let
      settingsFormat = pkgs.formats.yaml { };
      root = "${vars.containersConfigRoot}/ntfy";
    in
    {
      volumes = {
        inherit root;
        cache = "${root}/cache";
        data = "${root}/data";
      };
      generated = {
        server = settingsFormat.generate "${root}/data/server.yml" (
          (import ./config/server.nix) vars.externalDomain
        );
      };
    };
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues ntfyPaths.volumes
  );

  virtualisation.oci-containers.containers = {
    ntfy = {
      image = "binwiederhier/ntfy:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      cmd = [ "serve" ];
      ports = [ "9012:80" ];
      environment = {
        TZ = vars.timeZone;
      };
      volumes = [
        "${ntfyPaths.volumes.cache}:/var/cache/ntfy"
        "${ntfyPaths.volumes.data}:/etc/ntfy"
        "${ntfyPaths.generated.server}:/etc/ntfy/server.yml"
      ];
      labels = {
        # Homepage
        "homepage.group" = "Misc";
        "homepage.name" = "Ntfy";
        "homepage.icon" = "ntfy.svg";
        "homepage.href" = "https://notify.${vars.externalDomain}";
      };
    };
  };
}

================
File: hosts/malenia/containers/ollama-webui/default.nix
================
{
  vars,
  username,
  config,
  ...
}:

let
  ollamaWebUiPaths =
    let
      root = "${vars.containersConfigRoot}/ollama-webui";
    in
    {
      volumes = {
        inherit root;
      };
    };
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues ollamaWebUiPaths.volumes
  );

  virtualisation.oci-containers.containers = {
    ollama-webui = {
      image = "ghcr.io/open-webui/open-webui:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [ "${ollamaWebUiPaths.volumes.root}:/app/backend/data" ];
      environmentFiles = [ config.age.secrets.ollama-webui.path ];
      environment = {
        OLLAMA_BASE_URL = "https://ollama.${vars.domain}";
        ENABLE_OAUTH_SIGNUP = "false";
        OAUTH_MERGE_ACCOUNTS_BY_EMAIL = "true";
        OAUTH_PROVIDER_NAME = "Authentik";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.ollama-webui.rule" = "Host(`chat.${vars.domain}`)";
        "traefik.http.routers.ollama-webui.entryPoints" = "https";
        "traefik.http.services.ollama-webui.loadbalancer.server.port" = "8080";
        # Homepage
        "homepage.group" = "Misc";
        "homepage.name" = "Ollama Web UI";
        "homepage.icon" = "ollama.svg";
        "homepage.href" = "https://chat.${vars.domain}";
      };
    };
  };
}

================
File: hosts/malenia/containers/overseerr/default.nix
================
{ vars, username, ... }:

let
  overseerrPaths =
    let
      root = "${vars.containersConfigRoot}/overseerr";
    in
    {
      volumes = {
        inherit root;
      };
    };

  puid = toString vars.defaultUserUID;
  guid = toString vars.defaultUserGID;
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues overseerrPaths.volumes
  );

  virtualisation.oci-containers.containers = {
    overseerr = {
      image = "lscr.io/linuxserver/overseerr:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [ "${overseerrPaths.volumes.root}:/config" ];
      environment = {
        TZ = vars.timeZone;
        PORT = "5055";
        LOG_LEVEL = "debug";
        PUID = puid;
        GUID = guid;
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.overseerr.rule" = "Host(`request.${vars.domain}`)";
        "traefik.http.routers.overseerr.entryPoints" = "https";
        "traefik.http.services.overseerr.loadbalancer.server.port" = "5055";
        # Homepage
        "homepage.group" = "Misc";
        "homepage.name" = "Overseerr";
        "homepage.icon" = "overseerr.svg";
        "homepage.href" = "https://request.${vars.domain}";
      };
    };
  };
}

================
File: hosts/malenia/containers/paperless/default.nix
================
{
  config,
  vars,
  username,
  ...
}:

let
  paperlessPaths =
    let
      root = "${vars.containersConfigRoot}/paperless";
      documentsRoot = vars.documentsMountLocation;
    in
    {
      volumes = {
        inherit root;
        data = "${root}/data";
        media = "${root}/media";
        export = "${root}/export";
        consume = "${root}/consume";
      };
      mounts = {
        documentsConsume = "${documentsRoot}/consume";
        documentsExport = "${documentsRoot}/export";
      };
    };

  puid = toString vars.defaultUserUID;
  guid = toString vars.defaultUserGID;
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues paperlessPaths.volumes
  );

  virtualisation.oci-containers.containers = {
    paperless = {
      image = "ghcr.io/paperless-ngx/paperless-ngx:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      dependsOn = [ "paperless-redis" ];
      volumes = [
        "${paperlessPaths.volumes.data}:/usr/src/paperless/data"
        "${paperlessPaths.volumes.media}:/usr/src/paperless/media"
        "${paperlessPaths.mounts.documentsConsume}:/usr/src/paperless/consume"
        "${paperlessPaths.mounts.documentsExport}:/usr/src/paperless/export"
      ];
      environmentFiles = [ config.age.secrets.paperless.path ];
      environment = {
        USERMAP_UID = puid;
        USERMAP_GID = guid;
        PAPERLESS_TIME_ZONE = vars.timeZone;
        PAPERLESS_URL = "https://paperless.${vars.domain}";
        PAPERLESS_OCR_LANGUAGE = "por";
        PAPERLESS_OCR_LANGUAGES = "por eng";
        PAPERLESS_REDIS = "redis://paperless-redis:6379";
        PAPERLESS_APPS = "allauth.socialaccount.providers.openid_connect";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.paperless.rule" = "Host(`paperless.${vars.domain}`)";
        "traefik.http.routers.paperless.entryPoints" = "https";
        "traefik.http.services.paperless.loadbalancer.server.port" = "8000";
        # Homepage
        "homepage.group" = "Documents";
        "homepage.name" = "Paperless";
        "homepage.icon" = "paperless.png";
        "homepage.href" = "https://paperless.${vars.domain}";
      };
    };
    paperless-redis = {
      image = "redis";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
    };
  };
}

================
File: hosts/malenia/containers/qbittorrent/default.nix
================
{ vars, username, ... }:

let
  qbtPaths =
    let
      root = "${vars.containersConfigRoot}/qbittorrent";
    in
    {
      volumes = {
        inherit root;
        config = "${root}/config";
        themes = "${root}/themes";
      };
      mounts = {
        downloads = "${vars.mediaMountLocation}/downloads";
      };
    };

  puid = toString vars.defaultUserUID;
  pgid = toString vars.defaultUserGID;
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues qbtPaths.volumes
  );

  networking.firewall.allowedTCPPorts = [ 51123 ];
  networking.firewall.allowedUDPPorts = [ 51123 ];

  virtualisation.oci-containers.containers = {
    qbittorrent = {
      image = "lscr.io/linuxserver/qbittorrent:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      ports = [
        "51123:51123"
        "51123:51123/udp"
      ];
      volumes = [
        "${qbtPaths.volumes.config}:/config"
        "${qbtPaths.volumes.themes}:/themes"
        "${qbtPaths.mounts.downloads}:/downloads"
      ];
      environment = {
        TZ = vars.timeZone;
        PUID = puid;
        PGID = pgid;
        UMASK = "002";
        TORRENTING_PORT = "51123";
        WEBUI_PORT = "8080";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.qbittorrent.rule" = "Host(`torrent.${vars.domain}`)";
        "traefik.http.routers.qbittorrent.entryPoints" = "https";
        "traefik.http.routers.qbittorrent.service" = "qbittorrent";
        "traefik.http.services.qbittorrent.loadbalancer.server.port" = "8080";
        # Homepage
        "homepage.group" = "Download Managers";
        "homepage.name" = "Qbittorrent";
        "homepage.icon" = "qbittorrent.svg";
        "homepage.href" = "https://torrent.${vars.domain}";
      };
    };
  };
}

================
File: hosts/malenia/containers/speedtest/default.nix
================
{
  vars,
  username,
  config,
  ...
}:

let
  speedtestPaths =
    let
      root = "${vars.containersConfigRoot}/speedtest-tracker";
    in
    {
      volumes = {
        inherit root;
      };
    };

  puid = toString vars.defaultUserUID;
  guid = toString vars.defaultUserGID;
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues speedtestPaths.volumes
  );

  virtualisation.oci-containers.containers = {
    speedtest-tracker = {
      image = "lscr.io/linuxserver/speedtest-tracker:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [ "${speedtestPaths.volumes.root}:/config" ];
      environmentFiles = [ config.age.secrets.speedtest-tracker.path ];
      environment = {
        TZ = vars.timeZone;
        DISPLAY_TIMEZONE = vars.timeZone;
        PUID = puid;
        PGID = guid;
        DB_CONNECTION = "sqlite";
        SPEEDTEST_SERVERS = "57971";
        SPEEDTEST_SCHEDULE = "0 * * * *";
        APP_URL = "https://speedtest.${vars.domain}";
        APP_DEBUG = "false";
        PRUNE_RESULTS_OLDER_THAN = "30";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.speedtest-tracker.rule" = "Host(`speedtest.${vars.domain}`)";
        "traefik.http.routers.speedtest-tracker.entryPoints" = "https";
        "traefik.http.services.speedtest-tracker.loadbalancer.server.port" = "80";
        # Homepage
        "homepage.group" = "Networking";
        "homepage.name" = "Speedtest Tracker";
        "homepage.icon" = "speedtest-tracker.png";
        "homepage.href" = "https://speedtest.${vars.domain}";
        "homepage.widget.type" = "speedtest";
        "homepage.widget.url" = "http://speedtest-tracker:80";
      };
    };
  };
}

================
File: hosts/malenia/containers/tautulli/default.nix
================
{ vars, username, ... }:

let
  tautulliPaths =
    let
      root = "${vars.containersConfigRoot}/tautulli";
    in
    {
      volumes = {
        inherit root;
      };
    };

  puid = toString vars.defaultUserUID;
  guid = toString vars.defaultUserGID;
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues tautulliPaths.volumes
  );

  virtualisation.oci-containers.containers = {
    tautulli = {
      image = "ghcr.io/tautulli/tautulli";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      volumes = [ "${tautulliPaths.volumes.root}:/config" ];
      environment = {
        TZ = vars.timeZone;
        PUID = puid;
        PGID = guid;
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.tautulli.rule" = "Host(`tautulli.${vars.domain}`)";
        "traefik.http.routers.tautulli.entryPoints" = "https";
        "traefik.http.services.tautulli.loadbalancer.server.port" = "8181";
        # Homepage
        "homepage.group" = "Monitoring";
        "homepage.name" = "Tautulli";
        "homepage.icon" = "tautulli.svg";
        "homepage.href" = "https://tautulli.${vars.domain}";
      };
    };
  };
}

================
File: hosts/malenia/containers/traefik/config/config.nix
================
domain: {
  api = {
    dashboard = true;
    debug = true;
    insecure = true;
  };

  entryPoints = {
    http = {
      address = ":80";
      forwardedHeaders = {
        trustedIPs = [
          "173.245.48.0/20"
          "103.21.244.0/22"
          "103.22.200.0/22"
          "103.31.4.0/22"
          "141.101.64.0/18"
          "108.162.192.0/18"
          "190.93.240.0/20"
          "188.114.96.0/20"
          "197.234.240.0/22"
          "198.41.128.0/17"
          "162.158.0.0/15"
          "104.16.0.0/12"
          "172.64.0.0/13"
          "131.0.72.0/22"
          "2400:cb00::/32"
          "2606:4700::/32"
          "2803:f800::/32"
          "2405:b500::/32"
          "2405:8100::/32"
          "2a06:98c0::/29"
          "2c0f:f248::/32"
        ];
      };
      http = {
        redirections = {
          entryPoint = {
            to = "https";
            scheme = "https";
          };
        };
      };
    };
    https = {
      address = ":443";
      forwardedHeaders = {
        trustedIPs = [
          "173.245.48.0/20"
          "103.21.244.0/22"
          "103.22.200.0/22"
          "103.31.4.0/22"
          "141.101.64.0/18"
          "108.162.192.0/18"
          "190.93.240.0/20"
          "188.114.96.0/20"
          "197.234.240.0/22"
          "198.41.128.0/17"
          "162.158.0.0/15"
          "104.16.0.0/12"
          "172.64.0.0/13"
          "131.0.72.0/22"
          "2400:cb00::/32"
          "2606:4700::/32"
          "2803:f800::/32"
          "2405:b500::/32"
          "2405:8100::/32"
          "2a06:98c0::/29"
          "2c0f:f248::/32"
        ];
      };
      http = {
        tls = {
          certResolver = "cloudflare";
          domains = [
            {
              main = domain;
              sans = [ "*.${domain}" ];
            }
          ];
        };
        middlewares = [ "securityHeaders@file" ];
      };
    };
  };

  serversTransport = {
    insecureSkipVerify = true;
  };

  providers = {
    providersThrottleDuration = "2s";
    docker = {
      network = "podman";
      endpoint = "unix:///var/run/docker.sock";
      exposedByDefault = false;
    };
    file = {
      filename = "/dynamic.yml";
      watch = true;
    };
  };

  certificatesResolvers = {
    cloudflare = {
      acme = {
        email = "hello@bruno.so";
        storage = "acme.json";
        dnsChallenge = {
          provider = "cloudflare";
          disablePropagationCheck = false;
          resolvers = [
            "1.1.1.1:53"
            "1.0.0.1:53"
          ];
        };
      };
    };
  };
}

================
File: hosts/malenia/containers/traefik/config/dynamic.nix
================
ip: domain: godwynIp: radagonIp: {
  http = {
    routers = {
      homeassistant = {
        entryPoints = [
          "https"
          "http"
        ];
        rule = "Host(`home.${domain}`)";
        middlewares = [ "https-redirect" ];
        tls = {
          certResolver = "cloudflare";
        };
        service = "homeassistant";
      };
      ollama = {
        entryPoints = [
          "https"
          "http"
        ];
        rule = "Host(`ollama.${domain}`)";
        middlewares = [ "https-redirect" ];
        tls = {
          certResolver = "cloudflare";
        };
        service = "ollama";
      };
      media = {
        entryPoints = [
          "https"
          "http"
        ];
        rule = "Host(`media.${domain}`)";
        middlewares = [ "https-redirect" ];
        tls = {
          certResolver = "cloudflare";
        };
        service = "media";
      };
      glances = {
        entryPoints = [
          "https"
          "http"
        ];
        rule = "Host(`glances.${domain}`)";
        middlewares = [ "https-redirect" ];
        tls = {
          certResolver = "cloudflare";
        };
        service = "glances";
      };
      unraid = {
        entryPoints = [
          "https"
          "http"
        ];
        rule = "Host(`storage.${domain}`)";
        middlewares = [ "https-redirect" ];
        tls = {
          certResolver = "cloudflare";
        };
        service = "unraid";
      };
      grafana = {
        entryPoints = [
          "https"
          "http"
        ];
        rule = "Host(`grafana.${domain}`)";
        middlewares = [ "https-redirect" ];
        tls = {
          certResolver = "cloudflare";
        };
        service = "grafana";
      };
    };
    services = {
      homeassistant = {
        loadBalancer = {
          servers = [ { url = "http://${radagonIp}:8123"; } ];
          passHostHeader = true;
        };
      };
      ollama = {
        loadBalancer = {
          servers = [ { url = "http://${ip}:11434"; } ];
          passHostHeader = true;
        };
      };
      media = {
        loadBalancer = {
          servers = [ { url = "http://${ip}:32400"; } ];
          passHostHeader = true;
        };
      };
      glances = {
        loadBalancer = {
          servers = [ { url = "http://${ip}:61208"; } ];
          passHostHeader = true;
        };
      };
      unraid = {
        loadBalancer = {
          servers = [ { url = "http://${godwynIp}"; } ];
          passHostHeader = true;
        };
      };
      grafana = {
        loadBalancer = {
          servers = [ { url = "http://${ip}:2342"; } ];
          passHostHeader = true;
        };
      };
    };
    middlewares = {
      securityHeaders = {
        headers = {
          customResponseHeaders = {
            X-Robots-Tag = "none,noarchive,nosnippet,notranslate,noimageindex";
            server = "";
            X-Forwarded-Proto = "https";
          };
          sslProxyHeaders = {
            X-Forwarded-Proto = "https";
          };
          referrerPolicy = "strict-origin-when-cross-origin";
          hostsProxyHeaders = [ "X-Forwarded-Host" ];
          customRequestHeaders = {
            X-Forwarded-Proto = "https";
          };
          contentTypeNosniff = true;
          browserXssFilter = true;
          forceSTSHeader = true;
          stsIncludeSubdomains = true;
          stsSeconds = 63072000;
          stsPreload = true;
        };
      };
      https-redirect = {
        redirectScheme = {
          scheme = "https";
        };
      };
      auth = {
        forwardauth = {
          address = "http://authentik-server:9000/outpost.goauthentik.io/auth/traefik";
          trustForwardHeader = true;
          authResponseHeaders = [
            "X-authentik-username"
            "X-authentik-groups"
            "X-authentik-email"
            "X-authentik-name"
            "X-authentik-uid"
            "X-authentik-jwt"
            "X-authentik-meta-jwks"
            "X-authentik-meta-outposts"
            "X-authentik-meta-provider"
            "X-authentik-meta-app"
            "X-authentik-meta-version"
            "authorization"
          ];
        };
      };
    };
  };
}

================
File: hosts/malenia/containers/traefik/default.nix
================
{
  config,
  vars,
  pkgs,
  username,
  ...
}:

let
  traefikPaths =
    let
      settingsFormat = pkgs.formats.yaml { };
      root = "${vars.containersConfigRoot}/traefik";
    in
    {
      volumes = {
        inherit root;
      };
      files = {
        acme = "${root}/acme.json";
      };
      generated = {
        config = settingsFormat.generate "config.yml" ((import ./config/config.nix) vars.domain);
        dynamic = settingsFormat.generate "dynamic.yml" (
          (import ./config/dynamic.nix) vars.ip vars.domain vars.godwynIp vars.radagonIp
        );
      };
    };
in
{
  networking.firewall.allowedTCPPorts = [
    80
    443
  ];

  systemd.tmpfiles.rules =
    map (x: "d ${x} 0775 ${username} ${username} - -") (builtins.attrValues traefikPaths.volumes)
    ++ map (x: "f ${x} 0600 ${username} ${username} - -") (builtins.attrValues traefikPaths.files);

  virtualisation.oci-containers.containers = {
    traefik = {
      image = "traefik:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      ports = [
        "443:443"
        "80:80"
      ];
      volumes = [
        "/var/run/podman/podman.sock:/var/run/docker.sock:ro"
        "${traefikPaths.files.acme}:/acme.json"
        "${traefikPaths.generated.config}:/traefik.yml:ro"
        "${traefikPaths.generated.dynamic}:/dynamic.yml:ro"
      ];
      environmentFiles = [ config.age.secrets.cloudflare.path ];
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.traefik.rule" = "Host(`traefik.${vars.domain}`)";
        "traefik.http.routers.traefik.entryPoints" = "https";
        "traefik.http.routers.traefik.service" = "api@internal";
        "traefik.http.services.traefik.loadbalancer.server.port" = "8080";
        # Homepage
        "homepage.group" = "Networking";
        "homepage.name" = "Traefik";
        "homepage.icon" = "traefik.svg";
        "homepage.href" = "https://traefik.${vars.domain}";
        "homepage.widget.type" = "traefik";
        "homepage.widget.url" = "http://traefik:8080";
      };
    };
  };
}

================
File: hosts/malenia/containers/vaultwarden/default.nix
================
{
  vars,
  username,
  config,
  ...
}:
let
  vaultwardenPaths =
    let
      root = "${vars.containersConfigRoot}/vaultwarden";
    in
    {
      volumes = {
        inherit root;
      };
    };
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues vaultwardenPaths.volumes
  );

  virtualisation.oci-containers.containers = {
    vaultwarden = {
      image = "vaultwarden/server:latest";
      autoStart = true;
      extraOptions = [ "--pull=newer" ];
      ports = [ "9045:80" ];
      volumes = [ "${vaultwardenPaths.volumes.root}:/data" ];
      environmentFiles = [ config.age.secrets.vaultwarden.path ];
      environment = {
        DOMAIN = "https://vault.${vars.externalDomain}";
        LOGIN_RATELIMIT_MAX_BURST = "10";
        LOGIN_RATELIMIT_SECONDS = "60";
        ADMIN_RATELIMIT_MAX_BURST = "10";
        ADMIN_RATELIMIT_SECONDS = "60";
        SENDS_ALLOWED = "true";
        EMERGENCY_ACCESS_ALLOWED = "true";
        WEB_VAULT_ENABLED = "true";
      };
      labels = {
        # Homepage
        "homepage.group" = "Management";
        "homepage.name" = "Vaultwarden";
        "homepage.icon" = "vaultwarden.svg";
        "homepage.href" = "https://vault.${vars.externalDomain}";
      };
    };
  };
}

================
File: hosts/malenia/containers/whisper/default.nix
================
{
  vars,
  username,
  ...
}:

let
  whisperPaths =
    let
      root = "${vars.containersConfigRoot}/whisper";
    in
    {
      volumes = {
        inherit root;
        cache = "${root}/cache";
      };
    };
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") (
    builtins.attrValues whisperPaths.volumes
  );

  virtualisation.oci-containers.containers = {
    whisper = {
      image = "onerahmet/openai-whisper-asr-webservice:latest-gpu";
      autoStart = true;
      extraOptions = [
        "--pull=newer"
        "--gpus=all"
      ];
      volumes = [ "${whisperPaths.volumes.cache}:/root/.cache/whisper" ];
      environment = {
        ASR_MODEL = "base";
        ASR_ENGINE = "openai_whisper";
      };
      labels = {
        "traefik.enable" = "true";
        "traefik.http.routers.whisper.rule" = "Host(`whisper.${vars.domain}`)";
        "traefik.http.routers.whisper.entryPoints" = "https";
        "traefik.http.services.whisper.loadbalancer.server.port" = "9000";
      };
    };
  };
}

================
File: hosts/malenia/containers/default.nix
================
{ ... }:

{
  imports = [
    ./traefik
    ./dozzle
    ./homepage
    ./speedtest
    ./baikal
    ./vaultwarden
    ./arr
    ./qbittorrent
    ./audiobookshelf
    ./freshrss
    ./immich
    ./overseerr
    ./tautulli
    ./paperless
    ./authentik
    ./ntfy
    ./ollama-webui
    ./whisper
  ];

  virtualisation = {
    containers.enable = true;
    podman = {
      enable = true;
      dockerCompat = true;
      defaultNetwork.settings.dns_enabled = true;
    };
    oci-containers = {
      backend = "podman";
    };
  };

  networking.firewall.interfaces."podman+".allowedUDPPorts = [
    53
    5353
  ];
}

================
File: hosts/malenia/services/grafana/default.nix
================
{
  vars,
  username,
  lib,
  ...
}:

let
  grafanaPath = "${vars.servicesConfigRoot}/grafana";

  directories = [ grafanaPath ];
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") directories;

  systemd.services.grafana.serviceConfig = {
    User = lib.mkDefault username;
    Group = lib.mkDefault username;
  };

  services.grafana = {
    enable = true;
    dataDir = grafanaPath;
    settings.server = {
      domain = "grafana.${vars.domain}";
      http_addr = "${vars.ip}";
      http_port = 2342;
    };
  };

  services.prometheus.scrapeConfigs = [
    {
      job_name = "node-exporter";
      static_configs = [
        {
          targets = [
            "${vars.ip}:9002"
            "${vars.miquellaIp}:9002"
            "${vars.godwynIp}:9100"
          ];
        }
      ];
    }
  ];

  networking.firewall = {
    allowedUDPPorts = [
      2342
      9001
      9002
    ];
    allowedTCPPorts = [
      2342
      9001
      9002
    ];
  };
}

================
File: hosts/malenia/services/jellyfin/default.nix
================
{
  username,
  vars,
  pkgs,
  ...
}:

let
  jellyfinPath = "${vars.servicesConfigRoot}/jellyfin";

  directories = [ jellyfinPath ];
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") directories;

  environment.systemPackages = with pkgs; [
    jellyfin
    jellyfin-web
    jellyfin-ffmpeg
  ];

  services.jellyfin = {
    enable = true;
    openFirewall = true;
    user = username;
    configDir = jellyfinPath;
  };
}

================
File: hosts/malenia/services/ollama/default.nix
================
{
  pkgs,
  username,
  vars,
  ...
}:

let
  ollamaPath = "${vars.servicesConfigRoot}/ollama";

  directories = [
    "${ollamaPath}"
    "${ollamaPath}/data"
    "${ollamaPath}/models"
  ];
in
{
  systemd.tmpfiles.rules = map (x: "d ${x} 0775 ${username} ${username} - -") directories;

  systemd.services.ollama.serviceConfig = {
    User = username;
  };

  services.ollama = {
    enable = true;
    openFirewall = true;
    package = pkgs.ollama;
    host = "0.0.0.0";
    port = 11434;
    acceleration = "cuda";
    home = "${ollamaPath}/data";
    models = "${ollamaPath}/models";
    loadModels = [
      "llama3.2:3b"
    ];
    environmentVariables = {
      OLLAMA_ORIGINS = "http://localhost:11434,https://ollama.local.luana.casa";
    };
  };
}

================
File: hosts/malenia/services/plex/default.nix
================
{
  vars,
  pkgs,
  username,
  ...
}:

let
  plexPath = "${vars.servicesConfigRoot}/plex";
in
{
  systemd.services.plex.serviceConfig = {
    User = username;
    Group = username;
  };

  services.plex =
    let
      plexPassPkg = pkgs.plex.override {
        plexRaw = pkgs.plexRaw.overrideAttrs (old: rec {
          version = "1.41.2.9200-c6bbc1b53";
          src = pkgs.fetchurl {
            url = "https://downloads.plex.tv/plex-media-server-new/${version}/debian/plexmediaserver_${version}_amd64.deb";
            sha256 = "sha256-HmgtnUsDzRIUThYdlZIzhiU02n9jSU7wtwnEA0+r1iQ=";
          };
        });
      };
    in
    {
      enable = true;
      openFirewall = true;
      user = username;
      group = username;
      package = plexPassPkg;
      dataDir = plexPath;
      accelerationDevices = [ "*" ];
    };
}

================
File: hosts/malenia/services/restic/default.nix
================
{
  config,
  vars,
  username,
  pkgs,
  lib,
  ...
}:

let
  backupNotifications = {
    restic-backups-photos-failure = "Photos backup failure!";
    restic-backups-photos-success = "Photos backup success!";
    restic-backups-containers-failure = "Containers backup failure!";
    restic-backups-containers-success = "Containers backup success!";
  };
in
{
  systemd.services =
    {
      restic-backups-podman-stop = {
        enable = true;
        serviceConfig = {
          Type = "oneshot";
        };
        script = ''${pkgs.systemd}/bin/systemctl stop podman-*'';
      };

      restic-backups-podman-start = {
        enable = true;
        serviceConfig = {
          Type = "oneshot";
        };
        script = ''${pkgs.systemd}/bin/systemctl start --no-block --all "podman-*"'';
      };

      restic-backups-photos = {
        requires = [ "restic-backups-podman-stop.service" ];
        after = [ "restic-backups-podman-stop.service" ];
        onFailure = [
          "restic-backups-podman-start.service"
          "restic-backups-photos-failure.service"
        ];
        onSuccess = [
          "restic-backups-podman-start.service"
          "restic-backups-photos-success.service"
        ];
      };

      restic-backups-containers = {
        requires = [ "restic-backups-podman-stop.service" ];
        after = [ "restic-backups-podman-stop.service" ];
        onFailure = [
          "restic-backups-podman-start.service"
          "restic-backups-containers-failure.service"
        ];
        onSuccess = [
          "restic-backups-podman-start.service"
          "restic-backups-containers-success.service"
        ];
      };
    }
    // lib.mapAttrs' (
      name: message:
      lib.attrsets.nameValuePair name {
        enable = true;
        serviceConfig = {
          Type = "oneshot";
          User = username;
        };
        script = ''
          sleep 60
          source ${config.age.secrets.ntfy.path}
          ${pkgs.curl}/bin/curl \
            -u $NTFY_TOKEN \
            -d '${message}' \
            "https://notify.${vars.externalDomain}/homelab"
        '';
      }
    ) backupNotifications;

  services.restic.backups = {
    photos = {
      initialize = true;

      environmentFile = config.age.secrets.restic-env.path;
      repositoryFile = config.age.secrets.restic-repo-photos.path;
      passwordFile = config.age.secrets.restic-password-photos.path;

      paths = [ vars.photosMountLocation ];

      exclude = [
        "${vars.containersConfigRoot}/whisper"
      ];

      timerConfig = {
        OnCalendar = "04:00";
      };

      pruneOpts = [
        "--keep-daily 7"
        "--keep-weekly 2"
      ];
    };
    containers = {
      initialize = true;

      environmentFile = config.age.secrets.restic-env.path;
      repositoryFile = config.age.secrets.restic-repo-containers.path;
      passwordFile = config.age.secrets.restic-password-containers.path;

      paths = [
        vars.containersConfigRoot
        vars.servicesConfigRoot
      ];

      exclude = [
        "${vars.servicesConfigRoot}/ollama/models"
      ];

      timerConfig = {
        OnCalendar = "04:00";
      };

      pruneOpts = [
        "--keep-daily 7"
        "--keep-weekly 2"
      ];
    };
  };
}

================
File: hosts/malenia/services/default.nix
================
{ ... }:

{
  imports = [ 
    ./grafana
    ./restic
    # ./jellyfin
    ./ollama
    ./plex
  ];
}

================
File: hosts/malenia/default.nix
================
{
  username,
  config,
  lib,
  vars,
  ...
}:

{
  imports = [
    ./hardware-configuration.nix
    ./filesystems.nix
    ./users.nix
    ./pkgs.nix
    ./containers
    ./services
  ];

  boot.loader = {
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
  };

  boot.kernelModules = [ "nvidia-uvm" ];

  time.timeZone = vars.timeZone;

  users.users.${username}.home = "/home/${username}";

  services.xserver.videoDrivers = [ "nvidia" ];

  hardware = {
    enableRedistributableFirmware = lib.mkDefault true;
    graphics.enable = true;
    nvidia = {
      open = false;
      nvidiaSettings = true;
      modesetting.enable = true;
      powerManagement = {
        finegrained = false;
        enable = false;
      };
      package = config.boot.kernelPackages.nvidiaPackages.stable;
    };
    nvidia-container-toolkit.enable = true;
  };

  system.stateVersion = "24.05";
}

================
File: hosts/malenia/filesystems.nix
================
{
  config,
  username,
  vars,
  ...
}:

let
  shareCredentialsPath = config.age.secrets.share.path;

  puid = toString vars.defaultUserUID;
  guid = toString vars.defaultUserGID;
in
{
  environment.persistence."/persistent" = {
    enable = true;
    hideMounts = true;
    directories = [
      "/var/log"
      "/var/lib/nixos"
      "/var/lib/systemd/coredump"
      {
        directory = "/opt/containers";
        user = username;
        group = username;
        mode = "u=rwx,g=rwx,o=";
      }
      {
        directory = "/opt/services";
        user = username;
        group = username;
        mode = "u=rwx,g=rwx,o=";
      }
    ];
  };

  fileSystems."${vars.mediaMountLocation}" = {
    device = "//${vars.godwynIp}/media";
    fsType = "cifs";
    options = [
      "credentials=${shareCredentialsPath}"
      "uid=${puid}"
      "gid=${guid}"
      "rw"
      "noserverino"
      "x-systemd.automount"
      "noauto"
    ];
  };

  fileSystems."${vars.photosMountLocation}" = {
    device = "//${vars.godwynIp}/photos";
    fsType = "cifs";
    options = [
      "credentials=${shareCredentialsPath}"
      "uid=${puid}"
      "gid=${guid}"
      "rw"
      "noserverino"
      "x-systemd.automount"
      "noauto"
    ];
  };

  fileSystems."${vars.documentsMountLocation}" = {
    device = "//${vars.godwynIp}/documents";
    fsType = "cifs";
    options = [
      "credentials=${shareCredentialsPath}"
      "uid=${puid}"
      "gid=${guid}"
      "rw"
      "noserverino"
      "x-systemd.automount"
      "noauto"
    ];
  };
}

================
File: hosts/malenia/hardware-configuration.nix
================
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/266e8ec8-fe63-4860-a07a-4951776da755";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/C25E-BE41";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp5s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

================
File: hosts/malenia/pkgs.nix
================
{ pkgs, ... }:

{
  environment.systemPackages = with pkgs; [
    immich-cli
    nvidia-container-toolkit
    cudatoolkit
  ];
}

================
File: hosts/malenia/users.nix
================
{ lib, ... }:

{
  users.users = {
    postgres = {
      uid = lib.mkDefault 100001;
      isNormalUser = true;
    };
    grafana = {
      uid = lib.mkDefault 100002;
    };
  };
}

================
File: hosts/malenia/vars.nix
================
{
  # general
  timeZone = "America/Sao_Paulo";

  # networking
  ip = "10.22.4.2";
  defaultGateway = "10.22.4.1";
  networkInterface = "enp5s0";

  # domains
  domain = "local.luana.casa";
  externalDomain = "external.luana.casa";

  # configs
  servicesConfigRoot = "/persistent/opt/services";
  containersConfigRoot = "/persistent/opt/containers";

  # hosts
  godwynIp = "10.22.4.4";
  radagonIp = "10.22.4.3";
  miquellaIp = "159.112.184.83";

  # mounts
  mediaMountLocation = "/mnt/media";
  photosMountLocation = "/mnt/photos";
  documentsMountLocation = "/mnt/documents";

  # user
  defaultUserUID = 1000;
  defaultUserGID = 1000;
}

================
File: hosts/miquella/containers/nginx/default.nix
================
{
  username,
  config,
  vars,
  ...
}:

{
  security.acme = {
    acceptTerms = true;
    defaults.email = "hello@bruno.so";
  };

  networking.firewall.allowedTCPPorts = [
    80
    443
  ];

  services.nginx = {
    enable = true;
    user = username;
    virtualHosts = {
      "jalotopimentel.com" = {
        forceSSL = true;
        enableACME = true;
        locations."/referencia-madrinhas" = {
          proxyPass = "https://photos.app.goo.gl/8Byq8eUVuNXivPZAA";
        };
        locations."/referencia-padrinhos" = {
          proxyPass = "https://photos.app.goo.gl/UJejtmYJHG9tjvYs7";
        };
        locations."/" = {
          return = "301 $scheme://loja.jalotopimentel.com$request_uri";
        };
      };
      "www.jalotopimentel.com" = {
        forceSSL = true;
        enableACME = true;
        locations."/" = {
          return = "301 $scheme://loja.jalotopimentel.com$request_uri";
        };
      };
      "notify.external.luana.casa" = {
        forceSSL = true;
        enableACME = true;
        locations."/" = {
          proxyPass = "http://malenia:9012";
          proxyWebsockets = true;
        };
      };
      "vault.external.luana.casa" = {
        forceSSL = true;
        enableACME = true;
        basicAuthFile = config.age.secrets.nginx-vault.path;
        locations."/admin" = {
          proxyPass = "http://malenia:9045/admin";
          extraConfig = ''
            auth_basic "Admin";
          '';
        };
        locations."/" = {
          proxyPass = "http://malenia:9045";
          proxyWebsockets = true;
          extraConfig = ''
            auth_basic off;
          '';
        };
      };
      "baikal.external.luana.casa" = {
        forceSSL = true;
        enableACME = true;
        basicAuthFile = config.age.secrets.nginx-baikal.path;
        locations."/admin" = {
          proxyPass = "http://malenia:9040/admin";
          proxyWebsockets = true;
          extraConfig = ''
            auth_basic "Admin";
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Forwarded-Proto $scheme;
          '';
        };
        locations."/" = {
          proxyPass = "http://malenia:9040";
          proxyWebsockets = true;
          extraConfig = ''
            auth_basic off;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Forwarded-Proto $scheme;
          '';
        };
      };
    };
  };
}

================
File: hosts/miquella/containers/traefik/config/config.nix
================
domain: {
  api = {
    dashboard = true;
    debug = true;
    insecure = true;
  };

  entryPoints = {
    http = {
      address = ":80";
      forwardedHeaders = {
        trustedIPs = [
          "173.245.48.0/20"
          "103.21.244.0/22"
          "103.22.200.0/22"
          "103.31.4.0/22"
          "141.101.64.0/18"
          "108.162.192.0/18"
          "190.93.240.0/20"
          "188.114.96.0/20"
          "197.234.240.0/22"
          "198.41.128.0/17"
          "162.158.0.0/15"
          "104.16.0.0/12"
          "172.64.0.0/13"
          "131.0.72.0/22"
          "2400:cb00::/32"
          "2606:4700::/32"
          "2803:f800::/32"
          "2405:b500::/32"
          "2405:8100::/32"
          "2a06:98c0::/29"
          "2c0f:f248::/32"
        ];
      };
      http = {
        redirections = {
          entryPoint = {
            to = "https";
            scheme = "https";
          };
        };
      };
    };
    https = {
      address = ":443";
      forwardedHeaders = {
        trustedIPs = [
          "173.245.48.0/20"
          "103.21.244.0/22"
          "103.22.200.0/22"
          "103.31.4.0/22"
          "141.101.64.0/18"
          "108.162.192.0/18"
          "190.93.240.0/20"
          "188.114.96.0/20"
          "197.234.240.0/22"
          "198.41.128.0/17"
          "162.158.0.0/15"
          "104.16.0.0/12"
          "172.64.0.0/13"
          "131.0.72.0/22"
          "2400:cb00::/32"
          "2606:4700::/32"
          "2803:f800::/32"
          "2405:b500::/32"
          "2405:8100::/32"
          "2a06:98c0::/29"
          "2c0f:f248::/32"
        ];
      };
      http = {
        tls = {
          certResolver = "cloudflare";
          domains = [
            {
              main = domain;
              sans = [ "*.${domain}" ];
            }
            {
              main = "jalotopimentel.com";
              sans = [ "*.jalotopimentel.com" ];
            }
          ];
        };
        middlewares = [ "securityHeaders@file" ];
      };
    };
  };

  serversTransport = {
    insecureSkipVerify = true;
  };

  providers = {
    providersThrottleDuration = "2s";
    docker = {
      network = "podman";
      endpoint = "unix:///var/run/docker.sock";
      exposedByDefault = false;
    };
    file = {
      filename = "/dynamic.yml";
      watch = true;
    };
  };

  certificatesResolvers = {
    cloudflare = {
      acme = {
        email = "hello@bruno.so";
        storage = "acme.json";
        dnsChallenge = {
          provider = "cloudflare";
          disablePropagationCheck = false;
          resolvers = [
            "1.1.1.1:53"
            "1.0.0.1:53"
          ];
        };
      };
    };
  };
}

================
File: hosts/miquella/containers/traefik/config/dynamic.nix
================
domain: {
  http = {
    routers = { };
    services = { };
    middlewares = {
      securityHeaders = {
        headers = {
          customResponseHeaders = {
            X-Robots-Tag = "none,noarchive,nosnippet,notranslate,noimageindex";
            server = "";
            X-Forwarded-Proto = "https";
          };
          sslProxyHeaders = {
            X-Forwarded-Proto = "https";
          };
          referrerPolicy = "strict-origin-when-cross-origin";
          hostsProxyHeaders = [ "X-Forwarded-Host" ];
          customRequestHeaders = {
            X-Forwarded-Proto = "https";
          };
          contentTypeNosniff = true;
          browserXssFilter = true;
          forceSTSHeader = true;
          stsIncludeSubdomains = true;
          stsSeconds = 63072000;
          stsPreload = true;
        };
      };
      https-redirect = {
        redirectScheme = {
          scheme = "https";
        };
      };
      auth = {
        forwardauth = {
          address = "https://auth.luana.casa/outpost.goauthentik.io/auth/traefik";
          trustForwardHeader = true;
          authResponseHeaders = [
            "X-authentik-username"
            "X-authentik-groups"
            "X-authentik-email"
            "X-authentik-name"
            "X-authentik-uid"
            "X-authentik-jwt"
            "X-authentik-meta-jwks"
            "X-authentik-meta-outposts"
            "X-authentik-meta-provider"
            "X-authentik-meta-app"
            "X-authentik-meta-version"
            "authorization"
          ];
        };
      };
    };
  };
}

================
File: hosts/miquella/containers/traefik/default.nix
================
{
  config,
  vars,
  pkgs,
  username,
  ...
}:

let
  traefikPath = "${vars.containersConfigRoot}/traefik";

  directories = [ traefikPath ];
  files = [ "${traefikPath}/acme.json" ];

  settingsFormat = pkgs.formats.yaml { };
  traefikConfig = {
    config = settingsFormat.generate "config.yml" ((import ./config/config.nix) vars.domain);
    dynamic = settingsFormat.generate "dynamic.yml" ((import ./config/dynamic.nix) vars.domain);
  };
in
{
  networking.firewall.allowedTCPPorts = [
    80
    443
  ];

  systemd.tmpfiles.rules =
    map (x: "d ${x} 0775 ${username} ${username} - -") directories
    ++ map (x: "f ${x} 0600 ${username} ${username} - -") files;

  virtualisation.oci-containers = {
    containers = {
      traefik = {
        image = "traefik:latest";
        autoStart = true;
        extraOptions = [ "--pull=newer" ];
        ports = [
          "443:443"
          "80:80"
        ];
        volumes = [
          "/var/run/podman/podman.sock:/var/run/docker.sock:ro"
          "${traefikPath}/acme.json:/acme.json"
          "${traefikConfig.config}:/traefik.yml:ro"
          "${traefikConfig.dynamic}:/dynamic.yml:ro"
        ];
        environmentFiles = [ config.age.secrets.cloudflare.path ];
        labels = {
          "traefik.enable" = "true";
          "traefik.http.routers.traefik.rule" = "Host(`traefik.${vars.domain}`)";
          "traefik.http.routers.traefik.entryPoints" = "https";
          "traefik.http.routers.traefik.service" = "api@internal";
          "traefik.http.services.traefik.loadbalancer.server.port" = "8080";
        };
      };
    };
  };
}

================
File: hosts/miquella/containers/default.nix
================
{ ... }:

{
  imports = [
    ./nginx
    # ./traefik
    # ./wordpress
  ];

  virtualisation = {
    containers.enable = true;
    podman = {
      enable = true;
      dockerCompat = true;
      defaultNetwork.settings.dns_enabled = true;
    };
    oci-containers = {
      backend = "podman";
    };
  };

  networking.firewall.interfaces."podman+".allowedUDPPorts = [
    53
    5353
  ];
}

================
File: hosts/miquella/default.nix
================
{ username, vars, ... }:

{
  imports = [ 
    ./hardware-configuration.nix
    ./filesystems.nix
    ./containers
  ];

  boot.loader = {
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
  };

  time.timeZone = vars.timeZone;

  users.users.${username}.home = "/home/${username}";

  networking = {
    networkmanager.enable = false;
  };

  system.stateVersion = "24.11";
}

================
File: hosts/miquella/filesystems.nix
================
{ username, ... }:

{
  environment.persistence."/persistent" = {
    enable = true;
    hideMounts = true;
    directories = [
      "/var/log"
      "/var/lib/nixos"
      "/var/lib/systemd/coredump"
      {
        directory = "/opt/containers";
        user = username;
        group = username;
        mode = "u=rwx,g=rwx,o=";
      }
      {
        directory = "/opt/services";
        user = username;
        group = username;
        mode = "u=rwx,g=rwx,o=";
      }
    ];
  };
}

================
File: hosts/miquella/hardware-configuration.nix
================
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/profiles/qemu-guest.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "virtio_scsi" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/79980077-a367-4073-b32c-16a880d37e44";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/2B60-4F15";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eth0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "aarch64-linux";
}

================
File: hosts/miquella/vars.nix
================
{
  # general
  timeZone = "America/Sao_Paulo";

  # networking
  ip = "10.0.0.57";
  defaultGateway = "10.0.0.1";
  networkInterface = "enp0s6";

  # domains
  domain = "external.luana.casa";

  # hosts
  maleniaIp = "10.22.4.2";

  # configs
  servicesConfigRoot = "/persistent/opt/services";
  containersConfigRoot = "/persistent/opt/containers";

  # user
  defaultUserUID = 1000;
  defaultUserGID = 1000;
}

================
File: hosts/solaire/services/kanata/default.nix
================
{
  config,
  username,
  ...
}:

let
  kanataPath = "${config.users.users.${username}.home}/.config/kanata";
in
{
  launchd.daemons.kanata = {
    command = "${kanataPath}/kanata -c ${kanataPath}/personal.kbd";
    serviceConfig = {
      Label = "org.nixos.kanata";
      UserName = "root";
      GroupName = "root";
      RunAtLoad = true;
      KeepAlive = true;
      StandardOutPath = "/Library/Logs/Kanata/kanata.out.log";
      StandardErrorPath = "/Library/Logs/Kanata/kanata.err.log";
    };
  };
}

================
File: hosts/solaire/services/default.nix
================
{ ... }:

{
  imports = [
    ./kanata
  ];
}

================
File: hosts/solaire/default.nix
================
{ username, pkgs, ... }:

{
  imports = [
    ./services
  ];

  nix.package = pkgs.nix;

  nixpkgs.hostPlatform = "aarch64-darwin";

  services.nix-daemon.enable = true;

  networking = {
    hostName = "solaire";
    localHostName = "solaire";
  };

  users.users.${username}.home = "/Users/${username}";

  system.stateVersion = 4;
}

================
File: modules/darwin/brew.nix
================
{ ... }:

let
  windowManager = "aerospace"; # Can be "yabai" or "aerospace"
in
{
  homebrew = {
    enable = true;

    onActivation = {
      autoUpdate = true;
      upgrade = true;
      cleanup = "zap";
    };

    brews = [
      "sketchybar" # Highly customizable macOS status bar replacement
      "borders"  # Window border highlighter for macOS
      "lua"      # Programming language designed for embedded use
      "ripgrep"  # Fast line-oriented search tool (alternative to grep)
      "libpcap"  # Portable C/C++ library for network traffic capture
      "hcxtools" # Utils for capturing wlan traffic and conversion
      "xz"       # Data compression utilities
      "ykman"    # YubiKey Manager CLI tool
      "tree"     # Directory listing tool showing tree structure
      "trash-cli" # CLI interface to macOS trash
      "starship" # Cross-shell customizable prompt
      "awscli"   # Official Amazon AWS command-line interface
      "gh"       # GitHub CLI tool
      "autoraise" # Auto Raise

      "awscli"   # AWS CLI tool
      "minio-mc" # CLI tool for managing Amazon S3
      "terraform" # CLI tool for managing infrastructure as code
      "uv"       # Universal Viewer CLI tool
      "yarn"     # JavaScript package manager
      "k9s"      # Kubernetes CLI tool
      "repomix"  # CLI tool for managing repositories
      "borders"  # Window border highlighter for macOS

    

    ] ++ (if windowManager == "yabai" then [
      "skhd" # Simple hotkey daemon
      "koekeishiya/formulae/yabai" # Tiling window manager
    ] else []);

    taps = [
      "nikitabobko/tap"
      "felixkratz/formulae"
    ] ++ (if windowManager == "yabai" then [
      "koekeishiya/formulae"
    ] else []) ++ [
      "dimentium/autoraise"
    ];

    casks = [
      # Development Tools
      { name = "cursor"; greedy = true; } # AI-first code editor
      { name = "docker"; greedy = true; } # Container platform
      { name = "jetbrains-toolbox"; greedy = true; } # JetBrains IDE manager
      { name = "kicad"; greedy = true; } # Electronics design automation suite
      { name = "postman"; greedy = true; } # API development platform
      { name = "visual-studio-code"; greedy = true; } # Code editor
      { name = "datagrip"; greedy = true; } # Jetbrains DataGrip
      { name = "pycharm"; greedy = true; } # Jetbrains PyCharm
      { name = "windsurf"; greedy = true; } # Agentic IDE powered by AI Flow paradigm
      { name = "pycharm"; greedy = true; }
      { name = "snowflake-snowsql"; greedy = true; } # Window manager for macOS


      # Terminal Emulators
      { name = "warp"; greedy = true; } # Rust-based terminal
      { name = "ghostty"; greedy = true; } # Minimalist terminal
      # Creative & Design
      { name = "affinity-designer"; greedy = true; } # Vector graphics editor
      { name = "affinity-photo"; greedy = true; } # Photo editing software
      { name = "affinity-publisher"; greedy = true; } # Desktop publishing app
      { name = "autodesk-fusion"; greedy = true; } # 3D CAD/CAM tool
      { name = "blender"; greedy = true; } # 3D creation suite
      { name = "figma"; greedy = true; } # Collaborative design tool
      { name = "sf-symbols"; greedy = true; } # Apple system symbols


      # Menu bar
      { name = "hiddenbar"; greedy = true; } # Menu bar icon manager
      { name = "meetingbar"; greedy = true; } # Calendar meetings in menu bar

      { name = "thunderbird@beta"; greedy = true; }
      # Productivity & Organization

      { name = "notion"; greedy = true; } # All-in-one workspace
      { name = "obsidian"; greedy = true; } # Knowledge base markdown editor

      # Communication & Collaboration
      { name = "discord"; greedy = true; } # Chat and community platform
      { name = "microsoft-teams"; greedy = true; } # Business communication
      { name = "slack"; greedy = true; } # Team communication
      { name = "whatsapp"; greedy = true; } # Messaging app
      { name = "zoom"; greedy = true; } # Video conferencing
      { name = "parsec"; greedy = true; } # Game launcher

      # Security & Privacy
      #{ name = "bitwarden"; greedy = true; } # Password manager
      { name = "protonvpn"; greedy = true; } # Secure VPN service
      { name = "tunnelblick"; greedy = true; } # OpenVPN client
      { name = "wireshark"; greedy = true; } # Network protocol analyzer

      # System Utilities
      { name = "aldente"; greedy = true; } # Battery charge limiter
      { name = "disk-inventory-x"; greedy = true; } # Disk space analyzer
      { name = "displaylink"; greedy = true; } # Display connectivity
      { name = "eul"; greedy = true; } # System monitor
      { name = "linearmouse"; greedy = true; } # Mouse/trackpad customizer
      { name = "macfuse"; greedy = true; } # Filesystem in userspace
      { name = "notchnook"; greedy = true; } # Notch utility
      { name = "pearcleaner"; greedy = true; } # App uninstaller
      #{ name = "shottr"; greedy = true; } # Screenshot tool
      { name = "the-unarchiver"; greedy = true; } # Archive extraction tool
      { name = "aerospace"; greedy = true; } # Window manager
      #{ name = "microsoft-auto-update"; greedy = true; } # Microsoft apps updater
      #{ name = "karabiner-elements"; greedy = true; } # Keyboard customizer
      #{ name = "keycastr"; greedy = true; } # Keystroke visualizer

      # Web Browsers
      { name = "arc"; greedy = true; } # Chromium-based browser
      { name = "zen-browser"; greedy = true; } # Web browser

      # Media & Entertainment
      { name = "calibre"; greedy = true; } # E-book manager
      { name = "pika"; greedy = true; } # Color picker tool
      { name = "spotify"; greedy = true; } # Music streaming
      { name = "vlc"; greedy = true; } # Media player

      # 3D Printing & Making
      { name = "bambu-studio"; greedy = true; } # 3D printer slicer
      { name = "raspberry-pi-imager"; greedy = true; } # RPi OS installer

      { name = "bettertouchtool"; greedy = true; } # Touchbar customization
      # Development Environments
      #{ name = "miniconda"; greedy = true; } # Python distribution
      { name = "r"; greedy = true; } # Statistical computing
      { name = "rstudio"; greedy = true; } # R IDE
      { name = "ollama"; greedy = true; } # Chat GPT in your terminal
      { name = "whatsapp"; greedy = true; }

      # Documentation & Learning
      { name = "font-sf-mono"; greedy = true; } # Apple's monospace font
      { name = "font-iosevka-nerd-font"; greedy = true; }
      { name = "font-sf-pro"; greedy = true; } # Apple's system font
      { name = "font-space-mono-nerd-font"; greedy = true; } # Patched monospace font
      { name = "font-sketchybar-app-font"; greedy = true; }
      { name = "mactex"; greedy = true; } # TeX/LaTeX distribution
      { name = "skim"; greedy = true; } # PDF reader

      # Database Tools
      { name = "mongodb-compass"; greedy = true; } # MongoDB GUI

      # File Management & Sharing
      { name = "balenaetcher"; greedy = true; } # USB writer
      { name = "spacedrive"; greedy = true; } # File management system
      { name = "transmission"; greedy = true; } # Torrent client
      { name = "utm"; greedy = true; } # Virtual machine host

      # AI & Chat
      { name = "chatgpt"; greedy = true; } # OpenAI ChatGPT client
      { name = "claude"; greedy = true; } # Anthropic ChatGPT client
      { name = "superwhisper"; greedy = true; } # Whisper client


      # Gaming & Game Development
      { name = "godot"; greedy = true; } # Game engine

      # Other
      { name = "vial"; greedy = true; } # Keyboard configurator
      { name = "spotify"; greedy = true; } # Spotify
      { name = "microsoft-excel"; greedy = true; } # Excel
      { name = "swiftbar"; greedy = true; } # AI-first code editor
      { name = "autoraiseapp"; greedy = true; } # Auto Raise
    ] ++ (if windowManager == "aerospace" then [
      { name = "aerospace"; greedy = true; } # Window manager
    ] else []);
    masApps = {
      amphetamine = 937984704;
      kindle = 302584613;
      tailscale = 1475387142;

      # useful for debugging macos key codes
      #key-codes = 414568915;
    };
  };
}

================
File: modules/darwin/default.nix
================
{
  system = import ./system.nix;
  macos = import ./macos.nix;
  pkgs = import ./pkgs.nix;
  brew = import ./brew.nix;
}

================
File: modules/darwin/macos.nix
================
# Configuration for macOS-specific settings
{ username, ... }:

{
  # Enable Touch ID authentication for sudo
  security.pam.enableSudoTouchIdAuth = true;

  system = {
    # Keyboard settings
    keyboard = {
      enableKeyMapping = true;
      remapCapsLockToControl = true;
    };

    defaults = {
      # clock
      menuExtraClock.Show24Hour = true;
      menuExtraClock.ShowSeconds = false;

      # https://github.com/LnL7/nix-darwin/blob/master/modules/system/defaults/trackpad.nix
      trackpad = {
        # tap to click
        Clicking = true;
        # tap-tap-drag to drag
        Dragging = true;
        # two-finger-tap right click
        TrackpadRightClick = true;
      };

      # Global macOS system preferences
      NSGlobalDomain = {
        AppleShowAllExtensions = true;          # Show all file extensions
        ApplePressAndHoldEnabled = false;       # Disable press-and-hold for keys in favor of key repeat
        KeyRepeat = 2;                          # Set key repeat rate (lower is faster)
        InitialKeyRepeat = 15;                  # Set delay until key repeat begins
        "com.apple.mouse.tapBehavior" = 1;      # Enable tap to click
        "com.apple.sound.beep.volume" = 0.0;    # Disable system beep
        "com.apple.sound.beep.feedback" = 0;
        _HIHideMenuBar = false;
      };

      # Dock configuration
      dock = {
        appswitcher-all-displays = true;        # Show app switcher on all displays
        autohide = false;                        # Automatically hide and show the Dock
        autohide-delay = 0.0;                   # Remove delay for showing Dock
        autohide-time-modifier = 0.15;          # Speed up Dock show/hide animation
        orientation = "bottom";                  # Place Dock at the bottom
        tilesize = 22;                          # Set Dock icon size
        largesize = 96;
        launchanim = false;                     # Disable launch animation
        magnification = false;                   # Enable magnification
        minimize-to-application = true;         # Minimize windows into application icon
        show-process-indicators = true;         # Show indicators for open applications
        show-recents = false;                   # Don't show recent applications
        showhidden = true;                      # Show indicators for hidden applications
        static-only = false;                    # Show all active applications
        dashboard-in-overlay = false;           # Disable dashboard overlay
        persistent-apps = [                     # Apps that persist in Dock even when closed
          "/Applications/Warp.app"
          "/Applications/Arc.app"
          "/System/Applications/Mail.app"
          "/Applications/Spotify.app"
          "/Applications/Cursor.app"
          "/Applications/ChatGPT.app"
          "/Applications/Claude.app"
          "/Applications/Obsidian.app"
        ];
        expose-animation-duration = 0.2;        # Mission Control animation speed
        expose-group-apps = true;              # Group windows by application in Mission Control
        wvous-bl-corner = 1;                   # Bottom-left hot corner action
        wvous-br-corner = 4;                   # Bottom-right hot corner action
        wvous-tl-corner = 1;                   # Top-left hot corner action
        wvous-tr-corner = 12;                  # Top-right hot corner action
        mru-spaces = false;                    # Don't automatically rearrange spaces
      };

      # Finder configuration
      finder = {
        _FXShowPosixPathInTitle = false;       # Don't show full POSIX path in Finder window title
        _FXSortFoldersFirst = true;            # Show folders first in Finder
        AppleShowAllExtensions = true;         # Show all file extensions
        AppleShowAllFiles = false;             # Hide hidden files
        CreateDesktop = false;                 # Hide desktop icons
        FXDefaultSearchScope = "SCcf";         # Default to current folder for search
        FXEnableExtensionChangeWarning = false; # Don't warn when changing file extensions
        FXPreferredViewStyle = "Nlsv";         # Default to list view in Finder
        QuitMenuItem = false;                  # Prevent quitting Finder
        ShowPathbar = true;                    # Show path bar in Finder
        ShowStatusBar = false;                 # Hide status bar in Finder
      };

      # Control Center configuration
      controlcenter = {
        BatteryShowPercentage = true;
        Bluetooth = true;
      };
    };
  };
}

================
File: modules/darwin/pkgs.nix
================
{ pkgs, ... }:

{
  programs.zsh.enable = true;

  environment.systemPackages = with pkgs; [
    # Text Editors and Terminal
    neovim    # Highly extensible vim-based text editor
    kitty     # GPU-accelerated terminal emulator
    helix     # Modern terminal-based text editor

    # Programming Languages and Runtime
    python3   # Python programming language interpreter
    nodejs_22 # Node.js JavaScript runtime
    cargo     # Rust package manager and build tool
    cmake     # Cross-Platform Makefile generator

    # Language Servers and Development Tools
    nil                      # Nix language server
    nixfmt-rfc-style        # Nix code formatter
    prettierd               # Prettier daemon for code formatting
    kdoctor                 # KDE environment doctor/diagnostics
    rbenv                   # Ruby version manager

    argparse
    python313Packages.fontforge

    # CLI Utilities
    wget      # File download utility
    ripgrep   # Fast text search tool
    eza       # Modern replacement for ls
    bat       # Cat clone with syntax highlighting
    fzf       # Command-line fuzzy finder
    fd        # Simple, fast alternative to find
    tmux      # Terminal multiplexer
    lazygit   # Simple terminal UI for git

    # System and Security
    gnupg     # GNU Privacy Guard for encryption
    fastfetch # System information tool
    oh-my-posh # Prompt theme engine
  ];
}

================
File: modules/darwin/system.nix
================
{ ... }: { }

================
File: modules/home-manager/hosts/malenia/default.nix
================
{ ... }:

{
  imports = [ ];
}

================
File: modules/home-manager/hosts/miquella/default.nix
================
{ ... }:

{
  imports = [ ];
}

================
File: modules/home-manager/hosts/solaire/aerospace/config/aerospace.toml
================
# Place a copy of this config to ~/.aerospace.toml
# After that, you can edit ~/.aerospace.toml to your liking

# You can use it to add commands that run after login to macOS user session.
# 'start-at-login' needs to be 'true' for 'after-login-command' to work
# Available commands: https://nikitabobko.github.io/AeroSpace/commands
after-login-command = []

# You can use it to add commands that run after AeroSpace startup.
# 'after-startup-command' is run after 'after-login-command'
# Available commands : https://nikitabobko.github.io/AeroSpace/commands
after-startup-command = [
    # JankyBorders has a built-in detection of already running process,
    # so it won't be run twice on AeroSpace restart
    'exec-and-forget borders active_color=0xffe1e3e4 inactive_color=0xff494d64 width=5.0',
    'exec-and-forget sketchybar'
]

# Notify Sketchybar about workspace change
exec-on-workspace-change = ['/bin/bash', '-c',
    'sketchybar --trigger aerospace_workspace_change FOCUSED_WORKSPACE=$AEROSPACE_FOCUSED_WORKSPACE'
]


# Start AeroSpace at login
start-at-login = true

# Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable-normalization-flatten-containers = true
enable-normalization-opposite-orientation-for-nested-containers = true

# See: https://nikitabobko.github.io/AeroSpace/guide#layouts
# The 'accordion-padding' specifies the size of accordion padding
# You can set 0 to disable the padding feature
accordion-padding = 30

# Possible values: tiles|accordion
default-root-container-layout = 'tiles'

# Possible values: horizontal|vertical|auto
# 'auto' means: wide monitor (anything wider than high) gets horizontal orientation,
#               tall monitor (anything higher than wide) gets vertical orientation
default-root-container-orientation = 'auto'



# Mouse follows focus when focused monitor changes
# Drop it from your config, if you don't like this behavior
# See https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks
# See https://nikitabobko.github.io/AeroSpace/commands#move-mouse
# Fallback value (if you omit the key): on-focused-monitor-changed = []
on-focused-monitor-changed = ['move-mouse monitor-lazy-center']

# You can effectively turn off macOS "Hide application" (cmd-h) feature by toggling this flag
# Useful if you don't use this macOS feature, but accidentally hit cmd-h or cmd-alt-h key
# Also see: https://nikitabobko.github.io/AeroSpace/goodies#disable-hide-app
automatically-unhide-macos-hidden-apps = false

# Possible values: (qwerty|dvorak)
# See https://nikitabobko.github.io/AeroSpace/guide#key-mapping
[key-mapping]
    preset = 'qwerty'

# Gaps between windows (inner-*) and between monitor edges (outer-*).
# Possible values:
# - Constant:     gaps.outer.top = 8
# - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
#                 In this example, 24 is a default value when there is no match.
#                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
#                 See:
#                 https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
[gaps]
    inner.horizontal = 4
    inner.vertical =   4
    outer.left =       4
    outer.bottom =     4
    outer.top =        4
    outer.right =      4

# 'main' binding mode declaration
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
# 'main' binding mode must be always presented
# Fallback value (if you omit the key): mode.main.binding = {}
[mode.main.binding]

    # All possible keys:
    # - Letters.        a, b, c, ..., z
    # - Numbers.        0, 1, 2, ..., 9
    # - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
    # - F-keys.         f1, f2, ..., f20
    # - Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon,
    #                   backtick, leftSquareBracket, rightSquareBracket, space, enter, esc,
    #                   backspace, tab
    # - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
    #                   keypadMinus, keypadMultiply, keypadPlus
    # - Arrows.         left, down, up, right

    # All possible modifiers: cmd, alt, ctrl, shift

    # All possible commands: https://nikitabobko.github.io/AeroSpace/commands

    # See: https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget
    # You can uncomment the following lines to open up terminal with alt + enter shortcut
    # (like in i3)
    # alt-enter = '''exec-and-forget osascript -e '
    # tell application "Terminal"
    #     do script
    #     activate
    # end tell'
    # '''

    # See: https://nikitabobko.github.io/AeroSpace/commands#layout
    alt-slash = 'layout tiles horizontal vertical'
    alt-comma = 'layout accordion horizontal vertical'

    # See: https://nikitabobko.github.io/AeroSpace/commands#focus
    alt-h = 'focus left'
    alt-j = 'focus down'
    alt-k = 'focus up'
    alt-l = 'focus right'

    # See: https://nikitabobko.github.io/AeroSpace/commands#move
    alt-shift-h = 'move left'
    alt-shift-j = 'move down'
    alt-shift-k = 'move up'
    alt-shift-l = 'move right'

    # See: https://nikitabobko.github.io/AeroSpace/commands#resize
    alt-minus = 'resize smart -50'
    alt-equal = 'resize smart +50'

    # See: https://nikitabobko.github.io/AeroSpace/commands#workspace
    alt-1 = 'workspace 1'
    alt-2 = 'workspace 2'
    alt-3 = 'workspace 3'
    alt-4 = 'workspace 4'
    alt-5 = 'workspace 5'
    alt-6 = 'workspace 6'
    alt-7 = 'workspace 7'
    alt-8 = 'workspace 8'
    alt-9 = 'workspace 9'

    # See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
    alt-shift-1 = 'move-node-to-workspace 1'
    alt-shift-2 = 'move-node-to-workspace 2'
    alt-shift-3 = 'move-node-to-workspace 3'
    alt-shift-4 = 'move-node-to-workspace 4'
    alt-shift-5 = 'move-node-to-workspace 5'
    alt-shift-6 = 'move-node-to-workspace 6'
    alt-shift-7 = 'move-node-to-workspace 7'
    alt-shift-8 = 'move-node-to-workspace 8'
    alt-shift-9 = 'move-node-to-workspace 9'

    # See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
    alt-tab = 'workspace-back-and-forth'
    # See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor
    alt-shift-tab = 'move-workspace-to-monitor --wrap-around next'

    # See: https://nikitabobko.github.io/AeroSpace/commands#mode
    alt-shift-semicolon = 'mode service'

# 'service' binding mode declaration.
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
[mode.service.binding]
    esc = ['reload-config', 'mode main']
    r = ['flatten-workspace-tree', 'mode main'] # reset layout
    f = ['layout floating tiling', 'mode main'] # Toggle between floating and tiling layout
    backspace = ['close-all-windows-but-current', 'mode main']

    # sticky is not yet supported https://github.com/nikitabobko/AeroSpace/issues/2
    #s = ['layout sticky tiling', 'mode main']

    alt-shift-h = ['join-with left', 'mode main']
    alt-shift-j = ['join-with down', 'mode main']
    alt-shift-k = ['join-with up', 'mode main']
    alt-shift-l = ['join-with right', 'mode main']

    down = 'volume down'
    up = 'volume up'
    shift-down = ['volume set 0', 'mode main']

================
File: modules/home-manager/hosts/solaire/aerospace/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/aerospace".source = homeManagerConfig.linkHostApp config "aerospace";
}

================
File: modules/home-manager/hosts/solaire/borders/config/bordersrc
================
#!/bin/bash

options=(
	style=round
	width=6.0
	hidpi=off
	active_color=0xc0e2e2e3
	inactive_color=0xc02c2e34
	background_color=0x302c2e34
)

borders "${options[@]}"

================
File: modules/home-manager/hosts/solaire/ghostty/config/config
================
shell-integration = zsh
shell-integration-features = cursor,title,sudo

theme = catppuccin-mocha

font-family = "BerkeleyMonoVariable Nerd Font"
font-size = 14
font-feature = -calt
font-feature = -liga
font-feature = -dlig

adjust-cell-height = 20%
adjust-cursor-height = 20%

background-opacity = 0.7
background-blur-radius = 20

clipboard-read = allow
clipboard-write = allow
clipboard-paste-protection = false
clipboard-trim-trailing-spaces = true

macos-auto-secure-input = false
macos-secure-input-indication = true
macos-titlebar-style = tabs

config-file = keybindings

================
File: modules/home-manager/hosts/solaire/ghostty/config/keybindings
================
keybind = super+equal=increase_font_size:1
keybind = super+minus=decrease_font_size:1
keybind = super+shift+0=reset_font_size

keybind = ctrl+;>escape=reload_config
keybind = ctrl+;>e=open_config

keybind = ctrl+;>c=new_tab
keybind = ctrl+;>x=close_surface
keybind = ctrl+;>h=previous_tab
keybind = ctrl+;>l=next_tab
# keybind = ctrl+;>r=set_tab_title
# keybind = ctrl+;>w=select_tab

keybind = ctrl+;>1=goto_tab:1
keybind = ctrl+;>2=goto_tab:2
keybind = ctrl+;>3=goto_tab:3
keybind = ctrl+;>4=goto_tab:4
keybind = ctrl+;>5=goto_tab:5
keybind = ctrl+;>6=goto_tab:6
keybind = ctrl+;>7=goto_tab:7
keybind = ctrl+;>8=goto_tab:8
keybind = ctrl+;>9=goto_tab:9

# vim: set ft=conf :

================
File: modules/home-manager/hosts/solaire/ghostty/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/ghostty".source = homeManagerConfig.linkHostApp config "ghostty";
}

================
File: modules/home-manager/hosts/solaire/goku/config/karabiner.edn
================
{:des "caps_lock" :rules [[:##caps_lock :left_control nil {:alone : escape} 11}

================
File: modules/home-manager/hosts/solaire/goku/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/goku".source = homeManagerConfig.linkHostApp config "goku";
}

================
File: modules/home-manager/hosts/solaire/helix/config/config.toml
================
theme = "sonokai"

[editor]
bufferline = "always"
text-width = 79
rulers = [80]
line-number = "relative"
auto-save = true

[editor.whitespace.render]
newline = "all"
nbsp = "all"
space = "none"
tab = "none"

[editor.statusline]
left = ["mode", "spacer", "version-control" ,"spinner", "read-only-indicator", "file-modification-indicator"]
mode.normal = "NORMAL"
mode.insert = "INSERT"
mode.select = "SELECT"

[editor.indent-guides]
render = true

[editor.soft-wrap]
enable = true
wrap-at-text-width = true

[editor.cursor-shape]
insert = "bar"

[keys.select]
j = "extend_char_left"
k = "extend_visual_line_down"
l = "extend_visual_line_up"
"ö" = "extend_char_right"
"ß" = "extend_to_line_end"
"0" = "extend_to_line_start"
"C-n" = "extend_search_next"
"C-p" = "extend_search_prev"
p = "paste_clipboard_after"
P = "paste_clipboard_before"
y = "yank_to_clipboard"
Y = "yank_joined_to_clipboard"
R = "replace_selections_with_clipboard"

[keys.normal]
a = ["ensure_selections_forward", "collapse_selection", "move_char_right", "insert_mode"]
j = "move_char_left"
k = "move_visual_line_down"
l = "move_visual_line_up"
K = "join_selections"
J = "keep_selections"
X = "extend_line_above"
"ö" = "move_char_right"
"ß" = "goto_line_end"
"0" = "goto_line_start"
"C-n" = "extend_search_next"
"C-p" = "extend_search_prev"
d = "delete_selection_noyank"
c = "change_selection_noyank"
p = "paste_clipboard_after"
P = "paste_clipboard_before"
y = "yank_to_clipboard"
Y = "yank_joined_to_clipboard"
R = "replace_selections_with_clipboard"
"C-c" = ":write-quit"

[keys.normal.g]
j = "goto_line_start"
k = "move_line_down"
l = "move_line_up"
a = "code_action"
q = ":reflow"
"ö" = "goto_line_end"

[keys.normal.z]
k = "scroll_down"
l = "scroll_up"

[keys.normal.space]
c = "toggle_comments"

[keys.select.space]
c = "toggle_comments"

================
File: modules/home-manager/hosts/solaire/helix/config/external-snippets.toml
================
[[sources]]
name = "friendly-snippets"
git = "https://github.com/rafamadriz/friendly-snippets.git"

[[sources.paths]]
scope = ["latex"]
path = "snippets/latex/"

================
File: modules/home-manager/hosts/solaire/helix/config/languages.toml
================
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 20
snippets_first = true
feature_words = true
feature_snippets = true
feature_unicode_input = true
feature_paths = true

[[language]]
name = "latex"
language-servers = [ "scls", "texlab" ]

================
File: modules/home-manager/hosts/solaire/helix/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/helix".source = homeManagerConfig.linkHostApp config "helix";
}

================
File: modules/home-manager/hosts/solaire/kanata/config/personal.kbd
================
;; Caps to escape/control configuration for Kanata

(defcfg
  process-unmapped-keys yes
)

(defsrc
  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10   f11   f12
  caps a s d f j k l ;
)

(defvar
  tap-time 150
  hold-time 200
)

;; Definine two aliases, one for esc/control to other for function key
(defalias
  escctrl (tap-hold 100 100 esc lctl)
  a (tap-hold $tap-time $hold-time a lmet)
  s (tap-hold $tap-time $hold-time s lalt)
  d (tap-hold $tap-time $hold-time d lsft)
  f (tap-hold $tap-time $hold-time f lctl)
  j (tap-hold $tap-time $hold-time j rctl)
  k (tap-hold $tap-time $hold-time k rsft)
  l (tap-hold $tap-time $hold-time l ralt)
  ; (tap-hold $tap-time $hold-time ; rmet)
)

(deflayer base
  brdn     brup  _    _    _    _   prev  pp  next  mute  vold  volu
  @escctrl @a    @s   @d   @f   @j  @k    @l  @;
)

(deflayer fn
  f1       f2  f3  f4  f5  f6  f7  f8  f9   f10   f11   f12
  @escctrl _   _   _   _   _   _   _   _
)
      
;; vim:ft=lisp:

================
File: modules/home-manager/hosts/solaire/kanata/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/kanata".source = homeManagerConfig.linkHostApp config "kanata";
}

================
File: modules/home-manager/hosts/solaire/kitty/config/current-theme.conf
================
# vim:ft=kitty

## name: Tokyo Night
## license: MIT
## author: Folke Lemaitre
## upstream: https://github.com/folke/tokyonight.nvim/raw/main/extras/kitty/tokyonight_night.conf


background #1a1b26
foreground #c0caf5
selection_background #283457
selection_foreground #c0caf5
url_color #73daca
cursor #c0caf5
cursor_text_color #1a1b26

# Tabs
active_tab_background #7aa2f7
active_tab_foreground #16161e
inactive_tab_background #292e42
inactive_tab_foreground #545c7e
#tab_bar_background #15161e

# Windows
active_border_color #7aa2f7
inactive_border_color #292e42

# normal
color0 #15161e
color1 #f7768e
color2 #9ece6a
color3 #e0af68
color4 #7aa2f7
color5 #bb9af7
color6 #7dcfff
color7 #a9b1d6

# bright
color8 #414868
color9 #f7768e
color10 #9ece6a
color11 #e0af68
color12 #7aa2f7
color13 #bb9af7
color14 #7dcfff
color15 #c0caf5

# extended colors
color16 #ff9e64
color17 #db4b4b

================
File: modules/home-manager/hosts/solaire/kitty/config/kitty.conf
================
font_family      Liga SFMono Nerd Font
bold_font        Liga SFMono Nerd Font Bold
italic_font      Liga SFMono Nerd Font Regular Italic
bold_italic_font Liga SFMono Nerd Font Bold Italic
font_size 13.0
hide_window_decorations titlebar-only
window_margin_width 4
cursor_blink_interval 0
macos_quit_when_last_window_closed no
macos_colorspace default
macos_show_window_title_in window
repaint_delay 8
input_delay 1
resize_draw_strategy blank
remember_window_size no
resize_debounce_time 0.001
confirm_os_window_close -2

tab_bar_edge top
tab_bar_style powerline
tab_powerline_style slanted
tab_activity_symbol 
tab_title_max_length 30
tab_title_template "{fmt.fg.red}{bell_symbol}{fmt.fg.tab} {index}: ({tab.active_oldest_exe}) {title} {activity_symbol}"
map cmd+1 goto_tab 1
map cmd+2 goto_tab 2
map cmd+3 goto_tab 3
map cmd+4 goto_tab 4
map cmd+5 goto_tab 5
map cmd+6 goto_tab 6
map cmd+7 goto_tab 7
map cmd+8 goto_tab 8
map cmd+9 goto_tab 9
map cmd+0 goto_tab 10

map cmd+t launch --type=tab --cwd=current
map cmd+n launch --type=os-window --cwd=current 

symbol_map U+F0001-U+F1af0 Hack Nerd Font
symbol_map U+F8FF,U+100000-U+1018C7 SF Pro

# Sonokai
background #2c2e34
foreground #e1e3e4

selection_background #3d4455
selection_foreground #e1e3e4

cursor #e1e3e4
cursor_text_color background

active_tab_background #2a2f38
active_tab_foreground #e1e3e4
active_tab_font_style bold
inactive_tab_background #2a2f38
inactive_tab_foreground #e1e3e4
inactive_tab_font_style normal

# Black
color0 #181a1c
color8 #828a9a

# Red
color1 #ff6578
color9 #ff6578

# Green
color2 #9dd274
color10 #9dd274

# Yellow
color3 #eacb64
color11 #eacb64

# Blue
color4 #72cce8
color12 #72cce8

# Magenta
color5 #ba9cf3
color13 #ba9cf3

# Cyan
color6 #f69c5e
color7 #f69c5e

# White
color7 #e1e3e4
color15 #e1e3e4

# vim:ft=kitty

## name:     Catppuccin Kitty Mocha
## author:   Catppuccin Org
## license:  MIT
## upstream: https://github.com/catppuccin/kitty/blob/main/mocha.conf
## blurb:    Soothing pastel theme for the high-spirited!

# The basic colors
# foreground              #CDD6F4
# background              #1E1E2E
# selection_foreground    #1E1E2E
# selection_background    #F5E0DC

# Cursor colors
# cursor                  #F5E0DC
# cursor_text_color       #1E1E2E

# URL underline color when hovering with mouse
# url_color               #F5E0DC

# Kitty window border colors
# active_border_color     #B4BEFE
# inactive_border_color   #6C7086
# bell_border_color       #F9E2AF

# OS Window titlebar colors
wayland_titlebar_color system
macos_titlebar_color system

# Tab bar colors
# active_tab_foreground   #11111B
# active_tab_background   #A6E3A1
# inactive_tab_foreground #CDD6F4
# inactive_tab_background #3C3E4F
# tab_bar_background      #3C3E4F

# Colors for marks (marked text in the terminal)
# mark1_foreground #1E1E2E
# mark1_background #B4BEFE
# mark2_foreground #1E1E2E
# mark2_background #CBA6F7
# mark3_foreground #1E1E2E
# mark3_background #74C7EC

# The 16 terminal colors

# black
# color0 #45475A
# color8 #585B70

# red
# color1 #F38BA8
# color9 #F38BA8

# green
# color2  #A6E3A1
# color10 #A6E3A1

# yellow
# color3  #F9E2AF
# color11 #F9E2AF

# blue
# color4  #89B4FA
# color12 #89B4FA

# magenta
# color5  #F5C2E7
# color13 #F5C2E7

# cyan
# color6  #94E2D5
# color14 #94E2D5

# white
# color7  #BAC2DE
# color15 #A6ADC8

================
File: modules/home-manager/hosts/solaire/kitty/config/startup-session.conf
================
new_tab personal
cd ~
enabled_layouts tall
layout stack
launch zsh

# new_tab malenia
# enabled_layouts tall
# layout stack
# launch ssh malenia

# new_tab miquella
# enabled_layouts tall
# layout stack
# launch ssh miquella

================
File: modules/home-manager/hosts/solaire/kitty/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/kitty".source = homeManagerConfig.linkHostApp config "kitty";
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/event_providers/cpu_load/cpu_load.c
================
#include "cpu.h"
#include "../sketchybar.h"

int main (int argc, char** argv) {
  float update_freq;
  if (argc < 3 || (sscanf(argv[2], "%f", &update_freq) != 1)) {
    printf("Usage: %s \"<event-name>\" \"<event_freq>\"\n", argv[0]);
    exit(1);
  }

  alarm(0);
  struct cpu cpu;
  cpu_init(&cpu);

  // Setup the event in sketchybar
  char event_message[512];
  snprintf(event_message, 512, "--add event '%s'", argv[1]);
  sketchybar(event_message);

  char trigger_message[512];
  for (;;) {
    // Acquire new info
    cpu_update(&cpu);

    // Prepare the event message
    snprintf(trigger_message,
             512,
             "--trigger '%s' user_load='%d' sys_load='%02d' total_load='%02d'",
             argv[1],
             cpu.user_load,
             cpu.sys_load,
             cpu.total_load                                        );

    // Trigger the event
    sketchybar(trigger_message);

    // Wait
    usleep(update_freq * 1000000);
  }
  return 0;
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/event_providers/cpu_load/cpu.h
================
#include <mach/mach.h>
#include <stdbool.h>
#include <unistd.h>
#include <stdio.h>

struct cpu {
  host_t host;
  mach_msg_type_number_t count;
  host_cpu_load_info_data_t load;
  host_cpu_load_info_data_t prev_load;
  bool has_prev_load;

  int user_load;
  int sys_load;
  int total_load;
};

static inline void cpu_init(struct cpu* cpu) {
  cpu->host = mach_host_self();
  cpu->count = HOST_CPU_LOAD_INFO_COUNT;
  cpu->has_prev_load = false;
}

static inline void cpu_update(struct cpu* cpu) {
  kern_return_t error = host_statistics(cpu->host,
                                        HOST_CPU_LOAD_INFO,
                                        (host_info_t)&cpu->load,
                                        &cpu->count                );

  if (error != KERN_SUCCESS) {
    printf("Error: Could not read cpu host statistics.\n");
    return;
  }

  if (cpu->has_prev_load) {
    uint32_t delta_user = cpu->load.cpu_ticks[CPU_STATE_USER]
                          - cpu->prev_load.cpu_ticks[CPU_STATE_USER];

    uint32_t delta_system = cpu->load.cpu_ticks[CPU_STATE_SYSTEM]
                            - cpu->prev_load.cpu_ticks[CPU_STATE_SYSTEM];

    uint32_t delta_idle = cpu->load.cpu_ticks[CPU_STATE_IDLE]
                          - cpu->prev_load.cpu_ticks[CPU_STATE_IDLE];

    cpu->user_load = (double)delta_user / (double)(delta_system
                                                     + delta_user
                                                     + delta_idle) * 100.0;

    cpu->sys_load = (double)delta_system / (double)(delta_system
                                                      + delta_user
                                                      + delta_idle) * 100.0;

    cpu->total_load = cpu->user_load + cpu->sys_load;
  }

  cpu->prev_load = cpu->load;
  cpu->has_prev_load = true;
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/event_providers/cpu_load/makefile
================
bin/cpu_load: cpu_load.c cpu.h ../sketchybar.h | bin
	clang -std=c99 -O3 $< -o $@

bin:
	mkdir bin

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/event_providers/network_load/makefile
================
bin/network_load: network_load.c network.h ../sketchybar.h | bin
	clang -std=c99 -O3 $< -o $@

bin:
	mkdir bin

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/event_providers/network_load/network_load.c
================
#include <unistd.h>
#include "network.h"
#include "../sketchybar.h"

int main (int argc, char** argv) {
  float update_freq;
  if (argc < 4 || (sscanf(argv[3], "%f", &update_freq) != 1)) {
    printf("Usage: %s \"<interface>\" \"<event-name>\" \"<event_freq>\"\n", argv[0]);
    exit(1);
  }

  alarm(0);
  // Setup the event in sketchybar
  char event_message[512];
  snprintf(event_message, 512, "--add event '%s'", argv[2]);
  sketchybar(event_message);

  struct network network;
  network_init(&network, argv[1]);
  char trigger_message[512];
  for (;;) {
    // Acquire new info
    network_update(&network);

    // Prepare the event message
    snprintf(trigger_message,
             512,
             "--trigger '%s' upload='%03d%s' download='%03d%s'",
             argv[2],
             network.up,
             unit_str[network.up_unit],
             network.down,
             unit_str[network.down_unit]);

    // Trigger the event
    sketchybar(trigger_message);

    // Wait
    usleep(update_freq * 1000000);
  }
  return 0;
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/event_providers/network_load/network.h
================
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <net/if.h>
#include <net/if_mib.h>
#include <sys/select.h>
#include <sys/sysctl.h>

static char unit_str[3][6] = { { " Bps" }, { "KBps" }, { "MBps" }, };

enum unit {
  UNIT_BPS,
  UNIT_KBPS,
  UNIT_MBPS
};
struct network {
  uint32_t row;
  struct ifmibdata data;
  struct timeval tv_nm1, tv_n, tv_delta;

  int up;
  int down;
  enum unit up_unit, down_unit;
};

static inline void ifdata(uint32_t net_row, struct ifmibdata* data) {
	static size_t size = sizeof(struct ifmibdata);
  static int32_t data_option[] = { CTL_NET, PF_LINK, NETLINK_GENERIC, IFMIB_IFDATA, 0, IFDATA_GENERAL };
  data_option[4] = net_row;
  sysctl(data_option, 6, data, &size, NULL, 0);
}

static inline void network_init(struct network* net, char* ifname) {
  memset(net, 0, sizeof(struct network));

  static int count_option[] = { CTL_NET, PF_LINK, NETLINK_GENERIC, IFMIB_SYSTEM, IFMIB_IFCOUNT };
  uint32_t interface_count = 0;
  size_t size = sizeof(uint32_t);
  sysctl(count_option, 5, &interface_count, &size, NULL, 0);

  for (int i = 0; i < interface_count; i++) {
    ifdata(i, &net->data);
    if (strcmp(net->data.ifmd_name, ifname) == 0) {
      net->row = i;
      break;
    }
  }
}

static inline void network_update(struct network* net) {
  gettimeofday(&net->tv_n, NULL);
  timersub(&net->tv_n, &net->tv_nm1, &net->tv_delta);
  net->tv_nm1 = net->tv_n;

  uint64_t ibytes_nm1 = net->data.ifmd_data.ifi_ibytes;
  uint64_t obytes_nm1 = net->data.ifmd_data.ifi_obytes;
  ifdata(net->row, &net->data);

  double time_scale = (net->tv_delta.tv_sec + 1e-6*net->tv_delta.tv_usec);
  if (time_scale < 1e-6 || time_scale > 1e2) return;
  double delta_ibytes = (double)(net->data.ifmd_data.ifi_ibytes - ibytes_nm1)
                        / time_scale;
  double delta_obytes = (double)(net->data.ifmd_data.ifi_obytes - obytes_nm1)
                        / time_scale;

  double exponent_ibytes = log10(delta_ibytes);
  double exponent_obytes = log10(delta_obytes);

  if (exponent_ibytes < 3) {
    net->down_unit = UNIT_BPS;
    net->down = delta_ibytes;
  } else if (exponent_ibytes < 6) {
    net->down_unit = UNIT_KBPS;
    net->down = delta_ibytes / 1000.0;
  } else if (exponent_ibytes < 9) {
    net->down_unit = UNIT_MBPS;
    net->down = delta_ibytes / 1000000.0;
  }

  if (exponent_obytes < 3) {
    net->up_unit = UNIT_BPS;
    net->up = delta_obytes;
  } else if (exponent_obytes < 6) {
    net->up_unit = UNIT_KBPS;
    net->up = delta_obytes / 1000.0;
  } else if (exponent_obytes < 9) {
    net->up_unit = UNIT_MBPS;
    net->up = delta_obytes / 1000000.0;
  }
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/event_providers/makefile
================
all:
	(cd cpu_load && $(MAKE))
	(cd network_load && $(MAKE))

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/event_providers/sketchybar.h
================
#pragma once

#include <mach/arm/kern_return.h>
#include <mach/mach.h>
#include <mach/mach_port.h>
#include <mach/message.h>
#include <bootstrap.h>
#include <stdlib.h>
#include <pthread.h>
#include <stdio.h>

typedef char* env;

#define MACH_HANDLER(name) void name(env env)
typedef MACH_HANDLER(mach_handler);

struct mach_message {
  mach_msg_header_t header;
  mach_msg_size_t msgh_descriptor_count;
  mach_msg_ool_descriptor_t descriptor;
};

struct mach_buffer {
  struct mach_message message;
  mach_msg_trailer_t trailer;
};

static mach_port_t g_mach_port = 0;

static inline mach_port_t mach_get_bs_port() {
  mach_port_name_t task = mach_task_self();

  mach_port_t bs_port;
  if (task_get_special_port(task,
                            TASK_BOOTSTRAP_PORT,
                            &bs_port            ) != KERN_SUCCESS) {
    return 0;
  }

  char* name = getenv("BAR_NAME");
  if (!name) name = "sketchybar";
  uint32_t lookup_len = 16 + strlen(name);

  char buffer[lookup_len];
  snprintf(buffer, lookup_len, "git.felix.%s", name);

  mach_port_t port;
  if (bootstrap_look_up(bs_port, buffer, &port) != KERN_SUCCESS) return 0;
  return port;
}

static inline bool mach_send_message(mach_port_t port, char* message, uint32_t len) {
  if (!message || !port) {
    return false;
  }

  struct mach_message msg = { 0 };
  msg.header.msgh_remote_port = port;
  msg.header.msgh_local_port = 0;
  msg.header.msgh_id = 0;
  msg.header.msgh_bits = MACH_MSGH_BITS_SET(MACH_MSG_TYPE_COPY_SEND,
                                            MACH_MSG_TYPE_MAKE_SEND,
                                            0,
                                            MACH_MSGH_BITS_COMPLEX       );

  msg.header.msgh_size = sizeof(struct mach_message);
  msg.msgh_descriptor_count = 1;
  msg.descriptor.address = message;
  msg.descriptor.size = len * sizeof(char);
  msg.descriptor.copy = MACH_MSG_VIRTUAL_COPY;
  msg.descriptor.deallocate = false;
  msg.descriptor.type = MACH_MSG_OOL_DESCRIPTOR;

  kern_return_t err = mach_msg(&msg.header,
                               MACH_SEND_MSG,
                               sizeof(struct mach_message),
                               0,
                               MACH_PORT_NULL,
                               MACH_MSG_TIMEOUT_NONE,
                               MACH_PORT_NULL              );

  return err == KERN_SUCCESS;
}

static inline uint32_t format_message(char* message, char* formatted_message) {
  // This is not actually robust, switch to stack based messaging.
  char outer_quote = 0;
  uint32_t caret = 0;
  uint32_t message_length = strlen(message) + 1;
  for (int i = 0; i < message_length; ++i) {
    if (message[i] == '"' || message[i] == '\'') {
      if (outer_quote && outer_quote == message[i]) outer_quote = 0;
      else if (!outer_quote) outer_quote = message[i];
      continue;
    }
    formatted_message[caret] = message[i];
    if (message[i] == ' ' && !outer_quote) formatted_message[caret] = '\0';
    caret++;
  }

  if (caret > 0 && formatted_message[caret] == '\0'
      && formatted_message[caret - 1] == '\0') {
    caret--;
  }
  formatted_message[caret] = '\0';
  return caret + 1;
}

static inline void sketchybar(char* message) {
  char formatted_message[strlen(message) + 2];
  uint32_t length = format_message(message, formatted_message);
  if (!length) return;

  if (!g_mach_port) g_mach_port = mach_get_bs_port();
  if (!mach_send_message(g_mach_port, formatted_message, length)) {
    g_mach_port = mach_get_bs_port();
    if (!mach_send_message(g_mach_port, formatted_message, length)) {
      // No sketchybar instance running, exit.
      exit(0);
    }
  }
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/menus/makefile
================
bin/menus: menus.c | bin
	clang -std=c99 -O3 -F/System/Library/PrivateFrameworks/ -framework Carbon -framework SkyLight $< -o $@

bin:
	mkdir bin

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/menus/menus.c
================
#include <Carbon/Carbon.h>

void ax_init() {
  const void *keys[] = { kAXTrustedCheckOptionPrompt };
  const void *values[] = { kCFBooleanTrue };

  CFDictionaryRef options;
  options = CFDictionaryCreate(kCFAllocatorDefault,
                               keys,
                               values,
                               sizeof(keys) / sizeof(*keys),
                               &kCFCopyStringDictionaryKeyCallBacks,
                               &kCFTypeDictionaryValueCallBacks     );

  bool trusted = AXIsProcessTrustedWithOptions(options);
  CFRelease(options);
  if (!trusted) exit(1);
}

void ax_perform_click(AXUIElementRef element) {
  if (!element) return;
  AXUIElementPerformAction(element, kAXCancelAction);
  usleep(150000);
  AXUIElementPerformAction(element, kAXPressAction);
}

CFStringRef ax_get_title(AXUIElementRef element) {
  CFTypeRef title = NULL;
  AXError error = AXUIElementCopyAttributeValue(element,
                                                kAXTitleAttribute,
                                                &title            );

  if (error != kAXErrorSuccess) return NULL;
  return title;
}

void ax_select_menu_option(AXUIElementRef app, int id) {
  AXUIElementRef menubars_ref = NULL;
  CFArrayRef children_ref = NULL;

  AXError error = AXUIElementCopyAttributeValue(app,
                                                kAXMenuBarAttribute,
                                                (CFTypeRef*)&menubars_ref);
  if (error == kAXErrorSuccess) {
    error = AXUIElementCopyAttributeValue(menubars_ref,
                                          kAXVisibleChildrenAttribute,
                                          (CFTypeRef*)&children_ref   );

    if (error == kAXErrorSuccess) {
      uint32_t count = CFArrayGetCount(children_ref);
      if (id < count) {
        AXUIElementRef item = CFArrayGetValueAtIndex(children_ref, id);
        ax_perform_click(item);
      }
      if (children_ref) CFRelease(children_ref);
    }
    if (menubars_ref) CFRelease(menubars_ref);
  }
}

void ax_print_menu_options(AXUIElementRef app) {
  AXUIElementRef menubars_ref = NULL;
  CFTypeRef menubar = NULL;
  CFArrayRef children_ref = NULL;

  AXError error = AXUIElementCopyAttributeValue(app,
                                                kAXMenuBarAttribute,
                                                (CFTypeRef*)&menubars_ref);
  if (error == kAXErrorSuccess) {
    error = AXUIElementCopyAttributeValue(menubars_ref,
                                          kAXVisibleChildrenAttribute,
                                          (CFTypeRef*)&children_ref   );

    if (error == kAXErrorSuccess) {
      uint32_t count = CFArrayGetCount(children_ref);

      for (int i = 1; i < count; i++) {
        AXUIElementRef item = CFArrayGetValueAtIndex(children_ref, i);
        CFTypeRef title = ax_get_title(item);

        if (title) {
          uint32_t buffer_len = 2*CFStringGetLength(title);
          char buffer[2*CFStringGetLength(title)];
          CFStringGetCString(title, buffer, buffer_len, kCFStringEncodingUTF8);
          printf("%s\n", buffer);
          CFRelease(title);
        }
      }
    }
    if (menubars_ref) CFRelease(menubars_ref);
    if (children_ref) CFRelease(children_ref);
  }
}

AXUIElementRef ax_get_extra_menu_item(char* alias) {
  pid_t pid = 0;
  CGRect bounds = CGRectNull;
  CFArrayRef window_list = CGWindowListCopyWindowInfo(kCGWindowListOptionAll,
                                                      kCGNullWindowID        );
  char owner_buffer[256];
  char name_buffer[256];
  char buffer[512];
  int window_count = CFArrayGetCount(window_list);
  for (int i = 0; i < window_count; ++i) {
    CFDictionaryRef dictionary = CFArrayGetValueAtIndex(window_list, i);
    if (!dictionary) continue;

    CFStringRef owner_ref = CFDictionaryGetValue(dictionary,
                                                 kCGWindowOwnerName);

    CFNumberRef owner_pid_ref = CFDictionaryGetValue(dictionary,
                                                     kCGWindowOwnerPID);

    CFStringRef name_ref = CFDictionaryGetValue(dictionary, kCGWindowName);
    CFNumberRef layer_ref = CFDictionaryGetValue(dictionary, kCGWindowLayer);
    CFDictionaryRef bounds_ref = CFDictionaryGetValue(dictionary,
                                                      kCGWindowBounds);

    if (!name_ref || !owner_ref || !owner_pid_ref || !layer_ref || !bounds_ref)
      continue;

    long long int layer = 0;
    CFNumberGetValue(layer_ref, CFNumberGetType(layer_ref), &layer);
    uint64_t owner_pid = 0;
    CFNumberGetValue(owner_pid_ref,
                     CFNumberGetType(owner_pid_ref),
                     &owner_pid                     );

    if (layer != 0x19) continue;
    bounds = CGRectNull;
    if (!CGRectMakeWithDictionaryRepresentation(bounds_ref, &bounds)) continue;
    CFStringGetCString(owner_ref,
                       owner_buffer,
                       sizeof(owner_buffer),
                       kCFStringEncodingUTF8);

    CFStringGetCString(name_ref,
                       name_buffer,
                       sizeof(name_buffer),
                       kCFStringEncodingUTF8);
    snprintf(buffer, sizeof(buffer), "%s,%s", owner_buffer, name_buffer);

    if (strcmp(buffer, alias) == 0) {
      pid = owner_pid;
      break;
    }
  }
  CFRelease(window_list);
  if (!pid) return NULL;

  AXUIElementRef app = AXUIElementCreateApplication(pid);
  if (!app) return NULL;
  AXUIElementRef result = NULL;
  CFTypeRef extras = NULL;
  CFArrayRef children_ref = NULL;
  AXError error = AXUIElementCopyAttributeValue(app,
                                                kAXExtrasMenuBarAttribute,
                                                &extras                   );
  if (error == kAXErrorSuccess) {
    error = AXUIElementCopyAttributeValue(extras,
                                          kAXVisibleChildrenAttribute,
                                          (CFTypeRef*)&children_ref   );

    if (error == kAXErrorSuccess) {
      uint32_t count = CFArrayGetCount(children_ref);
      for (uint32_t i = 0; i < count; i++) {
        AXUIElementRef item = CFArrayGetValueAtIndex(children_ref, i);
        CFTypeRef position_ref = NULL;
        CFTypeRef size_ref = NULL;
        AXUIElementCopyAttributeValue(item, kAXPositionAttribute,
                                            &position_ref        );
        AXUIElementCopyAttributeValue(item, kAXSizeAttribute,
                                            &size_ref        );
        if (!position_ref || !size_ref) continue;

        CGPoint position = CGPointZero;
        AXValueGetValue(position_ref, kAXValueCGPointType, &position);
        CGSize size = CGSizeZero;
        AXValueGetValue(size_ref, kAXValueCGSizeType, &size);
        CFRelease(position_ref);
        CFRelease(size_ref);
        // The offset is exactly 8 on macOS Sonoma...
        // printf("%f %f\n", position.x, bounds.origin.x);
        if (error == kAXErrorSuccess
            && fabs(position.x - bounds.origin.x) <= 10) {
          result = item;
          break;
        }
      }
    }
  }

  CFRelease(app);
  return result;
}

extern int SLSMainConnectionID();
extern void SLSSetMenuBarVisibilityOverrideOnDisplay(int cid, int did, bool enabled);
extern void SLSSetMenuBarVisibilityOverrideOnDisplay(int cid, int did, bool enabled);
extern void SLSSetMenuBarInsetAndAlpha(int cid, double u1, double u2, float alpha);
void ax_select_menu_extra(char* alias) {
  AXUIElementRef item = ax_get_extra_menu_item(alias);
  if (!item) return;
  SLSSetMenuBarInsetAndAlpha(SLSMainConnectionID(), 0, 1, 0.0);
  SLSSetMenuBarVisibilityOverrideOnDisplay(SLSMainConnectionID(), 0, true);
  SLSSetMenuBarInsetAndAlpha(SLSMainConnectionID(), 0, 1, 0.0);
  ax_perform_click(item);
  SLSSetMenuBarVisibilityOverrideOnDisplay(SLSMainConnectionID(), 0, false);
  SLSSetMenuBarInsetAndAlpha(SLSMainConnectionID(), 0, 1, 1.0);
  CFRelease(item);
}

extern void _SLPSGetFrontProcess(ProcessSerialNumber* psn);
extern void SLSGetConnectionIDForPSN(int cid, ProcessSerialNumber* psn, int* cid_out);
extern void SLSConnectionGetPID(int cid, pid_t* pid_out);
AXUIElementRef ax_get_front_app() {
  ProcessSerialNumber psn;
  _SLPSGetFrontProcess(&psn);
  int target_cid;
  SLSGetConnectionIDForPSN(SLSMainConnectionID(), &psn, &target_cid);

  pid_t pid;
  SLSConnectionGetPID(target_cid, &pid);
  return AXUIElementCreateApplication(pid);
}

int main (int argc, char **argv) {
  if (argc == 1) {
    printf("Usage: %s [-l | -s id/alias ]\n", argv[0]);
    exit(0);
  }
  ax_init();
  if (strcmp(argv[1], "-l") == 0) {
    AXUIElementRef app = ax_get_front_app();
    if (!app) return 1;
    ax_print_menu_options(app);
    CFRelease(app);
  } else if (argc == 3 && strcmp(argv[1], "-s") == 0) {
    int id = 0;
    if (sscanf(argv[2], "%d", &id) == 1) {
      AXUIElementRef app = ax_get_front_app();
      if (!app) return 1;
      ax_select_menu_option(app, id);
      CFRelease(app);
    } else ax_select_menu_extra(argv[2]);
  }
  return 0;
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/.gitignore
================
bin

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/app_icons.lua
================
return {
	["Live"] = ":ableton:",
	["Adobe Bridge"] = ":adobe_bridge:",
	["Affinity Designer"] = ":affinity_designer:",
	["Affinity Designer 2"] = ":affinity_designer_2:",
	["Affinity Photo"] = ":affinity_photo:",
	["Affinity Photo 2"] = ":affinity_photo_2:",
	["Affinity Publisher"] = ":affinity_publisher:",
	["Affinity Publisher 2"] = ":affinity_publisher_2:",
	["Airmail"] = ":airmail:",
	["Alacritty"] = ":alacritty:",
	["Alfred"] = ":alfred:",
	["Android Messages"] = ":android_messages:",
	["Android Studio"] = ":android_studio:",
	["Anki"] = ":anki:",
	["Anytype"] = ":anytype:",
	["App Eraser"] = ":app_eraser:",
	["App Store"] = ":app_store:",
	["Arc"] = ":arc:",
	["Arduino"] = ":arduino:",
	["Arduino IDE"] = ":arduino:",
	["Atom"] = ":atom:",
	["Audacity"] = ":audacity:",
	["Bambu Studio"] = ":bambu_studio:",
	["MoneyMoney"] = ":bank:",
	["Battle.net"] = ":battle_net:",
	["Bear"] = ":bear:",
	["BetterTouchTool"] = ":bettertouchtool:",
	["Bilibili"] = ":bilibili:",
	["哔哩哔哩"] = ":bilibili:",
	["Bitwarden"] = ":bit_warden:",
	["Blender"] = ":blender:",
	["BluOS Controller"] = ":bluos_controller:",
	["Calibre"] = ":book:",
	["Brave Browser"] = ":brave_browser:",
	["BusyCal"] = ":busycal:",
	["Calculator"] = ":calculator:",
	["Calculette"] = ":calculator:",
	["Calendar"] = ":calendar:",
	["日历"] = ":calendar:",
	["Fantastical"] = ":calendar:",
	["Cron"] = ":calendar:",
	["Amie"] = ":calendar:",
	["Calendrier"] = ":calendar:",
	["Notion Calendar"] = ":calendar:",
	["Caprine"] = ":caprine:",
	["Amazon Chime"] = ":chime:",
	["Citrix Workspace"] = ":citrix:",
	["Citrix Viewer"] = ":citrix:",
	["Claude"] = ":claude:",
	["ClickUp"] = ":click_up:",
	["Code"] = ":code:",
	["Code - Insiders"] = ":code:",
	["Cold Turkey Blocker"] = ":cold_turkey_blocker:",
	["Color Picker"] = ":color_picker:",
	["数码测色计"] = ":color_picker:",
	["Copilot"] = ":copilot:",
	["CotEditor"] = ":coteditor:",
	["Creative Cloud"] = ":creative_cloud:",
	["Cursor"] = ":cursor:",
	["Cypress"] = ":cypress:",
	["DataGrip"] = ":datagrip:",
	["DataSpell"] = ":dataspell:",
	["DaVinci Resolve"] = ":davinciresolve:",
	["Deezer"] = ":deezer:",
	["Default"] = ":default:",
	["CleanMyMac X"] = ":desktop:",
	["DEVONthink 3"] = ":devonthink3:",
	["DingTalk"] = ":dingtalk:",
	["钉钉"] = ":dingtalk:",
	["阿里钉"] = ":dingtalk:",
	["Discord"] = ":discord:",
	["Discord Canary"] = ":discord:",
	["Discord PTB"] = ":discord:",
	["Docker"] = ":docker:",
	["Docker Desktop"] = ":docker:",
	["GrandTotal"] = ":dollar:",
	["Receipts"] = ":dollar:",
	["Double Commander"] = ":doublecmd:",
	["Drafts"] = ":drafts:",
	["draw.io"] = ":draw_io:",
	["Dropbox"] = ":dropbox:",
	["Element"] = ":element:",
	["Emacs"] = ":emacs:",
	["Evernote Legacy"] = ":evernote_legacy:",
	["FaceTime"] = ":face_time:",
	["FaceTime 通话"] = ":face_time:",
	["Figma"] = ":figma:",
	["Final Cut Pro"] = ":final_cut_pro:",
	["Finder"] = ":finder:",
	["访达"] = ":finder:",
	["Firefox"] = ":firefox:",
	["Firefox Developer Edition"] = ":firefox_developer_edition:",
	["Firefox Nightly"] = ":firefox_developer_edition:",
	["Folx"] = ":folx:",
	["Fork"] = ":fork:",
	["FreeTube"] = ":freetube:",
	["Fusion"] = ":fusion:",
	["System Preferences"] = ":gear:",
	["System Settings"] = ":gear:",
	["系统设置"] = ":gear:",
	["Réglages Système"] = ":gear:",
	["GitHub Desktop"] = ":git_hub:",
	["Godot"] = ":godot:",
	["GoLand"] = ":goland:",
	["Chromium"] = ":google_chrome:",
	["Google Chrome"] = ":google_chrome:",
	["Google Chrome Canary"] = ":google_chrome:",
	["Grammarly Editor"] = ":grammarly:",
	["Home Assistant"] = ":home_assistant:",
	["Hyper"] = ":hyper:",
	["IntelliJ IDEA"] = ":idea:",
	["IINA"] = ":iina:",
	["Adobe Illustrator"] = ":illustrator:",
	["Illustrator"] = ":illustrator:",
	["Adobe InDesign"] = ":indesign:",
	["InDesign"] = ":indesign:",
	["Inkdrop"] = ":inkdrop:",
	["Inkscape"] = ":inkscape:",
	["Insomnia"] = ":insomnia:",
	["Iris"] = ":iris:",
	["iTerm"] = ":iterm:",
	["iTerm2"] = ":iterm:",
	["Jellyfin Media Player"] = ":jellyfin:",
	["Joplin"] = ":joplin:",
	["카카오톡"] = ":kakaotalk:",
	["KakaoTalk"] = ":kakaotalk:",
	["Kakoune"] = ":kakoune:",
	["KeePassXC"] = ":kee_pass_x_c:",
	["Keyboard Maestro"] = ":keyboard_maestro:",
	["Keynote"] = ":keynote:",
	["Keynote 讲演"] = ":keynote:",
	["kitty"] = ":kitty:",
	["League of Legends"] = ":league_of_legends:",
	["LibreWolf"] = ":libre_wolf:",
	["Adobe Lightroom"] = ":lightroom:",
	["Lightroom Classic"] = ":lightroomclassic:",
	["LINE"] = ":line:",
	["Linear"] = ":linear:",
	["LM Studio"] = ":lm_studio:",
	["LocalSend"] = ":localsend:",
	["Logic Pro"] = ":logicpro:",
	["Logseq"] = ":logseq:",
	["Canary Mail"] = ":mail:",
	["HEY"] = ":mail:",
	["Mail"] = ":mail:",
	["Mailspring"] = ":mail:",
	["MailMate"] = ":mail:",
	["Superhuman"] = ":mail:",
	["Spark"] = ":mail:",
	["邮件"] = ":mail:",
	["MAMP"] = ":mamp:",
	["MAMP PRO"] = ":mamp:",
	["Maps"] = ":maps:",
	["Google Maps"] = ":maps:",
	["Marta"] = ":marta:",
	["Matlab"] = ":matlab:",
	["Mattermost"] = ":mattermost:",
	["Messages"] = ":messages:",
	["信息"] = ":messages:",
	["Nachrichten"] = ":messages:",
	["Messenger"] = ":messenger:",
	["Microsoft Edge"] = ":microsoft_edge:",
	["Microsoft Excel"] = ":microsoft_excel:",
	["Microsoft Outlook"] = ":microsoft_outlook:",
	["Microsoft PowerPoint"] = ":microsoft_power_point:",
	["Microsoft Remote Desktop"] = ":microsoft_remote_desktop:",
	["Microsoft Teams"] = ":microsoft_teams:",
	["Microsoft Teams (work or school)"] = ":microsoft_teams:",
	["Microsoft Word"] = ":microsoft_word:",
	["Min"] = ":min_browser:",
	["Miro"] = ":miro:",
	["MongoDB Compass"] = ":mongodb:",
	["mpv"] = ":mpv:",
	["Mullvad Browser"] = ":mullvad_browser:",
	["Music"] = ":music:",
	["音乐"] = ":music:",
	["Musique"] = ":music:",
	["Neovide"] = ":neovide:",
	["neovide"] = ":neovide:",
	["Neovim"] = ":neovim:",
	["neovim"] = ":neovim:",
	["nvim"] = ":neovim:",
	["网易云音乐"] = ":netease_music:",
	["Noodl"] = ":noodl:",
	["Noodl Editor"] = ":noodl:",
	["NordVPN"] = ":nord_vpn:",
	["Notability"] = ":notability:",
	["Notes"] = ":notes:",
	["备忘录"] = ":notes:",
	["Notion"] = ":notion:",
	["Nova"] = ":nova:",
	["Numbers"] = ":numbers:",
	["Numbers 表格"] = ":numbers:",
	["Obsidian"] = ":obsidian:",
	["OBS"] = ":obsstudio:",
	["OmniFocus"] = ":omni_focus:",
	["1Password"] = ":one_password:",
	["Open Video Downloader"] = ":open_video_downloader:",
	["ChatGPT"] = ":openai:",
	["OpenVPN Connect"] = ":openvpn_connect:",
	["Opera"] = ":opera:",
	["OrbStack"] = ":orbstack:",
	["OrcaSlicer"] = ":orcaslicer:",
	["Orion"] = ":orion:",
	["Orion RC"] = ":orion:",
	["Pages"] = ":pages:",
	["Pages 文稿"] = ":pages:",
	["Parallels Desktop"] = ":parallels:",
	["Parsec"] = ":parsec:",
	["Preview"] = ":pdf:",
	["预览"] = ":pdf:",
	["Skim"] = ":pdf:",
	["zathura"] = ":pdf:",
	["Aperçu"] = ":pdf:",
	["PDF Expert"] = ":pdf_expert:",
	["Pearcleaner"] = ":pearcleaner:",
	["Phoenix Slides"] = ":phoenix_slides:",
	["Adobe Photoshop"] = ":photoshop:",
	["PhpStorm"] = ":php_storm:",
	["Pi-hole Remote"] = ":pihole:",
	["Pine"] = ":pine:",
	["Plex"] = ":plex:",
	["Plexamp"] = ":plexamp:",
	["Podcasts"] = ":podcasts:",
	["播客"] = ":podcasts:",
	["PomoDone App"] = ":pomodone:",
	["Postman"] = ":postman:",
	["Proton Mail"] = ":proton_mail:",
	["Proton Mail Bridge"] = ":proton_mail:",
	["PrusaSlicer"] = ":prusaslicer:",
	["SuperSlicer"] = ":prusaslicer:",
	["PyCharm"] = ":pycharm:",
	["QQ"] = ":qq:",
	["QQ音乐"] = ":qqmusic:",
	["QQMusic"] = ":qqmusic:",
	["Quantumult X"] = ":quantumult_x:",
	["qutebrowser"] = ":qute_browser:",
	["Raindrop.io"] = ":raindrop_io:",
	["Reeder"] = ":reeder5:",
	["Reminders"] = ":reminders:",
	["提醒事项"] = ":reminders:",
	["Rappels"] = ":reminders:",
	["Replit"] = ":replit:",
	["Rider"] = ":rider:",
	["JetBrains Rider"] = ":rider:",
	["Rio"] = ":rio:",
	["Royal TSX"] = ":royaltsx:",
	["Safari"] = ":safari:",
	["Safari浏览器"] = ":safari:",
	["Safari Technology Preview"] = ":safari:",
	["Sequel Ace"] = ":sequel_ace:",
	["Sequel Pro"] = ":sequel_pro:",
	["Setapp"] = ":setapp:",
	["SF Symbols"] = ":sf_symbols:",
	["Signal"] = ":signal:",
	["sioyek"] = ":sioyek:",
	["Sketch"] = ":sketch:",
	["Skype"] = ":skype:",
	["Slack"] = ":slack:",
	["Spark Desktop"] = ":spark:",
	["Spotify"] = ":spotify:",
	["Spotlight"] = ":spotlight:",
	["Sublime Text"] = ":sublime_text:",
	["superProductivity"] = ":superproductivity:",
	["Tana"] = ":tana:",
	["TeamSpeak 3"] = ":team_speak:",
	["Telegram"] = ":telegram:",
	["Terminal"] = ":terminal:",
	["终端"] = ":terminal:",
	["Typora"] = ":text:",
	["Microsoft To Do"] = ":things:",
	["Things"] = ":things:",
	["Thunderbird"] = ":thunderbird:",
	["TickTick"] = ":tick_tick:",
	["TIDAL"] = ":tidal:",
	["Tiny RDM"] = ":tinyrdm:",
	["Todoist"] = ":todoist:",
	["Toggl Track"] = ":toggl_track:",
	["Tor Browser"] = ":tor_browser:",
	["Tower"] = ":tower:",
	["Transmit"] = ":transmit:",
	["Trello"] = ":trello:",
	["Tweetbot"] = ":twitter:",
	["Twitter"] = ":twitter:",
	["UTM"] = ":utm:",
	["MacVim"] = ":vim:",
	["Vim"] = ":vim:",
	["VimR"] = ":vim:",
	["Vivaldi"] = ":vivaldi:",
	["VLC"] = ":vlc:",
	["VMware Fusion"] = ":vmware_fusion:",
	["VSCodium"] = ":vscodium:",
	["Warp"] = ":warp:",
	["WebStorm"] = ":web_storm:",
	["微信"] = ":wechat:",
	["WeChat"] = ":wechat:",
	["企业微信"] = ":wecom:",
	["WeCom"] = ":wecom:",
	["WezTerm"] = ":wezterm:",
	["WhatsApp"] = ":whats_app:",
	["‎WhatsApp"] = ":whats_app:",
	["Xcode"] = ":xcode:",
	["Yandex Music"] = ":yandex_music:",
	["Yuque"] = ":yuque:",
	["语雀"] = ":yuque:",
	["Zed"] = ":zed:",
	["Zen Browser"] = ":zen_browser:",
	["Zeplin"] = ":zeplin:",
	["zoom.us"] = ":zoom:",
	["Zotero"] = ":zotero:",
	["Zulip"] = ":zulip:",
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/default_font.lua
================
return {
  text = "SF Pro", -- Used for text
  numbers = "SF Mono", -- Used for numbers

  -- Unified font style map
  style_map = {
    ["Regular"] = "Regular",
    ["Semibold"] = "Semibold",
    ["Bold"] = "Bold",
    ["Heavy"] = "Heavy",
    ["Black"] = "Black",
  }
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/init.lua
================
-- Add the sketchybar module to the package cpath
package.cpath = package.cpath .. ";/Users/" .. os.getenv("USER") .. "/.local/share/sketchybar_lua/?.so"

os.execute("(cd helpers && make)")

================
File: modules/home-manager/hosts/solaire/sketchybar/config/helpers/makefile
================
all:
	(cd event_providers && $(MAKE)) >/dev/null
	(cd menus && $(MAKE)) >/dev/null

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/widgets/battery.lua
================
local icons = require("icons")
local colors = require("colors")
local settings = require("settings")

local battery = sbar.add("item", "widgets.battery", {
  position = "right",
  icon = {
    font = {
      style = settings.font.style_map["Regular"],
      size = 19.0,
    }
  },
  label = { font = { family = settings.font.numbers } },
  update_freq = 180,
  popup = { align = "center" }
})

local remaining_time = sbar.add("item", {
  position = "popup." .. battery.name,
  icon = {
    string = "Time remaining:",
    width = 100,
    align = "left"
  },
  label = {
    string = "??:??h",
    width = 100,
    align = "right"
  },
})


battery:subscribe({"routine", "power_source_change", "system_woke"}, function()
  sbar.exec("pmset -g batt", function(batt_info)
    local icon = "!"
    local label = "?"

    local found, _, charge = batt_info:find("(%d+)%%")
    if found then
      charge = tonumber(charge)
      label = charge .. "%"
    end

    local color = colors.green
    local charging, _, _ = batt_info:find("AC Power")

    if charging then
      icon = icons.battery.charging
    else
      if found and charge > 80 then
        icon = icons.battery._100
      elseif found and charge > 60 then
        icon = icons.battery._75
      elseif found and charge > 40 then
        icon = icons.battery._50
      elseif found and charge > 20 then
        icon = icons.battery._25
        color = colors.orange
      else
        icon = icons.battery._0
        color = colors.red
      end
    end

    local lead = ""
    if found and charge < 10 then
      lead = "0"
    end

    battery:set({
      icon = {
        string = icon,
        color = color
      },
      label = { string = lead .. label },
    })
  end)
end)

battery:subscribe("mouse.clicked", function(env)
  local drawing = battery:query().popup.drawing
  battery:set( { popup = { drawing = "toggle" } })

  if drawing == "off" then
    sbar.exec("pmset -g batt", function(batt_info)
      local found, _, remaining = batt_info:find(" (%d+:%d+) remaining")
      local label = found and remaining .. "h" or "No estimate"
      remaining_time:set( { label = label })
    end)
  end
end)

sbar.add("bracket", "widgets.battery.bracket", { battery.name }, {
  background = { color = colors.bg1 }
})

sbar.add("item", "widgets.battery.padding", {
  position = "right",
  width = settings.group_paddings
})

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/widgets/cpu.lua
================
local icons = require("icons")
local colors = require("colors")
local settings = require("settings")

-- Execute the event provider binary which provides the event "cpu_update" for
-- the cpu load data, which is fired every 2.0 seconds.
sbar.exec("killall cpu_load >/dev/null; $CONFIG_DIR/helpers/event_providers/cpu_load/bin/cpu_load cpu_update 2.0")

local cpu = sbar.add("graph", "widgets.cpu" , 42, {
  position = "right",
  graph = { color = colors.blue },
  background = {
    height = 22,
    color = { alpha = 0 },
    border_color = { alpha = 0 },
    drawing = true,
  },
  icon = { string = icons.cpu },
  label = {
    string = "cpu ??%",
    font = {
      family = settings.font.numbers,
      style = settings.font.style_map["Bold"],
      size = 9.0,
    },
    align = "right",
    padding_right = 0,
    width = 0,
    y_offset = 4
  },
  padding_right = settings.paddings + 6
})

cpu:subscribe("cpu_update", function(env)
  -- Also available: env.user_load, env.sys_load
  local load = tonumber(env.total_load)
  cpu:push({ load / 100. })

  local color = colors.blue
  if load > 30 then
    if load < 60 then
      color = colors.yellow
    elseif load < 80 then
      color = colors.orange
    else
      color = colors.red
    end
  end

  cpu:set({
    graph = { color = color },
    label = "cpu " .. env.total_load .. "%",
  })
end)

cpu:subscribe("mouse.clicked", function(env)
  sbar.exec("open -a 'Activity Monitor'")
end)

-- Background around the cpu item
sbar.add("bracket", "widgets.cpu.bracket", { cpu.name }, {
  background = { color = colors.bg1 }
})

-- Background around the cpu item
sbar.add("item", "widgets.cpu.padding", {
  position = "right",
  width = settings.group_paddings
})

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/widgets/init.lua
================
require("items.widgets.battery")
require("items.widgets.volume")
require("items.widgets.wifi")
require("items.widgets.cpu")

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/widgets/volume.lua
================
local colors = require("colors")
local icons = require("icons")
local settings = require("settings")

local popup_width = 250

local volume_percent = sbar.add("item", "widgets.volume1", {
  position = "right",
  icon = { drawing = false },
  label = {
    string = "??%",
    padding_left = -1,
    font = { family = settings.font.numbers }
  },
})

local volume_icon = sbar.add("item", "widgets.volume2", {
  position = "right",
  padding_right = -1,
  icon = {
    string = icons.volume._100,
    width = 0,
    align = "left",
    color = colors.grey,
    font = {
      style = settings.font.style_map["Regular"],
      size = 14.0,
    },
  },
  label = {
    width = 25,
    align = "left",
    font = {
      style = settings.font.style_map["Regular"],
      size = 14.0,
    },
  },
})

local volume_bracket = sbar.add("bracket", "widgets.volume.bracket", {
  volume_icon.name,
  volume_percent.name
}, {
  background = { color = colors.bg1 },
  popup = { align = "center" }
})

sbar.add("item", "widgets.volume.padding", {
  position = "right",
  width = settings.group_paddings
})

local volume_slider = sbar.add("slider", popup_width, {
  position = "popup." .. volume_bracket.name,
  slider = {
    highlight_color = colors.blue,
    background = {
      height = 6,
      corner_radius = 3,
      color = colors.bg2,
    },
    knob= {
      string = "􀀁",
      drawing = true,
    },
  },
  background = { color = colors.bg1, height = 2, y_offset = -20 },
  click_script = 'osascript -e "set volume output volume $PERCENTAGE"'
})

volume_percent:subscribe("volume_change", function(env)
  local volume = tonumber(env.INFO)
  local icon = icons.volume._0
  if volume > 60 then
    icon = icons.volume._100
  elseif volume > 30 then
    icon = icons.volume._66
  elseif volume > 10 then
    icon = icons.volume._33
  elseif volume > 0 then
    icon = icons.volume._10
  end

  local lead = ""
  if volume < 10 then
    lead = "0"
  end

  volume_icon:set({ label = icon })
  volume_percent:set({ label = lead .. volume .. "%" })
  volume_slider:set({ slider = { percentage = volume } })
end)

local function volume_collapse_details()
  local drawing = volume_bracket:query().popup.drawing == "on"
  if not drawing then return end
  volume_bracket:set({ popup = { drawing = false } })
  sbar.remove('/volume.device\\.*/')
end

local current_audio_device = "None"
local function volume_toggle_details(env)
  if env.BUTTON == "right" then
    sbar.exec("open /System/Library/PreferencePanes/Sound.prefpane")
    return
  end

  local should_draw = volume_bracket:query().popup.drawing == "off"
  if should_draw then
    volume_bracket:set({ popup = { drawing = true } })
    sbar.exec("SwitchAudioSource -t output -c", function(result)
      current_audio_device = result:sub(1, -2)
      sbar.exec("SwitchAudioSource -a -t output", function(available)
        current = current_audio_device
        local color = colors.grey
        local counter = 0

        for device in string.gmatch(available, '[^\r\n]+') do
          local color = colors.grey
          if current == device then
            color = colors.white
          end
          sbar.add("item", "volume.device." .. counter, {
            position = "popup." .. volume_bracket.name,
            width = popup_width,
            align = "center",
            label = { string = device, color = color },
            click_script = 'SwitchAudioSource -s "' .. device .. '" && sketchybar --set /volume.device\\.*/ label.color=' .. colors.grey .. ' --set $NAME label.color=' .. colors.white

          })
          counter = counter + 1
        end
      end)
    end)
  else
    volume_collapse_details()
  end
end

local function volume_scroll(env)
  local delta = env.INFO.delta
  if not (env.INFO.modifier == "ctrl") then delta = delta * 10.0 end

  sbar.exec('osascript -e "set volume output volume (output volume of (get volume settings) + ' .. delta .. ')"')
end

volume_icon:subscribe("mouse.clicked", volume_toggle_details)
volume_icon:subscribe("mouse.scrolled", volume_scroll)
volume_percent:subscribe("mouse.clicked", volume_toggle_details)
volume_percent:subscribe("mouse.exited.global", volume_collapse_details)
volume_percent:subscribe("mouse.scrolled", volume_scroll)

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/widgets/wifi.lua
================
local icons = require("icons")
local colors = require("colors")
local settings = require("settings")

-- Execute the event provider binary which provides the event "network_update"
-- for the network interface "en0", which is fired every 2.0 seconds.
sbar.exec("killall network_load >/dev/null; $CONFIG_DIR/helpers/event_providers/network_load/bin/network_load en0 network_update 2.0")

local popup_width = 250

local wifi_up = sbar.add("item", "widgets.wifi1", {
  position = "right",
  padding_left = -5,
  width = 0,
  icon = {
    padding_right = 0,
    font = {
      style = settings.font.style_map["Bold"],
      size = 9.0,
    },
    string = icons.wifi.upload,
  },
  label = {
    font = {
      family = settings.font.numbers,
      style = settings.font.style_map["Bold"],
      size = 9.0,
    },
    color = colors.red,
    string = "??? Bps",
  },
  y_offset = 4,
})

local wifi_down = sbar.add("item", "widgets.wifi2", {
  position = "right",
  padding_left = -5,
  icon = {
    padding_right = 0,
    font = {
      style = settings.font.style_map["Bold"],
      size = 9.0,
    },
    string = icons.wifi.download,
  },
  label = {
    font = {
      family = settings.font.numbers,
      style = settings.font.style_map["Bold"],
      size = 9.0,
    },
    color = colors.blue,
    string = "??? Bps",
  },
  y_offset = -4,
})

local wifi = sbar.add("item", "widgets.wifi.padding", {
  position = "right",
  label = { drawing = false },
})

-- Background around the item
local wifi_bracket = sbar.add("bracket", "widgets.wifi.bracket", {
  wifi.name,
  wifi_up.name,
  wifi_down.name
}, {
  background = { color = colors.bg1 },
  popup = { align = "center", height = 30 }
})

local ssid = sbar.add("item", {
  position = "popup." .. wifi_bracket.name,
  icon = {
    font = {
      style = settings.font.style_map["Bold"]
    },
    string = icons.wifi.router,
  },
  width = popup_width,
  align = "center",
  label = {
    font = {
      size = 15,
      style = settings.font.style_map["Bold"]
    },
    max_chars = 18,
    string = "????????????",
  },
  background = {
    height = 2,
    color = colors.grey,
    y_offset = -15
  }
})

local hostname = sbar.add("item", {
  position = "popup." .. wifi_bracket.name,
  icon = {
    align = "left",
    string = "Hostname:",
    width = popup_width / 2,
  },
  label = {
    max_chars = 20,
    string = "????????????",
    width = popup_width / 2,
    align = "right",
  }
})

local ip = sbar.add("item", {
  position = "popup." .. wifi_bracket.name,
  icon = {
    align = "left",
    string = "IP:",
    width = popup_width / 2,
  },
  label = {
    string = "???.???.???.???",
    width = popup_width / 2,
    align = "right",
  }
})

local mask = sbar.add("item", {
  position = "popup." .. wifi_bracket.name,
  icon = {
    align = "left",
    string = "Subnet mask:",
    width = popup_width / 2,
  },
  label = {
    string = "???.???.???.???",
    width = popup_width / 2,
    align = "right",
  }
})

local router = sbar.add("item", {
  position = "popup." .. wifi_bracket.name,
  icon = {
    align = "left",
    string = "Router:",
    width = popup_width / 2,
  },
  label = {
    string = "???.???.???.???",
    width = popup_width / 2,
    align = "right",
  },
})

sbar.add("item", { position = "right", width = settings.group_paddings })

wifi_up:subscribe("network_update", function(env)
  local up_color = (env.upload == "000 Bps") and colors.grey or colors.red
  local down_color = (env.download == "000 Bps") and colors.grey or colors.blue
  wifi_up:set({
    icon = { color = up_color },
    label = {
      string = env.upload,
      color = up_color
    }
  })
  wifi_down:set({
    icon = { color = down_color },
    label = {
      string = env.download,
      color = down_color
    }
  })
end)

wifi:subscribe({"wifi_change", "system_woke"}, function(env)
  sbar.exec("ipconfig getifaddr en0", function(ip)
    local connected = not (ip == "")
    wifi:set({
      icon = {
        string = connected and icons.wifi.connected or icons.wifi.disconnected,
        color = connected and colors.white or colors.red,
      },
    })
  end)
end)

local function hide_details()
  wifi_bracket:set({ popup = { drawing = false } })
end

local function toggle_details()
  local should_draw = wifi_bracket:query().popup.drawing == "off"
  if should_draw then
    wifi_bracket:set({ popup = { drawing = true }})
    sbar.exec("networksetup -getcomputername", function(result)
      hostname:set({ label = result })
    end)
    sbar.exec("ipconfig getifaddr en0", function(result)
      ip:set({ label = result })
    end)
    sbar.exec("ipconfig getsummary en0 | awk -F ' SSID : '  '/ SSID : / {print $2}'", function(result)
      ssid:set({ label = result })
    end)
    sbar.exec("networksetup -getinfo Wi-Fi | awk -F 'Subnet mask: ' '/^Subnet mask: / {print $2}'", function(result)
      mask:set({ label = result })
    end)
    sbar.exec("networksetup -getinfo Wi-Fi | awk -F 'Router: ' '/^Router: / {print $2}'", function(result)
      router:set({ label = result })
    end)
  else
    hide_details()
  end
end

wifi_up:subscribe("mouse.clicked", toggle_details)
wifi_down:subscribe("mouse.clicked", toggle_details)
wifi:subscribe("mouse.clicked", toggle_details)
wifi:subscribe("mouse.exited.global", hide_details)

local function copy_label_to_clipboard(env)
  local label = sbar.query(env.NAME).label.value
  sbar.exec("echo \"" .. label .. "\" | pbcopy")
  sbar.set(env.NAME, { label = { string = icons.clipboard, align="center" } })
  sbar.delay(1, function()
    sbar.set(env.NAME, { label = { string = label, align = "right" } })
  end)
end

ssid:subscribe("mouse.clicked", copy_label_to_clipboard)
hostname:subscribe("mouse.clicked", copy_label_to_clipboard)
ip:subscribe("mouse.clicked", copy_label_to_clipboard)
mask:subscribe("mouse.clicked", copy_label_to_clipboard)
router:subscribe("mouse.clicked", copy_label_to_clipboard)

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/apple.lua
================
local colors = require("colors")
local icons = require("icons")
local settings = require("settings")

-- Padding item required because of bracket
sbar.add("item", { width = 5 })

local apple = sbar.add("item", {
  icon = {
    font = { size = 16.0 },
    string = icons.apple,
    padding_right = 8,
    padding_left = 8,
  },
  label = { drawing = false },
  background = {
    color = colors.bg2,
    border_color = colors.black,
    border_width = 1
  },
  padding_left = 1,
  padding_right = 1,
  click_script = "$CONFIG_DIR/helpers/menus/bin/menus -s 0"
})

-- Double border for apple using a single item bracket
sbar.add("bracket", { apple.name }, {
  background = {
    color = colors.transparent,
    height = 30,
    border_color = colors.grey,
  }
})

-- Padding item required because of bracket
sbar.add("item", { width = 7 })

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/calendar.lua
================
local settings = require("settings")
local colors = require("colors")

-- Padding item required because of bracket
sbar.add("item", { position = "right", width = settings.group_paddings })

local cal = sbar.add("item", {
  icon = {
    color = colors.white,
    padding_left = 8,
    font = {
      style = settings.font.style_map["Black"],
      size = 12.0,
    },
  },
  label = {
    color = colors.white,
    padding_right = 8,
    width = 49,
    align = "right",
    font = { family = settings.font.numbers },
  },
  position = "right",
  update_freq = 30,
  padding_left = 1,
  padding_right = 1,
  background = {
    color = colors.bg2,
    border_color = colors.black,
    border_width = 1
  },
  click_script = "open -a 'Calendar'"
})

-- Double border for calendar using a single item bracket
sbar.add("bracket", { cal.name }, {
  background = {
    color = colors.transparent,
    height = 30,
    border_color = colors.grey,
  }
})

-- Padding item required because of bracket
sbar.add("item", { position = "right", width = settings.group_paddings })

cal:subscribe({ "forced", "routine", "system_woke" }, function(env)
  cal:set({ icon = os.date("%a. %d %b."), label = os.date("%H:%M") })
end)

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/front_app.lua
================
local colors = require("colors")
local settings = require("settings")

local front_app = sbar.add("item", "front_app", {
  display = "active",
  icon = { drawing = false },
  label = {
    font = {
      style = settings.font.style_map["Black"],
      size = 12.0,
    },
  },
  updates = true,
})

front_app:subscribe("front_app_switched", function(env)
  front_app:set({ label = { string = env.INFO } })
end)

front_app:subscribe("mouse.clicked", function(env)
  sbar.trigger("swap_menus_and_spaces")
end)

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/init.lua
================
require("items.apple")
require("items.menus")
require("items.spaces")
require("items.front_app")
require("items.calendar")
require("items.widgets")
require("items.media")

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/media.lua
================
local icons = require("icons")
local colors = require("colors")

local whitelist = { ["Spotify"] = true,
                    ["Music"] = true    };

local media_cover = sbar.add("item", {
  position = "right",
  background = {
    image = {
      string = "media.artwork",
      scale = 0.85,
    },
    color = colors.transparent,
  },
  label = { drawing = false },
  icon = { drawing = false },
  drawing = false,
  updates = true,
  popup = {
    align = "center",
    horizontal = true,
  }
})

local media_artist = sbar.add("item", {
  position = "right",
  drawing = false,
  padding_left = 3,
  padding_right = 0,
  width = 0,
  icon = { drawing = false },
  label = {
    width = 0,
    font = { size = 9 },
    color = colors.with_alpha(colors.white, 0.6),
    max_chars = 18,
    y_offset = 6,
  },
})

local media_title = sbar.add("item", {
  position = "right",
  drawing = false,
  padding_left = 3,
  padding_right = 0,
  icon = { drawing = false },
  label = {
    font = { size = 11 },
    width = 0,
    max_chars = 16,
    y_offset = -5,
  },
})

sbar.add("item", {
  position = "popup." .. media_cover.name,
  icon = { string = icons.media.back },
  label = { drawing = false },
  click_script = "nowplaying-cli previous",
})
sbar.add("item", {
  position = "popup." .. media_cover.name,
  icon = { string = icons.media.play_pause },
  label = { drawing = false },
  click_script = "nowplaying-cli togglePlayPause",
})
sbar.add("item", {
  position = "popup." .. media_cover.name,
  icon = { string = icons.media.forward },
  label = { drawing = false },
  click_script = "nowplaying-cli next",
})

local interrupt = 0
local function animate_detail(detail)
  if (not detail) then interrupt = interrupt - 1 end
  if interrupt > 0 and (not detail) then return end

  sbar.animate("tanh", 30, function()
    media_artist:set({ label = { width = detail and "dynamic" or 0 } })
    media_title:set({ label = { width = detail and "dynamic" or 0 } })
  end)
end

media_cover:subscribe("media_change", function(env)
  if whitelist[env.INFO.app] then
    local drawing = (env.INFO.state == "playing")
    media_artist:set({ drawing = drawing, label = env.INFO.artist, })
    media_title:set({ drawing = drawing, label = env.INFO.title, })
    media_cover:set({ drawing = drawing })

    if drawing then
      animate_detail(true)
      interrupt = interrupt + 1
      sbar.delay(5, animate_detail)
    else
      media_cover:set({ popup = { drawing = false } })
    end
  end
end)

media_cover:subscribe("mouse.entered", function(env)
  interrupt = interrupt + 1
  animate_detail(true)
end)

media_cover:subscribe("mouse.exited", function(env)
  animate_detail(false)
end)

media_cover:subscribe("mouse.clicked", function(env)
  media_cover:set({ popup = { drawing = "toggle" }})
end)

media_title:subscribe("mouse.exited.global", function(env)
  media_cover:set({ popup = { drawing = false }})
end)

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/menus.lua
================
local colors = require("colors")
local icons = require("icons")
local settings = require("settings")

local menu_watcher = sbar.add("item", {
  drawing = false,
  updates = false,
})
local space_menu_swap = sbar.add("item", {
  drawing = false,
  updates = true,
})
sbar.add("event", "swap_menus_and_spaces")

local max_items = 15
local menu_items = {}
for i = 1, max_items, 1 do
  local menu = sbar.add("item", "menu." .. i, {
    padding_left = settings.paddings,
    padding_right = settings.paddings,
    drawing = false,
    icon = { drawing = false },
    label = {
      font = {
        style = settings.font.style_map[i == 1 and "Heavy" or "Semibold"]
      },
      padding_left = 6,
      padding_right = 6,
    },
    click_script = "$CONFIG_DIR/helpers/menus/bin/menus -s " .. i,
  })

  menu_items[i] = menu
end

sbar.add("bracket", { '/menu\\..*/' }, {
  background = { color = colors.bg1 }
})

local menu_padding = sbar.add("item", "menu.padding", {
  drawing = false,
  width = 5
})

local function update_menus(env)
  sbar.exec("$CONFIG_DIR/helpers/menus/bin/menus -l", function(menus)
    sbar.set('/menu\\..*/', { drawing = false })
    menu_padding:set({ drawing = true })
    id = 1
    for menu in string.gmatch(menus, '[^\r\n]+') do
      if id < max_items then
        menu_items[id]:set( { label = menu, drawing = true } )
      else break end
      id = id + 1
    end
  end)
end

menu_watcher:subscribe("front_app_switched", update_menus)

space_menu_swap:subscribe("swap_menus_and_spaces", function(env)
  local drawing = menu_items[1]:query().geometry.drawing == "on"
  if drawing then
    menu_watcher:set( { updates = false })
    sbar.set("/menu\\..*/", { drawing = false })
    sbar.set("/space\\..*/", { drawing = true })
    sbar.set("front_app", { drawing = true })
  else
    menu_watcher:set( { updates = true })
    sbar.set("/space\\..*/", { drawing = false })
    sbar.set("front_app", { drawing = false })
    update_menus()
  end
end)

return menu_watcher

================
File: modules/home-manager/hosts/solaire/sketchybar/config/items/spaces.lua
================
local colors = require("colors")
local icons = require("icons")
local settings = require("settings")
local app_icons = require("helpers.app_icons")

local spaces = {}

for i = 1, 10, 1 do
  local space = sbar.add("space", "space." .. i, {
    space = i,
    icon = {
      font = { family = settings.font.numbers },
      string = i,
      padding_left = 15,
      padding_right = 8,
      color = colors.white,
      highlight_color = colors.red,
    },
    label = {
      padding_right = 20,
      color = colors.grey,
      highlight_color = colors.white,
      font = "sketchybar-app-font:Regular:16.0",
      y_offset = -1,
    },
    padding_right = 1,
    padding_left = 1,
    background = {
      color = colors.bg1,
      border_width = 1,
      height = 26,
      border_color = colors.black,
    },
    popup = { background = { border_width = 5, border_color = colors.black } }
  })

  spaces[i] = space

  -- Single item bracket for space items to achieve double border on highlight
  local space_bracket = sbar.add("bracket", { space.name }, {
    background = {
      color = colors.transparent,
      border_color = colors.bg2,
      height = 28,
      border_width = 2
    }
  })

  -- Padding space
  sbar.add("space", "space.padding." .. i, {
    space = i,
    script = "",
    width = settings.group_paddings,
  })

  local space_popup = sbar.add("item", {
    position = "popup." .. space.name,
    padding_left= 5,
    padding_right= 0,
    background = {
      drawing = true,
      image = {
        corner_radius = 9,
        scale = 0.2
      }
    }
  })

  space:subscribe("space_change", function(env)
    local selected = env.SELECTED == "true"
    local color = selected and colors.grey or colors.bg2
    space:set({
      icon = { highlight = selected, },
      label = { highlight = selected },
      background = { border_color = selected and colors.black or colors.bg2 }
    })
    space_bracket:set({
      background = { border_color = selected and colors.grey or colors.bg2 }
    })
  end)

  space:subscribe("mouse.clicked", function(env)
    if env.BUTTON == "other" then
      space_popup:set({ background = { image = "space." .. env.SID } })
      space:set({ popup = { drawing = "toggle" } })
    else
      local op = (env.BUTTON == "right") and "--destroy" or "--focus"
      sbar.exec("yabai -m space " .. op .. " " .. env.SID)
    end
  end)

  space:subscribe("mouse.exited", function(_)
    space:set({ popup = { drawing = false } })
  end)
end

local space_window_observer = sbar.add("item", {
  drawing = false,
  updates = true,
})

local spaces_indicator = sbar.add("item", {
  padding_left = -3,
  padding_right = 0,
  icon = {
    padding_left = 8,
    padding_right = 9,
    color = colors.grey,
    string = icons.switch.on,
  },
  label = {
    width = 0,
    padding_left = 0,
    padding_right = 8,
    string = "Spaces",
    color = colors.bg1,
  },
  background = {
    color = colors.with_alpha(colors.grey, 0.0),
    border_color = colors.with_alpha(colors.bg1, 0.0),
  }
})

space_window_observer:subscribe("space_windows_change", function(env)
  local icon_line = ""
  local no_app = true
  for app, count in pairs(env.INFO.apps) do
    no_app = false
    local lookup = app_icons[app]
    local icon = ((lookup == nil) and app_icons["Default"] or lookup)
    icon_line = icon_line .. icon
  end

  if (no_app) then
    icon_line = " —"
  end
  sbar.animate("tanh", 10, function()
    spaces[env.INFO.space]:set({ label = icon_line })
  end)
end)

spaces_indicator:subscribe("swap_menus_and_spaces", function(env)
  local currently_on = spaces_indicator:query().icon.value == icons.switch.on
  spaces_indicator:set({
    icon = currently_on and icons.switch.off or icons.switch.on
  })
end)

spaces_indicator:subscribe("mouse.entered", function(env)
  sbar.animate("tanh", 30, function()
    spaces_indicator:set({
      background = {
        color = { alpha = 1.0 },
        border_color = { alpha = 1.0 },
      },
      icon = { color = colors.bg1 },
      label = { width = "dynamic" }
    })
  end)
end)

spaces_indicator:subscribe("mouse.exited", function(env)
  sbar.animate("tanh", 30, function()
    spaces_indicator:set({
      background = {
        color = { alpha = 0.0 },
        border_color = { alpha = 0.0 },
      },
      icon = { color = colors.grey },
      label = { width = 0, }
    })
  end)
end)

spaces_indicator:subscribe("mouse.clicked", function(env)
  sbar.trigger("swap_menus_and_spaces")
end)

================
File: modules/home-manager/hosts/solaire/sketchybar/config/bar.lua
================
local colors = require("colors")

-- Equivalent to the --bar domain
sbar.bar({
  height = 40,
  color = colors.bar.bg,
  padding_right = 2,
  padding_left = 2,
})

================
File: modules/home-manager/hosts/solaire/sketchybar/config/colors.lua
================
return {
  black = 0xff181819,
  white = 0xffe2e2e3,
  red = 0xfffc5d7c,
  green = 0xff9ed072,
  blue = 0xff76cce0,
  yellow = 0xffe7c664,
  orange = 0xfff39660,
  magenta = 0xffb39df3,
  grey = 0xff7f8490,
  transparent = 0x00000000,

  bar = {
    bg = 0xf02c2e34,
    border = 0xff2c2e34,
  },
  popup = {
    bg = 0xc02c2e34,
    border = 0xff7f8490
  },
  bg1 = 0xff363944,
  bg2 = 0xff414550,

  with_alpha = function(color, alpha)
    if alpha > 1.0 or alpha < 0.0 then return color end
    return (color & 0x00ffffff) | (math.floor(alpha * 255.0) << 24)
  end,
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/default.lua
================
local settings = require("settings")
local colors = require("colors")

-- Equivalent to the --default domain
sbar.default({
  updates = "when_shown",
  icon = {
    font = {
      family = settings.font.text,
      style = settings.font.style_map["Bold"],
      size = 14.0
    },
    color = colors.white,
    padding_left = settings.paddings,
    padding_right = settings.paddings,
    background = { image = { corner_radius = 9 } },
  },
  label = {
    font = {
      family = settings.font.text,
      style = settings.font.style_map["Semibold"],
      size = 13.0
    },
    color = colors.white,
    padding_left = settings.paddings,
    padding_right = settings.paddings,
  },
  background = {
    height = 28,
    corner_radius = 9,
    border_width = 2,
    border_color = colors.bg2,
    image = {
      corner_radius = 9,
      border_color = colors.grey,
      border_width = 1
    }
  },
  popup = {
    background = {
      border_width = 2,
      corner_radius = 9,
      border_color = colors.popup.border,
      color = colors.popup.bg,
      shadow = { drawing = true },
    },
    blur_radius = 50,
  },
  padding_left = 5,
  padding_right = 5,
  scroll_texts = true,
})

================
File: modules/home-manager/hosts/solaire/sketchybar/config/icons.lua
================
local settings = require("settings")

local icons = {
  sf_symbols = {
    plus = "􀅼",
    loading = "􀖇",
    apple = "􀣺",
    gear = "􀍟",
    cpu = "􀫥",
    clipboard = "􀉄",

    switch = {
      on = "􁏮",
      off = "􁏯",
    },
    volume = {
      _100="􀊩",
      _66="􀊧",
      _33="􀊥",
      _10="􀊡",
      _0="􀊣",
    },
    battery = {
      _100 = "􀛨",
      _75 = "􀺸",
      _50 = "􀺶",
      _25 = "􀛩",
      _0 = "􀛪",
      charging = "􀢋"
    },
    wifi = {
      upload = "􀄨",
      download = "􀄩",
      connected = "􀙇",
      disconnected = "􀙈",
      router = "􁓤",
    },
    media = {
      back = "􀊊",
      forward = "􀊌",
      play_pause = "􀊈",
    },
  },

  -- Alternative NerdFont icons
  nerdfont = {
    plus = "",
    loading = "",
    apple = "",
    gear = "",
    cpu = "",
    clipboard = "Missing Icon",

    switch = {
      on = "󱨥",
      off = "󱨦",
    },
    volume = {
      _100="",
      _66="",
      _33="",
      _10="",
      _0="",
    },
    battery = {
      _100 = "",
      _75 = "",
      _50 = "",
      _25 = "",
      _0 = "",
      charging = ""
    },
    wifi = {
      upload = "",
      download = "",
      connected = "󰖩",
      disconnected = "󰖪",
      router = "Missing Icon"
    },
    media = {
      back = "",
      forward = "",
      play_pause = "",
    },
  },
}

if not (settings.icons == "NerdFont") then
  return icons.sf_symbols
else
  return icons.nerdfont
end

================
File: modules/home-manager/hosts/solaire/sketchybar/config/init.lua
================
-- Require the sketchybar module
sbar = require("sketchybar")

-- Set the bar name, if you are using another bar instance than sketchybar
-- sbar.set_bar_name("bottom_bar")

-- Bundle the entire initial configuration into a single message to sketchybar
sbar.begin_config()
require("bar")
require("default")
require("items")
sbar.end_config()

-- Run the event loop of the sketchybar module (without this there will be no
-- callback functions executed in the lua module)
sbar.event_loop()

================
File: modules/home-manager/hosts/solaire/sketchybar/config/settings.lua
================
return {
  paddings = 3,
  group_paddings = 5,

  icons = "sf-symbols", -- alternatively available: NerdFont

  -- This is a font configuration for SF Pro and SF Mono (installed manually)
  font = require("helpers.default_font"),

  -- Alternatively, this is a font config for JetBrainsMono Nerd Font
  -- font = {
  --   text = "JetBrainsMono Nerd Font", -- Used for text
  --   numbers = "JetBrainsMono Nerd Font", -- Used for numbers
  --   style_map = {
  --     ["Regular"] = "Regular",
  --     ["Semibold"] = "Medium",
  --     ["Bold"] = "SemiBold",
  --     ["Heavy"] = "Bold",
  --     ["Black"] = "ExtraBold",
  --   },
  -- },
}

================
File: modules/home-manager/hosts/solaire/sketchybar/config/sketchybarrc
================
#!/usr/bin/env lua

-- Load the sketchybar-package and prepare the helper binaries
require("helpers")
require("init")

================
File: modules/home-manager/hosts/solaire/sketchybar/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/sketchybar".source = homeManagerConfig.linkHostApp config "sketchybar";
}

================
File: modules/home-manager/hosts/solaire/skhd/config/skhdrc
================
## Navigation (lalt - ...)
# Space Navigation (four spaces per display): lalt - {1, 2, 3, 4}
lalt - 1 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[1] ]] && yabai -m space --focus $SPACES[1]
lalt - 2 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[2] ]] && yabai -m space --focus $SPACES[2]
lalt - 3 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[3] ]] && yabai -m space --focus $SPACES[3]
lalt - 4 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[4] ]] && yabai -m space --focus $SPACES[4]

# Window Navigation (through display borders): lalt - {j, k, l, ö}
lalt - j    : yabai -m window --focus west  || yabai -m display --focus west
lalt - k    : yabai -m window --focus south || yabai -m display --focus south
lalt - l    : yabai -m window --focus north || yabai -m display --focus north
lalt - 0x29 : yabai -m window --focus east  || yabai -m display --focus east

# Extended Window Navigation: lalt - {h, ä}
lalt -    h : yabai -m window --focus first
lalt - 0x27 : yabai -m window --focus  last

# Float / Unfloat window: lalt - space
lalt - space : yabai -m window --toggle float

# Make window zoom to fullscreen: shift + lalt - f
shift + lalt - f : yabai -m window --toggle zoom-fullscreen

# Make window zoom to parent node: lalt - f 
lalt - f : yabai -m window --toggle zoom-parent

## Window Movement (shift + lalt - ...)
# Moving windows in spaces: shift + lalt - {j, k, l, ö}
shift + lalt - j : yabai -m window --warp west || $(yabai -m window --display west && yabai -m display --focus west && yabai -m window --warp last) || yabai -m window --move rel:-10:0
shift + lalt - k : yabai -m window --warp south || $(yabai -m window --display south && yabai -m display --focus south) || yabai -m window --move rel:0:10
shift + lalt - l : yabai -m window --warp north || $(yabai -m window --display north && yabai -m display --focus north) || yabai -m window --move rel:0:-10
shift + lalt - 0x29 : yabai -m window --warp east || $(yabai -m window --display east && yabai -m display --focus east && yabai -m window --warp first) || yabai -m window --move rel:10:0

# Toggle split orientation of the selected windows node: shift + lalt - s
shift + lalt - s : yabai -m window --toggle split

# Moving windows between spaces: shift + lalt - {1, 2, 3, 4, p, n } (Assumes 4 Spaces Max per Display)
shift + lalt - 1 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[1] ]] \
                  && yabai -m window --space $SPACES[1]

shift + lalt - 2 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[2] ]] \
                  && yabai -m window --space $SPACES[2]

shift + lalt - 3 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[3] ]] \
                  && yabai -m window --space $SPACES[3]

shift + lalt - 4 : SPACES=($(yabai -m query --displays --display | jq '.spaces[]')) && [[ -n $SPACES[4] ]] \
                  && yabai -m window --space $SPACES[4]

shift + lalt - p : yabai -m window --space prev && yabai -m space --focus prev
shift + lalt - n : yabai -m window --space next && yabai -m space --focus next

# Mirror Space on X and Y Axis: shift + lalt - {x, y}
shift + lalt - x : yabai -m space --mirror x-axis
shift + lalt - y : yabai -m space --mirror y-axis

## Stacks (shift + ctrl - ...)
# Add the active window to the window or stack to the {direction}: shift + ctrl - {j, k, l, ö}
shift + ctrl - j    : yabai -m window  west --stack $(yabai -m query --windows --window | jq -r '.id')
shift + ctrl - k    : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id')
shift + ctrl - l    : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id')
shift + ctrl - 0x29 : yabai -m window  east --stack $(yabai -m query --windows --window | jq -r '.id')

# Stack Navigation: shift + ctrl - {n, p}
shift + ctrl - n : yabai -m window --focus stack.next
shift + ctrl - p : yabai -m window --focus stack.prev

## Resize (ctrl + lalt - ...)
# Resize windows: ctrl + lalt - {j, k, l, ö}
ctrl + lalt - j    : yabai -m window --resize right:-100:0 || yabai -m window --resize left:-100:0
ctrl + lalt - k    : yabai -m window --resize bottom:0:100 || yabai -m window --resize top:0:100
ctrl + lalt - l    : yabai -m window --resize bottom:0:-100 || yabai -m window --resize top:0:-100
ctrl + lalt - 0x29 : yabai -m window --resize right:100:0 || yabai -m window --resize left:100:0

# Equalize size of windows: ctrl + lalt - e
ctrl + lalt - e : yabai -m space --balance

# Enable / Disable gaps in current workspace: ctrl + lalt - g
ctrl + lalt - g : yabai -m space --toggle padding; yabai -m space --toggle gap

## Insertion (shift + ctrl + lalt - ...)
# Set insertion point for focused container: shift + ctrl + lalt - {j, k, l, ö, s}
shift + ctrl + lalt - j : yabai -m window --insert west
shift + ctrl + lalt - k : yabai -m window --insert south
shift + ctrl + lalt - l : yabai -m window --insert north
shift + ctrl + lalt - 0x29 : yabai -m window --insert east
shift + ctrl + lalt - s : yabai -m window --insert stack

# New window in hor./ vert. splits for all applications with yabai
lalt - s : yabai -m window --insert east;  skhd -k "cmd - n"
lalt - v : yabai -m window --insert south; skhd -k "cmd - n"

# Toggle sketchybar
shift + lalt - space : sketchybar --bar hidden=toggle

================
File: modules/home-manager/hosts/solaire/skhd/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/skhd".source = homeManagerConfig.linkHostApp config "skhd";
}

================
File: modules/home-manager/hosts/solaire/starship/config/starship.toml
================
add_newline = false

[character]
success_symbol = '[ #](bold green)'
error_symbol = "[ x](bold red)"
vicmd_symbol = "[ V](bold green)"

[git_status]
disabled = false

[git_commit]
commit_hash_length = 7
tag_disabled = false
only_detached = false

[battery]
disabled = true

[python]
disabled = true

[cmake]
disabled = true

[directory]
read_only = "(read only)"

[git_metrics]
disabled = false
format = '([+$added]($added_style)) ([-$deleted]($deleted_style)) '

================
File: modules/home-manager/hosts/solaire/svim/config/blacklist
================
kitty
Alacritty
iTerm2
WezTerm
MacVim
Neovide
JupyterApp

================
File: modules/home-manager/hosts/solaire/svim/config/svim.sh
================
#!/bin/bash

# This script is executed when either the mode changes,
# or the commandline changes

# Here I am simply passing the event to sketchybar, where an item could handle it.

sketchybar --trigger svim_update MODE="$MODE" CMDLINE="$CMDLINE"

================
File: modules/home-manager/hosts/solaire/svim/config/svimrc
================
noremap j h
noremap k j
noremap l k
noremap ö l
noremap ß $

================
File: modules/home-manager/hosts/solaire/tmux/config/themes/tokyonight.tmux
================
#!/usr/bin/env bash

# TokyoNight colors for Tmux

set -g mode-style "fg=#7aa2f7,bg=#3b4261"

set -g message-style "fg=#7aa2f7,bg=#3b4261"
set -g message-command-style "fg=#7aa2f7,bg=#3b4261"

set -g pane-border-style "fg=#3b4261"
set -g pane-active-border-style "fg=#7aa2f7"

set -g status "on"
set -g status-justify "left"

set -g status-style "fg=#7aa2f7,bg=#16161e"

set -g status-left-length "100"
set -g status-right-length "100"

set -g status-left-style NONE
set -g status-right-style NONE

set -g status-left "#[fg=#15161e,bg=#7aa2f7,bold] #S #[fg=#7aa2f7,bg=#16161e,nobold,nounderscore,noitalics] "
set -g status-right "#[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics] #[fg=#7aa2f7,bg=#16161e] #{prefix_highlight} #[fg=#3b4261,bg=#16161e,nobold,nounderscore,noitalics] #[fg=#7aa2f7,bg=#3b4261] %Y-%m-%d | %I:%M %p #[fg=#7aa2f7,bg=#3b4261,nobold,nounderscore,noitalics] #[fg=#15161e,bg=#7aa2f7,bold] #h "
if-shell '[ "$(tmux show-option -gqv "clock-mode-style")" == "24" ]' {
  set -g status-right "#[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics] #[fg=#7aa2f7,bg=#16161e] #{prefix_highlight} #[fg=#3b4261,bg=#16161e,nobold,nounderscore,noitalics] #[fg=#7aa2f7,bg=#3b4261] %Y-%m-%d | %H:%M #[fg=#7aa2f7,bg=#3b4261,nobold,nounderscore,noitalics] #[fg=#15161e,bg=#7aa2f7,bold] #h "
}

setw -g window-status-activity-style "underscore,fg=#a9b1d6,bg=#16161e"
setw -g window-status-separator ""
setw -g window-status-style "NONE,fg=#a9b1d6,bg=#16161e"
setw -g window-status-format "#[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics] #[default]#I :: #W #F #[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics] "
setw -g window-status-current-format "#[fg=#16161e,bg=#3b4261,nobold,nounderscore,noitalics] #[fg=#7aa2f7,bg=#3b4261,bold]#I :: #W #F #[fg=#3b4261,bg=#16161e,nobold,nounderscore,noitalics] "

# tmux-plugins/tmux-prefix-highlight support
set -g @prefix_highlight_output_prefix "#[fg=#16161e]#[bg=#e0af68] "
set -g @prefix_highlight_output_suffix " "

================
File: modules/home-manager/hosts/solaire/tmux/config/.gitignore
================
plugins

================
File: modules/home-manager/hosts/solaire/tmux/config/tmux.conf
================
set -g mouse on

unbind C-b
set -g prefix C-j
bind C-j send-prefix

# Vim style pane selection
bind h select-pane -L
bind j select-pane -D 
bind k select-pane -U
bind l select-pane -R

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on
set-option -g status-position top

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'christoomey/vim-tmux-navigator'

source-file "~/.config/tmux/themes/tokyonight.tmux"

# set vi-mode
set-window-option -g mode-keys vi

# keybindings
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

bind '"' split-window -v -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

bind R source-file "~/.config/tmux/tmux.conf"

run '~/.config/tmux/plugins/tpm/tpm'

================
File: modules/home-manager/hosts/solaire/tmux/default.nix
================
{ homeManagerConfig, config, ... }:

{
  programs.tmux.enable = true;

  home.file.".config/tmux".source = homeManagerConfig.linkHostApp config "tmux";
}

================
File: modules/home-manager/hosts/solaire/yabai/config/yabairc
================
#!/usr/bin/env sh

sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"

yabai -m config external_bar               all:40:0       \
                mouse_follows_focus        off            \
                focus_follows_mouse        off            \
                window_zoom_persist        off            \
                window_placement           second_child   \
                window_shadow              float          \
                window_opacity             on             \
                window_opacity_duration    0.2            \
                active_window_opacity      1.0            \
                normal_window_opacity      0.8            \
                window_animation_duration  0.5            \
                window_animation_easing    ease_out_quint \
                insert_feedback_color      0xff9dd274     \
                split_ratio                0.50           \
                auto_balance               off            \
                mouse_modifier             fn             \
                mouse_action1              move           \
                mouse_action2              resize         \
                mouse_drop_action          swap           \
                                                          \
                top_padding                8              \
                bottom_padding             8              \
                left_padding               8              \
                right_padding              8              \
                window_gap                 10

# Exclude problematic apps from being managed:
yabai -m rule --add app="^(LuLu|Calculator|Software Update|Dictionary|VLC|System Preferences|System Settings|zoom.us|Photo Booth|Archive Utility|Python|LibreOffice|App Store|Steam|Alfred|Activity Monitor)$" manage=off
yabai -m rule --add label="Finder" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
yabai -m rule --add label="Safari" app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add label="Select file to save to" app="^Inkscape$" title="Select file to save to" manage=off

yabai -m config layout bsp

echo "yabai configuration loaded.."

================
File: modules/home-manager/hosts/solaire/default.nix
================
{ ... }:

{
  imports = [
    ./tmux
    ./aerospace
    ./sketchybar
    ./helix
    ./kanata
    ./ghostty
  ];
}

================
File: modules/home-manager/shared/bat/config/themes/tokyonight_night.tmTheme
================
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>author</key>
	<string>Folke Lemaitre (http://github.com/folke)</string>
	<key>colorSpaceName</key>
	<string>sRGB</string>
	<key>name</key>
	<string>TokyoNight</string>
	<key>semanticClass</key>
	<string>enki.theme.tokyo</string>
	<key>settings</key>
	<array>
		<dict>
			<key>settings</key>
			<dict>
				<key>activeGuide</key>
				<string>#363b54</string>
				<key>background</key>
				<string>#1a1b26</string>
				<key>caret</key>
				<string>#DBC08A</string>
				<key>findHighlight</key>
				<string>#ffa300</string>
				<key>findHighlightForeground</key>
				<string>#000000</string>
				<key>foreground</key>
				<string>#c0caf5</string>
				<key>guide</key>
				<string>#4f4f5e40</string>
				<key>gutterForeground</key>
				<string>#3b415caa</string>
				<key>inactiveSelection</key>
				<string>#282833</string>
				<key>invisibles</key>
				<string>#4f4f5e</string>
				<key>lineHighlight</key>
				<string>#00000030</string>
				<key>selection</key>
				<string>#9D599D40</string>
				<key>selectionBorder</key>
				<string>#9D599D</string>
				<key>shadow</key>
				<string>#00000010</string>
				<key>stackGuide</key>
				<string>#4f4f5e60</string>
				<key>tagsOptions</key>
				<string>underline</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Italics - Comments, Storage, Keyword Flow, Vue attributes, Decorators</string>
			<key>scope</key>
			<string>comment, meta.var.expr storage.type, keyword.control.flow, meta.directive.vue punctuation.separator.key-value.html, meta.directive.vue entity.other.attribute-name.html, tag.decorator.js entity.name.tag.js, tag.decorator.js punctuation.definition.tag.js, storage.modifier</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>italic</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Comment</string>
			<key>scope</key>
			<string>comment, comment.block.documentation, punctuation.definition.comment</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#565f89</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Comment Doc</string>
			<key>scope</key>
			<string>comment.block.documentation variable, comment.block.documentation storage, comment.block.documentation punctuation, comment.block.documentation keyword, comment.block.documentation support, comment.block.documentation markup, comment.block.documentation markup.inline.raw.string.markdown, keyword.other.phpdoc.php</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#565f89</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Number, Boolean, Undefined, Null</string>
			<key>scope</key>
			<string>variable.other.constant, punctuation.definition.constant, constant.language, constant.numeric, support.constant</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#ff9e64</string>
			</dict>
		</dict>
    <dict>
      <key>name</key>
      <string>String, Symbols, Markup Heading</string>
      <key>scope</key>
      <string>meta.property.lua,string.unquoted.key.lua,support.other.metaproperty.lua,support.other.metaproperty.lua,constant.other.symbol, constant.other.key, markup.heading, meta.attribute-selector</string>
      <key>settings</key>
      <dict>
        <key>fontStyle</key>
        <string></string>
        <key>foreground</key>
        <string>#73daca</string>
      </dict>
    </dict>
		<dict>
			<key>name</key>
			<string>String</string>
			<key>scope</key>
			<string>string</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string></string>
				<key>foreground</key>
				<string>#9ece6a</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Colors</string>
			<key>scope</key>
			<string>constant.other.color, constant.other.color.rgb-value.hex punctuation.definition.constant</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9aa5ce</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Info</string>
			<key>scope</key>
			<string>markup.info</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#0db9d7</string>
				<key>background</key>
				<string>#192b38</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Warning</string>
			<key>scope</key>
			<string>markup.warning</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#e0af68</string>
				<key>background</key>
				<string>#2e2a2d</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Error</string>
			<key>scope</key>
			<string>markup.error</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#db4b4b</string>
				<key>background</key>
				<string>#2d202a</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Invalid</string>
			<key>scope</key>
			<string>invalid, invalid.illegal</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Invalid deprecated</string>
			<key>scope</key>
			<string>invalid.deprecated</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Storage Type</string>
			<key>scope</key>
			<string>storage.type</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Storage - modifier, var, const, let</string>
			<key>scope</key>
			<string>meta.var.expr storage.type, storage.modifier</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9d7cd8</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Interpolation</string>
			<key>scope</key>
			<string>punctuation.definition.template-expression, punctuation.section.embedded</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7dcfff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Spread</string>
			<key>scope</key>
			<string>keyword.operator.spread, keyword.operator.rest</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>bold</string>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Operator, Misc</string>
			<key>scope</key>
			<string>keyword.operator, keyword.control.as, keyword.other, keyword.operator.bitwise.shift, punctuation, punctuation.definition.constant.markdown, punctuation.definition.string, punctuation.support.type.property-name, text.html.vue-html meta.tag, punctuation.definition.keyword, punctuation.terminator.rule, punctuation.definition.entity, punctuation.definition.tag, punctuation.separator.inheritance.php, punctuation.definition.tag.html, keyword.other.template, keyword.other.substitution, entity.name.operator, text.html.vue meta.tag.block.any.html, text.html.vue meta.tag.inline.any.html, text.html.vue meta.tag.other.html, text.html.twig meta.tag.inline.any.html, text.html.twig meta.tag.block.any.html, text.html.twig meta.tag.structure.any.html, text.html.twig meta.tag.any.html</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#89ddff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Import, Export, From, Default</string>
			<key>scope</key>
			<string>keyword.control.import, keyword.control.export, keyword.control.from, keyword.control.default, meta.import keyword.other</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7dcfff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Keyword</string>
			<key>scope</key>
			<string>keyword, keyword.control, keyword.other.important</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Keyword SQL</string>
			<key>scope</key>
			<string>keyword.other.DML</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7dcfff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Keyword Operator Logical, Arrow, Ternary, Comparison</string>
			<key>scope</key>
			<string>keyword.operator.logical, storage.type.function, keyword.operator.bitwise, keyword.operator.ternary, keyword.operator.comparison, keyword.operator.relational, keyword.operator.or.regexp</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Tag</string>
			<key>scope</key>
			<string>entity.name.tag, entity.name.tag support.class.component, meta.tag</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Tag Punctuation</string>
			<key>scope</key>
			<string>punctuation.definition.tag, punctuation.definition.tag.html, punctuation.definition.tag.begin.html, punctuation.definition.tag.end.html</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#ba3c97</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Blade</string>
			<key>scope</key>
			<string>keyword.blade, entity.name.function.blade</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7aa2f7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>PHP - Embedded Tag</string>
			<key>scope</key>
			<string>punctuation.section.embedded.begin.php, punctuation.section.embedded.end.php</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#0db9d7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Smarty - Twig tag - Blade</string>
			<key>scope</key>
			<string>punctuation.definition.variable.smarty, punctuation.section.embedded.begin.smarty, punctuation.section.embedded.end.smarty, meta.tag.template.value.twig, punctuation.section.tag.twig, meta.tag.expression.twig, punctuation.definition.tag.expression.twig, punctuation.definition.tag.output.twig, variable.parameter.smarty</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7DCFFF</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Smarty - Twig variable - function</string>
			<key>scope</key>
			<string>variable.other.property.twig, support.function.twig, meta.function-call.twig, keyword.control.twig, keyword.control.smarty, keyword.operator.other.twig, keyword.operator.comparison.twig, support.function.functions.twig, support.function.functions.twig, keyword.operator.assignment.twig, support.function.filters.twig, support.function.built-in.smarty, keyword.operator.smarty, text.blade text.html.blade custom.compiler.blade.php punctuation.section.embedded.php entity.name.tag.block.any.html, text.blade text.html.blade custom.compiler.blade.php punctuation.section.embedded.php constant.other.inline-data.html, text.blade text.html.blade custom.compiler.blade.php support.function constant.other.inline-data.html</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#2ac3de</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Globals - PHP Constants  etc</string>
			<key>scope</key>
			<string>constant.other.php, variable.other.global.safer, variable.other.global.safer punctuation.definition.variable, variable.other.global, variable.other.global punctuation.definition.variable, constant.other</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#e0af68</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Variables</string>
			<key>scope</key>
			<string>variable, support.variable, string constant.other.placeholder</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Object Variable</string>
			<key>scope</key>
			<string>variable.other.object, support.module.node</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Object Key</string>
			<key>scope</key>
			<string>meta.object-literal.key, meta.group.braces.curly constant.other.object.key.js string.unquoted.label.js, string.alias.graphql, string.unquoted.graphql, string.unquoted.alias.graphql, meta.field.declaration.ts variable.object.property</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#73daca</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Object Property</string>
			<key>scope</key>
			<string>variable.other.property, support.variable.property, support.variable.property.dom, meta.function-call variable.other.object.property, variable.language.prototype, meta.property.object, variable.other.member</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7dcfff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Object Property</string>
			<key>scope</key>
			<string>variable.other.object.property</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Object Literal Member lvl 3 (Vue Prop Validation)</string>
			<key>scope</key>
			<string>meta.objectliteral meta.object.member meta.objectliteral meta.object.member meta.objectliteral meta.object.member meta.object-literal.key</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#41a6b5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>C-related Block Level Variables</string>
			<key>scope</key>
			<string>source.cpp meta.block variable.other</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Other Variable</string>
			<key>scope</key>
			<string>support.other.variable</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Methods</string>
			<key>scope</key>
			<string>meta.class-method.js entity.name.function.js, entity.name.method.js, variable.function.constructor, keyword.other.special-method, storage.type.cs</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7aa2f7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Function Definition</string>
			<key>scope</key>
			<string>entity.name.function, meta.function-call, meta.function-call entity.name.function, variable.function, meta.definition.method entity.name.function, meta.object-literal entity.name.function</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7aa2f7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Function Argument</string>
			<key>scope</key>
			<string>variable.parameter.function.language.special, variable.parameter, meta.function.parameters punctuation.definition.variable, meta.function.parameter variable</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#e0af68</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Constant, Tag Attribute</string>
			<key>scope</key>
			<string>keyword.other.type.php, storage.type.php, constant.character, constant.escape, keyword.other.unit</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Variable Definition</string>
			<key>scope</key>
			<string>meta.definition.variable variable.other.constant, meta.definition.variable variable.other.readwrite, variable.other.declaration</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Inherited Class</string>
			<key>scope</key>
			<string>entity.other.inherited-class</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string></string>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Class, Support, DOM, etc</string>
			<key>scope</key>
			<string>support.class, support.type, variable.other.readwrite.alias, support.orther.namespace.use.php, meta.use.php, support.other.namespace.php, support.type.sys-types, support.variable.dom, support.constant.math, support.type.object.module, support.constant.json, entity.name.namespace, meta.import.qualifier, entity.name.class</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#0db9d7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Class Name</string>
			<key>scope</key>
			<string>entity.name</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Support Function</string>
			<key>scope</key>
			<string>support.function</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#2ac3de</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS Class and Support</string>
			<key>scope</key>
			<string>source.css support.type.property-name, source.sass support.type.property-name, source.scss support.type.property-name, source.less support.type.property-name, source.stylus support.type.property-name, source.postcss support.type.property-name, support.type.property-name.css, support.type.vendored.property-name, support.type.map.key</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7aa2f7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS Font</string>
			<key>scope</key>
			<string>support.constant.font-name, meta.definition.variable</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9ece6a</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS Class</string>
			<key>scope</key>
			<string>entity.other.attribute-name.class, meta.at-rule.mixin.scss entity.name.function.scss</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9ece6a</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS ID</string>
			<key>scope</key>
			<string>entity.other.attribute-name.id</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#fc7b7b</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS Tag</string>
			<key>scope</key>
			<string>entity.name.tag.css, entity.name.tag.reference, entity.name.tag.scss</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#0db9d7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS Tag Reference</string>
			<key>scope</key>
			<string>entity.name.tag.reference</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#e0af68</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS Property Separator</string>
			<key>scope</key>
			<string>meta.property-list punctuation.separator.key-value</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9abdf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS Punctuation</string>
			<key>scope</key>
			<string>meta.property-list, punctuation.definition.entity.css</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#e0af68</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>SCSS @</string>
			<key>scope</key>
			<string>meta.at-rule.mixin keyword.control.at-rule.mixin, meta.at-rule.include entity.name.function.scss, meta.at-rule.include keyword.control.at-rule.include</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>SCSS Mixins, Extends, Include Keyword</string>
			<key>scope</key>
			<string>keyword.control.at-rule.include punctuation.definition.keyword, keyword.control.at-rule.mixin punctuation.definition.keyword, meta.at-rule.include keyword.control.at-rule.include, keyword.control.at-rule.extend punctuation.definition.keyword, meta.at-rule.extend keyword.control.at-rule.extend, entity.other.attribute-name.placeholder.css punctuation.definition.entity.css, meta.at-rule.media keyword.control.at-rule.media, meta.at-rule.mixin keyword.control.at-rule.mixin, meta.at-rule.function keyword.control.at-rule.function, keyword.control punctuation.definition.keyword, meta.at-rule.import.scss entity.other.attribute-name.placeholder.scss punctuation.definition.entity.scss, meta.at-rule.import.scss keyword.control.at-rule.import.scss</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9d7cd8</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>SCSS Include Mixin Argument</string>
			<key>scope</key>
			<string>meta.property-list meta.at-rule.include</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS value</string>
			<key>scope</key>
			<string>support.constant.property-value</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#ff9e64</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Sub-methods</string>
			<key>scope</key>
			<string>entity.name.module.js, variable.import.parameter.js, variable.other.class.js</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Language methods</string>
			<key>scope</key>
			<string>variable.language</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Variable punctuation</string>
			<key>scope</key>
			<string>variable.other punctuation.definition.variable</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Keyword this with Punctuation, ES7 Bind Operator</string>
			<key>scope</key>
			<string>source.js constant.other.object.key.js string.unquoted.label.js, variable.language.this punctuation.definition.variable, keyword.other.this</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>HTML Attributes</string>
			<key>scope</key>
			<string>entity.other.attribute-name, text.html.basic entity.other.attribute-name.html, text.html.basic entity.other.attribute-name, text.blade entity.other.attribute-name.class, text.html.smarty entity.other.attribute-name.class</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Vue Template attributes</string>
			<key>scope</key>
			<string>meta.directive.vue punctuation.separator.key-value.html, meta.directive.vue entity.other.attribute-name.html</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Vue Template attribute separator</string>
			<key>scope</key>
			<string>meta.directive.vue punctuation.separator.key-value.html</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#89ddff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS IDs</string>
			<key>scope</key>
			<string>source.sass keyword.control</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7aa2f7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS pseudo selectors</string>
			<key>scope</key>
			<string>entity.other.attribute-name.pseudo-class, entity.other.attribute-name.pseudo-element, entity.other.attribute-name.placeholder, meta.property-list meta.property-value</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Inserted</string>
			<key>scope</key>
			<string>markup.inserted</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#449dab</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Deleted</string>
			<key>scope</key>
			<string>markup.deleted</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#914c54</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Changed</string>
			<key>scope</key>
			<string>markup.changed</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#6183bb</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Regular Expressions</string>
			<key>scope</key>
			<string>string.regexp</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#b4f9f8</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Regular Expressions - Punctuation</string>
			<key>scope</key>
			<string>punctuation.definition.group</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Regular Expressions - Character Class</string>
			<key>scope</key>
			<string>constant.other.character-class.regexp</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Regular Expressions - Character Class Set</string>
			<key>scope</key>
			<string>constant.other.character-class.set.regexp, punctuation.definition.character-class.regexp</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#e0af68</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Regular Expressions - Quantifier</string>
			<key>scope</key>
			<string>keyword.operator.quantifier.regexp</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#89ddff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Regular Expressions - Backslash</string>
			<key>scope</key>
			<string>constant.character.escape.backslash</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Escape Characters</string>
			<key>scope</key>
			<string>constant.character.escape</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#89ddff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Decorators</string>
			<key>scope</key>
			<string>tag.decorator.js entity.name.tag.js, tag.decorator.js punctuation.definition.tag.js</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7aa2f7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>CSS Units</string>
			<key>scope</key>
			<string>keyword.other.unit</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>JSON Key - Level 0</string>
			<key>scope</key>
			<string>source.json meta.mapping.key.json string.quoted.double.json, source.json meta.structure.dictionary.json string.quoted.double.json</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7aa2f7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>JSON Key - Level 1</string>
			<key>scope</key>
			<string>source.json meta.mapping.value.json meta.sequence.json meta.mapping.key.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json string.quoted.double.json</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#0db9d7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>JSON Key - Level 2</string>
			<key>scope</key>
			<string>source.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.mapping.key.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json string.quoted.double.json</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7dcfff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>JSON Key - Level 3</string>
			<key>scope</key>
			<string>source.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.key.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json string.quoted.double.json</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>JSON Key - Level 4</string>
			<key>scope</key>
			<string>source.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.key.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json string.quoted.double.json</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#e0af68</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>JSON Key - Level 5</string>
			<key>scope</key>
			<string>source.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.key.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json string.quoted.double.json</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#0db9d7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>JSON Key - Level 6</string>
			<key>scope</key>
			<string>source.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.key.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json string.quoted.double.json</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#73daca</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>JSON Key - Level 7</string>
			<key>scope</key>
			<string>source.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.key.json string.quoted.double.json</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>JSON Key - Level 8</string>
			<key>scope</key>
			<string>source.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.value.json meta.sequence.json meta.mapping.key.json string.quoted.double.json punctuation.definition.string.end.json</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9ece6a</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>JSON Key - value</string>
			<key>scope</key>
			<string>source.json meta.structure.dictionary.json meta.structure.dictionary.value.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json string.quoted.double.json, source.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json meta.structure.array.json meta.structure.dictionary.json meta.structure.dictionary.value.json string.quoted.double.json</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9ece6a</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Plain Punctuation</string>
			<key>scope</key>
			<string>punctuation.definition.list_item.markdown</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9abdf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Block Punctuation</string>
			<key>scope</key>
			<string>meta.block, meta.brace, punctuation.definition.block, punctuation.definition.use, punctuation.definition.group.shell, punctuation.definition.class, punctuation.definition.begin.bracket, punctuation.definition.end.bracket, punctuation.definition.parameters, punctuation.definition.arguments, punctuation.definition.dictionary, punctuation.definition.array, punctuation.section</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9abdf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Plain</string>
			<key>scope</key>
			<string>meta.jsx.children, meta.embedded.block</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>HTML text</string>
			<key>scope</key>
			<string>text.html</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#9aa5ce</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Markup Raw Inline</string>
			<key>scope</key>
			<string>text.html.markdown markup.inline.raw.markdown</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#bb9af7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Markup Raw Inline Punctuation</string>
			<key>scope</key>
			<string>text.html.markdown markup.inline.raw.markdown punctuation.definition.raw.markdown</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#4E5579</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Heading 1</string>
			<key>scope</key>
			<string>heading.1.markdown entity.name, heading.1.markdown punctuation.definition.heading.markdown</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>bold</string>
				<key>foreground</key>
				<string>#89ddff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Heading 2</string>
			<key>scope</key>
			<string>heading.2.markdown entity.name, heading.2.markdown punctuation.definition.heading.markdown</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>bold</string>
				<key>foreground</key>
				<string>#61bdf2</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Heading 3</string>
			<key>scope</key>
			<string>heading.3.markdown entity.name, heading.3.markdown punctuation.definition.heading.markdown</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>bold</string>
				<key>foreground</key>
				<string>#7aa2f7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Heading 4</string>
			<key>scope</key>
			<string>heading.4.markdown entity.name, heading.4.markdown punctuation.definition.heading.markdown</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>bold</string>
				<key>foreground</key>
				<string>#6d91de</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Heading 5</string>
			<key>scope</key>
			<string>heading.5.markdown entity.name, heading.5.markdown punctuation.definition.heading.markdown</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>bold</string>
				<key>foreground</key>
				<string>#9aa5ce</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Heading 6</string>
			<key>scope</key>
			<string>heading.6.markdown entity.name, heading.6.markdown punctuation.definition.heading.markdown</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>bold</string>
				<key>foreground</key>
				<string>#747ca1</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markup - Italic</string>
			<key>scope</key>
			<string>markup.italic, markup.italic punctuation</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>italic</string>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markup - Bold</string>
			<key>scope</key>
			<string>markup.bold, markup.bold punctuation</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>bold</string>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markup - Bold-Italic</string>
			<key>scope</key>
			<string>markup.bold markup.italic, markup.bold markup.italic punctuation</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>bold italic</string>
				<key>foreground</key>
				<string>#c0caf5</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markup - Underline</string>
			<key>scope</key>
			<string>markup.underline, markup.underline punctuation</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>underline</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Blockquote</string>
			<key>scope</key>
			<string>markup.quote punctuation.definition.blockquote.markdown</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#4e5579</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markup - Quote</string>
			<key>scope</key>
			<string>markup.quote</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>italic</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Link</string>
			<key>scope</key>
			<string>string.other.link, markup.underline.link, constant.other.reference.link.markdown, string.other.link.description.title.markdown</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#73daca</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Fenced Code Block</string>
			<key>scope</key>
			<string>markup.fenced_code.block.markdown, markup.inline.raw.string.markdown, variable.language.fenced.markdown</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#89ddff</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markdown - Separator</string>
			<key>scope</key>
			<string>meta.separator</string>
			<key>settings</key>
			<dict>
				<key>fontStyle</key>
				<string>bold</string>
				<key>foreground</key>
				<string>#444b6a</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Markup - Table</string>
			<key>scope</key>
			<string>markup.table</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#c0cefc</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Token - Info</string>
			<key>scope</key>
			<string>token.info-token</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#0db9d7</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Token - Warn</string>
			<key>scope</key>
			<string>token.warn-token</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#ffdb69</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Token - Error</string>
			<key>scope</key>
			<string>token.error-token</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#db4b4b</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Token - Debug</string>
			<key>scope</key>
			<string>token.debug-token</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#b267e6</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Apache Tag</string>
			<key>scope</key>
			<string>entity.tag.apacheconf</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#f7768e</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>Preprocessor</string>
			<key>scope</key>
			<string>meta.preprocessor</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#73daca</string>
			</dict>
		</dict>
		<dict>
			<key>name</key>
			<string>ENV value</string>
			<key>scope</key>
			<string>source.env</string>
			<key>settings</key>
			<dict>
				<key>foreground</key>
				<string>#7aa2f7</string>
			</dict>
		</dict>
	</array>
	<key>uuid</key>
	<string>06f855e3-9fb7-4fb1-b790-aef06065f34e</string>
</dict>
</plist>

================
File: modules/home-manager/shared/bat/default.nix
================
{ homeManagerConfig, config, ... }:

{
  home.file.".config/bat".source = homeManagerConfig.linkSharedApp config "bat";
}

================
File: modules/home-manager/shared/lazygit/config/config.yml
================
# Config relating to the Lazygit UI
gui:
  # The number of lines you scroll by when scrolling the main window
  scrollHeight: 2

  # If true, allow scrolling past the bottom of the content in the main window
  scrollPastBottom: true

  # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#scroll-off-margin
  scrollOffMargin: 2

  # One of: 'margin' (default) | 'jump'
  scrollOffBehavior: margin

  # If true, capture mouse events.
  # When mouse events are captured, it's a little harder to select text: e.g. requiring you to hold the option key when on macOS.
  mouseEvents: true

  # If true, do not show a warning when discarding changes in the staging view.
  skipDiscardChangeWarning: false

  # If true, do not show warning when applying/popping the stash
  skipStashWarning: false

  # If true, do not show a warning when attempting to commit without any staged files; instead stage all unstaged files.
  skipNoStagedFilesWarning: false

  # If true, do not show a warning when rewording a commit via an external editor
  skipRewordInEditorWarning: false

  # Fraction of the total screen width to use for the left side section. You may want to pick a small number (e.g. 0.2) if you're using a narrow screen, so that you can see more of the main section.
  # Number from 0 to 1.0.
  sidePanelWidth: 0.3333

  # If true, increase the height of the focused side window; creating an accordion effect.
  expandFocusedSidePanel: false

  # The weight of the expanded side panel, relative to the other panels. 2 means
  # twice as tall as the other panels. Only relevant if `expandFocusedSidePanel` is true.
  expandedSidePanelWeight: 2

  # Sometimes the main window is split in two (e.g. when the selected file has both staged and unstaged changes). This setting controls how the two sections are split.
  # Options are:
  # - 'horizontal': split the window horizontally
  # - 'vertical': split the window vertically
  # - 'flexible': (default) split the window horizontally if the window is wide enough, otherwise split vertically
  mainPanelSplitMode: flexible

  # How the window is split when in half screen mode (i.e. after hitting '+' once).
  # Possible values:
  # - 'left': split the window horizontally (side panel on the left, main view on the right)
  # - 'top': split the window vertically (side panel on top, main view below)
  enlargedSideViewLocation: left

  # One of 'auto' (default) | 'en' | 'zh-CN' | 'zh-TW' | 'pl' | 'nl' | 'ja' | 'ko' | 'ru'
  language: auto

  # Format used when displaying time e.g. commit time.
  # Uses Go's time format syntax: https://pkg.go.dev/time#Time.Format
  timeFormat: 02 Jan 06

  # Format used when displaying time if the time is less than 24 hours ago.
  # Uses Go's time format syntax: https://pkg.go.dev/time#Time.Format
  shortTimeFormat: 3:04PM

  # Config relating to colors and styles.
  # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#color-attributes
  theme:
    activeBorderColor:
      - "#ff9e64"
      - "bold"
    inactiveBorderColor:
      - "#29a4bd"
    searchingActiveBorderColor:
      - "#ff9e64"
      - "bold"
    optionsTextColor:
      - "#7aa2f7"
    selectedLineBgColor:
      - "#2e3c64"
    cherryPickedCommitFgColor:
      - "#7aa2f7"
    cherryPickedCommitBgColor:
      - "#bb9af7"
    markedBaseCommitFgColor:
      - "#7aa2f7"
    markedBaseCommitBgColor:
      - "#e0af68"
    unstagedChangesColor:
      - "#db4b4b"
    defaultFgColor:
      - "#c0caf5"

  # Config relating to the commit length indicator
  commitLength:
    # If true, show an indicator of commit message length
    show: true

  # If true, show the '5 of 20' footer at the bottom of list views
  showListFooter: true

  # If true, display the files in the file views as a tree. If false, display the files as a flat list.
  # This can be toggled from within Lazygit with the '~' key, but that will not change the default.
  showFileTree: true

  # If true, show a random tip in the command log when Lazygit starts
  showRandomTip: true

  # If true, show the command log
  showCommandLog: true

  # If true, show the bottom line that contains keybinding info and useful buttons. If false, this line will be hidden except to display a loader for an in-progress action.
  showBottomLine: true

  # If true, show jump-to-window keybindings in window titles.
  showPanelJumps: true

  # Deprecated: use nerdFontsVersion instead
  showIcons: false

  # Nerd fonts version to use.
  # One of: '2' | '3' | empty string (default)
  # If empty, do not show icons.
  nerdFontsVersion: "3"

  # If true (default), file icons are shown in the file views. Only relevant if NerdFontsVersion is not empty.
  showFileIcons: true

  # Length of author name in (non-expanded) commits view. 2 means show initials only.
  commitAuthorShortLength: 2

  # Length of author name in expanded commits view. 2 means show initials only.
  commitAuthorLongLength: 17

  # Length of commit hash in commits view. 0 shows '*' if NF icons aren't on.
  commitHashLength: 8

  # If true, show commit hashes alongside branch names in the branches view.
  showBranchCommitHash: false

  # Whether to show the divergence from the base branch in the branches view.
  # One of: 'none' | 'onlyArrow'  | 'arrowAndNumber'
  showDivergenceFromBaseBranch: none

  # Height of the command log view
  commandLogSize: 8

  # Whether to split the main window when viewing file changes.
  # One of: 'auto' | 'always'
  # If 'auto', only split the main window when a file has both staged and unstaged changes
  splitDiff: auto

  # Default size for focused window. Window size can be changed from within Lazygit with '+' and '_' (but this won't change the default).
  # One of: 'normal' (default) | 'half' | 'full'
  windowSize: normal

  # Window border style.
  # One of 'rounded' (default) | 'single' | 'double' | 'hidden'
  border: rounded

  # If true, show a seriously epic explosion animation when nuking the working tree.
  animateExplosion: true

  # Whether to stack UI components on top of each other.
  # One of 'auto' (default) | 'always' | 'never'
  portraitMode: auto

  # How things are filtered when typing '/'.
  # One of 'substring' (default) | 'fuzzy'
  filterMode: substring

  # Config relating to the spinner.
  spinner:
    # The frames of the spinner animation.
    frames:
      - '|'
      - /
      - '-'
      - \

    # The "speed" of the spinner in milliseconds.
    rate: 50

  # Status panel view.
  # One of 'dashboard' (default) | 'allBranchesLog'
  statusPanelView: dashboard

  # If true, jump to the Files panel after popping a stash
  switchToFilesAfterStashPop: true

  # If true, jump to the Files panel after applying a stash
  switchToFilesAfterStashApply: true

# Config relating to git
git:
  # See https://github.com/jesseduffield/lazygit/blob/master/docs/Custom_Pagers.md
  paging:
    # Value of the --color arg in the git diff command. Some pagers want this to be set to 'always' and some want it set to 'never'
    colorArg: always

    # e.g.
    # diff-so-fancy
    # delta --dark --paging=never
    # ydiff -p cat -s --wrap --width={{columnWidth}}
    pager: ""

    # If true, Lazygit will use whatever pager is specified in `$GIT_PAGER`, `$PAGER`, or your *git config*. If the pager ends with something like ` | less` we will strip that part out, because less doesn't play nice with our rendering approach. If the custom pager uses less under the hood, that will also break rendering (hence the `--paging=never` flag for the `delta` pager).
    useConfig: false

    # e.g. 'difft --color=always'
    externalDiffCommand: ""

  # Config relating to committing
  commit:
    # If true, pass '--signoff' flag when committing
    signOff: false

    # Automatic WYSIWYG wrapping of the commit message as you type
    autoWrapCommitMessage: true

    # If autoWrapCommitMessage is true, the width to wrap to
    autoWrapWidth: 72

  # Config relating to merging
  merging:
    # If true, run merges in a subprocess so that if a commit message is required, Lazygit will not hang
    # Only applicable to unix users.
    manualCommit: false

    # Extra args passed to `git merge`, e.g. --no-ff
    args: ""

    # The commit message to use for a squash merge commit. Can contain "{{selectedRef}}" and "{{currentBranch}}" placeholders.
    squashMergeMessage: Squash merge {{selectedRef}} into {{currentBranch}}

  # list of branches that are considered 'main' branches, used when displaying commits
  mainBranches:
    - master
    - main

  # Prefix to use when skipping hooks. E.g. if set to 'WIP', then pre-commit hooks will be skipped when the commit message starts with 'WIP'
  skipHookPrefix: WIP

  # If true, periodically fetch from remote
  autoFetch: true

  # If true, periodically refresh files and submodules
  autoRefresh: true

  # If true, pass the --all arg to git fetch
  fetchAll: true

  # If true, lazygit will automatically stage files that used to have merge
  # conflicts but no longer do; and it will also ask you if you want to
  # continue a merge or rebase if you've resolved all conflicts. If false, it
  # won't do either of these things.
  autoStageResolvedConflicts: true

  # Command used when displaying the current branch git log in the main window
  branchLogCmd: git log --graph --color=always --abbrev-commit --decorate --date=relative --pretty=medium {{branchName}} --

  # Command used to display git log of all branches in the main window.
  # Deprecated: User `allBranchesLogCmds` instead.
  allBranchesLogCmd: git log --graph --all --color=always --abbrev-commit --decorate --date=relative  --pretty=medium

  # If true, do not spawn a separate process when using GPG
  overrideGpg: false

  # If true, do not allow force pushes
  disableForcePushing: false

  # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#predefined-commit-message-prefix
  commitPrefix:
    # pattern to match on. E.g. for 'feature/AB-123' to match on the AB-123 use "^\\w+\\/(\\w+-\\w+).*"
    pattern: ""

    # Replace directive. E.g. for 'feature/AB-123' to start the commit message with 'AB-123 ' use "[$1] "
    replace: ""

  # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#predefined-branch-name-prefix
  branchPrefix: ""

  # If true, parse emoji strings in commit messages e.g. render :rocket: as 🚀
  # (This should really be under 'gui', not 'git')
  parseEmoji: false

  # Config for showing the log in the commits view
  log:
    # One of: 'date-order' | 'author-date-order' | 'topo-order' | 'default'
    # 'topo-order' makes it easier to read the git log graph, but commits may not
    # appear chronologically. See https://git-scm.com/docs/
    #
    # Deprecated: Configure this with `Log menu -> Commit sort order` (<c-l> in the commits window by default).
    order: topo-order

    # This determines whether the git graph is rendered in the commits panel
    # One of 'always' | 'never' | 'when-maximised'
    #
    # Deprecated: Configure this with `Log menu -> Show git graph` (<c-l> in the commits window by default).
    showGraph: always

    # displays the whole git graph by default in the commits view (equivalent to passing the `--all` argument to `git log`)
    showWholeGraph: false

  # When copying commit hashes to the clipboard, truncate them to this
  # length. Set to 40 to disable truncation.
  truncateCopiedCommitHashesTo: 12

# Periodic update checks
update:
  # One of: 'prompt' (default) | 'background' | 'never'
  method: prompt

  # Period in days between update checks
  days: 14

# Background refreshes
refresher:
  # File/submodule refresh interval in seconds.
  # Auto-refresh can be disabled via option 'git.autoRefresh'.
  refreshInterval: 10

  # Re-fetch interval in seconds.
  # Auto-fetch can be disabled via option 'git.autoFetch'.
  fetchInterval: 60

# If true, show a confirmation popup before quitting Lazygit
confirmOnQuit: false

# If true, exit Lazygit when the user presses escape in a context where there is nothing to cancel/close
quitOnTopLevelReturn: true

# Config relating to things outside of Lazygit like how files are opened, copying to clipboard, etc
os:
  # Command for editing a file. Should contain "{{filename}}".
  edit: ""

  # Command for editing a file at a given line number. Should contain
  # "{{filename}}", and may optionally contain "{{line}}".
  editAtLine: ""

  # Same as EditAtLine, except that the command needs to wait until the
  # window is closed.
  editAtLineAndWait: ""

  # For opening a directory in an editor
  openDirInEditor: ""

  # A built-in preset that sets all of the above settings. Supported presets
  # are defined in the getPreset function in editor_presets.go.
  editPreset: ""

  # Command for opening a file, as if the file is double-clicked. Should
  # contain "{{filename}}", but doesn't support "{{line}}".
  open: ""

  # Command for opening a link. Should contain "{{link}}".
  openLink: ""

  # EditCommand is the command for editing a file.
  # Deprecated: use Edit instead. Note that semantics are different:
  # EditCommand is just the command itself, whereas Edit contains a
  # "{{filename}}" variable.
  editCommand: ""

  # EditCommandTemplate is the command template for editing a file
  # Deprecated: use EditAtLine instead.
  editCommandTemplate: ""

  # OpenCommand is the command for opening a file
  # Deprecated: use Open instead.
  openCommand: ""

  # OpenLinkCommand is the command for opening a link
  # Deprecated: use OpenLink instead.
  openLinkCommand: ""

  # CopyToClipboardCmd is the command for copying to clipboard.
  # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#custom-command-for-copying-to-and-pasting-from-clipboard
  copyToClipboardCmd: ""

  # ReadFromClipboardCmd is the command for reading the clipboard.
  # See https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md#custom-command-for-copying-to-and-pasting-from-clipboard
  readFromClipboardCmd: ""

# If true, don't display introductory popups upon opening Lazygit.
disableStartupPopups: false

# What to do when opening Lazygit outside of a git repo.
# - 'prompt': (default) ask whether to initialize a new repo or open in the most recent repo
# - 'create': initialize a new repo
# - 'skip': open most recent repo
# - 'quit': exit Lazygit
notARepository: prompt

# If true, display a confirmation when subprocess terminates. This allows you to view the output of the subprocess before returning to Lazygit.
promptToReturnFromSubprocess: true

# Keybindings
keybinding:
  universal:
    quit: q
    quit-alt1: <c-c>
    return: <esc>
    quitWithoutChangingDirectory: Q
    togglePanel: <tab>
    prevItem: <up>
    nextItem: <down>
    prevItem-alt: k
    nextItem-alt: j
    prevPage: ','
    nextPage: .
    scrollLeft: H
    scrollRight: L
    gotoTop: <
    gotoBottom: '>'
    toggleRangeSelect: v
    rangeSelectDown: <s-down>
    rangeSelectUp: <s-up>
    prevBlock: <left>
    nextBlock: <right>
    prevBlock-alt: h
    nextBlock-alt: l
    nextBlock-alt2: <tab>
    prevBlock-alt2: <backtab>
    jumpToBlock:
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
    nextMatch: "n"
    prevMatch: "N"
    startSearch: /
    optionMenu: <disabled>
    optionMenu-alt1: '?'
    select: <space>
    goInto: <enter>
    confirm: <enter>
    confirmInEditor: <a-enter>
    remove: d
    new: "n"
    edit: e
    openFile: o
    scrollUpMain: <pgup>
    scrollDownMain: <pgdown>
    scrollUpMain-alt1: K
    scrollDownMain-alt1: J
    scrollUpMain-alt2: <c-u>
    scrollDownMain-alt2: <c-d>
    executeShellCommand: ':'
    createRebaseOptionsMenu: m

    # 'Files' appended for legacy reasons
    pushFiles: P

    # 'Files' appended for legacy reasons
    pullFiles: p
    refresh: R
    createPatchOptionsMenu: <c-p>
    nextTab: ']'
    prevTab: '['
    nextScreenMode: +
    prevScreenMode: _
    undo: z
    redo: <c-z>
    filteringMenu: <c-s>
    diffingMenu: W
    diffingMenu-alt: <c-e>
    copyToClipboard: <c-o>
    openRecentRepos: <c-r>
    submitEditorText: <enter>
    extrasMenu: '@'
    toggleWhitespaceInDiffView: <c-w>
    increaseContextInDiffView: '}'
    decreaseContextInDiffView: '{'
    increaseRenameSimilarityThreshold: )
    decreaseRenameSimilarityThreshold: (
    openDiffTool: <c-t>
  status:
    checkForUpdate: u
    recentRepos: <enter>
    allBranchesLogGraph: a
  files:
    commitChanges: c
    commitChangesWithoutHook: w
    amendLastCommit: A
    commitChangesWithEditor: C
    findBaseCommitForFixup: <c-f>
    confirmDiscard: x
    ignoreFile: i
    refreshFiles: r
    stashAllChanges: s
    viewStashOptions: S
    toggleStagedAll: a
    viewResetOptions: D
    fetch: f
    toggleTreeView: '`'
    openMergeTool: M
    openStatusFilter: <c-b>
    copyFileInfoToClipboard: "y"
  branches:
    createPullRequest: o
    viewPullRequestOptions: O
    copyPullRequestURL: <c-y>
    checkoutBranchByName: c
    forceCheckoutBranch: F
    rebaseBranch: r
    renameBranch: R
    mergeIntoCurrentBranch: M
    viewGitFlowOptions: i
    fastForward: f
    createTag: T
    pushTag: P
    setUpstream: u
    fetchRemote: f
    sortOrder: s
  worktrees:
    viewWorktreeOptions: w
  commits:
    squashDown: s
    renameCommit: r
    renameCommitWithEditor: R
    viewResetOptions: g
    markCommitAsFixup: f
    createFixupCommit: F
    squashAboveCommits: S
    moveDownCommit: <c-j>
    moveUpCommit: <c-k>
    amendToCommit: A
    resetCommitAuthor: a
    pickCommit: p
    revertCommit: t
    cherryPickCopy: C
    pasteCommits: V
    markCommitAsBaseForRebase: B
    tagCommit: T
    checkoutCommit: <space>
    resetCherryPick: <c-R>
    copyCommitAttributeToClipboard: "y"
    openLogMenu: <c-l>
    openInBrowser: o
    viewBisectOptions: b
    startInteractiveRebase: i
  amendAttribute:
    resetAuthor: a
    setAuthor: A
    addCoAuthor: c
  stash:
    popStash: g
    renameStash: r
  commitFiles:
    checkoutCommitFile: c
  main:
    toggleSelectHunk: a
    pickBothHunks: b
    editSelectHunk: E
  submodules:
    init: i
    update: u
    bulkMenu: b
  commitMessage:
    commitMenu: <c-o>

================
File: modules/home-manager/shared/lazygit/default.nix
================
{ homeManagerConfig, config, ... }:

{
  programs.lazygit.enable = true;

  home.file.".config/lazygit".source = homeManagerConfig.linkSharedApp config "lazygit";
}

================
File: modules/home-manager/shared/neovim/config/lua/configs/lazy.lua
================
return {
  defaults = { lazy = true },
  install = { colorscheme = { "tokyonight" } },

  ui = {
    icons = {
      ft = "",
      lazy = "󰂠 ",
      loaded = "",
      not_loaded = "",
    },
  },

  performance = {
    rtp = {
      disabled_plugins = {
        "2html_plugin",
        "tohtml",
        "getscript",
        "getscriptPlugin",
        "gzip",
        "logipat",
        "netrw",
        "netrwPlugin",
        "netrwSettings",
        "netrwFileHandlers",
        "matchit",
        "tar",
        "tarPlugin",
        "rrhelper",
        "spellfile_plugin",
        "vimball",
        "vimballPlugin",
        "zip",
        "zipPlugin",
        "tutor",
        "rplugin",
        "syntax",
        "synmenu",
        "optwin",
        "compiler",
        "bugreport",
        "ftplugin",
      },
    },
  },
}

================
File: modules/home-manager/shared/neovim/config/lua/configs/mappings.lua
================
require "nvchad.mappings"

local opts = { noremap = true, silent = true }
local map = vim.keymap.set

-- Formatting
map("n", "<leader>ff", function()
  require("conform").format { lsp_fallback = true }
end, { desc = "general Format File" })

-- Window
map("n", "<C-h>", "<CMD>wincmd h<CR>", opts)
map("n", "<C-k>", "<CMD>wincmd k<CR>", opts)
map("n", "<C-l>", "<CMD>wincmd l<CR>", opts)
map("n", "<C-j>", "<CMD>wincmd j<CR>", opts)

-- Search
map("n", "<CR>", "<CMD>noh<CR><CR>", opts)

-- Terminal
map({ "n", "t" }, "<C-t>", function()
  require("nvchad.term").toggle { pos = "float", id = "floatTerm" }
end, { desc = "terminal Toggle Floating Term" })

map({ "n" }, "<leader>gg", function()
  require("nvchad.term").toggle { pos = "float", id = "floatTerm-git", cmd = 'lazygit' }
end, { desc = "terminal Toggle LazyGit" })
-- map("n", "<leader>gg", "<cmd>LazyGit<cr>", { desc = "lazygit Launch LazyGit" })

-- Telescope
map("n", "<leader>fp", "<cmd>Telescope find_files<cr>", { desc = "telescope Find Files" })
map("n", "<leader>fi", "<cmd>Telescope live_grep<CR>", { desc = "telescope Live Grep" })
map("n", "<leader>fb", "<cmd>Telescope buffers<CR>", { desc = "telescope Find Buffers" })
map("n", "<leader>fh", "<cmd>Telescope help_tags<CR>", { desc = "telescope Help Page" })
map("n", "<leader>fm", "<cmd>Telescope marks<CR>", { desc = "telescope Find Marks" })
map("n", "<leader>fo", "<cmd>Telescope oldfiles<CR>", { desc = "telescope Find Oldfiles" })
map(
  "n",
  "<leader>fa",
  "<cmd>Telescope find_files follow=true no_ignore=true hidden=true<CR>",
  { desc = "telescope Find All Files" }
)
map("n", "<leader>ft", function()
  require("nvchad.themes").open()
end, { desc = "telescope Show Themes" })

================
File: modules/home-manager/shared/neovim/config/lua/configs/options.lua
================
require("nvchad.options")

-- Vim Config
vim.g.autoformat = true

vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.autochdir = true
vim.opt.rnu = true
vim.opt.expandtab = true
vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.softtabstop = 2

-- Clipboard
local osc52 = require("vim.ui.clipboard.osc52")

vim.opt.clipboard = "unnamedplus"
vim.g.clipboard = {
  name = "OSC 52",
  copy = {
    ["+"] = osc52.copy("+"),
    ["*"] = osc52.copy("*"),
  },
  paste = {
    ["+"] = osc52.paste("+"),
    ["*"] = osc52.paste("*"),
  },
}

-- Highlight Yank
vim.cmd([[
  augroup highlight_yank
  autocmd!
  au TextYankPost * silent! lua vim.highlight.on_yank({ higroup="Visual", timeout=200 })
  augroup END
]])

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/completions.lua
================
return {
  "saghen/blink.cmp",
  lazy = false,
  dependencies = "rafamadriz/friendly-snippets",
  version = "v0.*",
  ---@module 'blink.cmp'
  ---@type blink.cmp.Config
  opts = {
    highlight = {
      use_nvim_cmp_as_default = true,
    },
    nerd_font_variant = "normal",
    opts_extend = { "sources.completion.enabled_providers" },
    trigger = { signature_help = { enabled = true } },
    keymap = { preset = "super-tab", },
    -- keymap = {
    --   show = "<C-CR>",
    --   show_documentation = "<C-CR>",
    --   hide_documentation = "<C-CR>",
    -- },
    windows = {
      documentation = {
        min_width = 15,
        max_width = 50,
        max_height = 15,
        auto_show = true,
        border = "single",
        auto_show_delay_ms = 200,
        winhighlight = 'Normal:BlinkCmpMenu,FloatBorder:BlinkCmpDocBorder,CursorLine:BlinkCmpDocCursorLine,Search:None',
      },
      autocomplete = {
        min_width = 25,
        border = "single",
        winhighlight = 'Normal:BlinkCmpMenu,FloatBorder:BlinkCmpDocBorder,CursorLine:BlinkCmpDocCursorLine,Search:None',
        cycle = { from_bottom = true, from_top = false },
        draw = function(ctx)
          local iconHl = vim.g.colors_name:find("tokyonight") and "BlinkCmpKind" or "BlinkCmpKind" .. ctx.kind

          return {
            " ",
            {
              ctx.item.label,
              fill = true,
              max_width = 50,
            },
            " ",
            { ctx.kind_icon, hl_group = iconHl },
            " ",
          }
        end,
      },
    },
    kind_icons = {
      Text = "󰦨",
      Method = "󰊕",
      Function = "󰊕",
      Constructor = "",
      Field = "󰇽",
      Variable = "󰂡",
      Class = "⬟",
      Interface = "",
      Module = "",
      Property = "󰜢",
      Unit = "",
      Value = "󰎠",
      Enum = "",
      Keyword = "󰌋",
      Snippet = "󰒕",
      Color = "󰏘",
      Reference = "",
      File = "󰉋",
      Folder = "󰉋",
      EnumMember = "",
      Constant = "󰏿",
      Struct = "",
      Event = "",
      Operator = "󰆕",
      TypeParameter = "󰅲",
    },
  },
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/lsp.lua
================
return {
  {
    "neovim/nvim-lspconfig",
    dependencies = { "saghen/blink.cmp" },
    lazy = false,
    config = function(_, opts)
      local lspconfig = require("lspconfig")

      lspconfig.lua_ls.setup {
        settings = {
          Lua = {
            diagnostics = {
              globals = {
                "vim",
                "use",
              }
            }
          }
        }
      }
      lspconfig.bashls.setup {}
      lspconfig.yamlls.setup {}
      lspconfig.clangd.setup {}
      lspconfig.ts_ls.setup {
        settings = {
          ts_ls = { formatter = { command = "prettierd" } }
        }
      }
      lspconfig.nil_ls.setup {
        settings = {
          nil_ls = { formatter = { command = "nixfmt" } },
        },
      }

      for server, config in pairs(opts.servers or {}) do
        config.capabilities = require('blink.cmp').get_lsp_capabilities(config.capabilities)
        lspconfig[server].setup(config)
      end

      vim.keymap.set("n", "<leader>sh", vim.lsp.buf.hover, { desc = "[S]how [H]over Info" })
      vim.keymap.set("n", "<leader>gi", vim.lsp.buf.definition, { desc = "[G]o to [I]mplementation" })
      vim.keymap.set("n", "<leader>gr", vim.lsp.buf.references, { desc = "[G]o to [R]eferences" })
      vim.keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, { desc = "[C]ode [A]ctions" })
    end,
  },
  {
    "smjonas/inc-rename.nvim",
    lazy = false,
    config = function()
      require("inc_rename").setup()

      vim.keymap.set("n", "<leader>rn", ":IncRename ", { desc = "[R]e[n]ame" })
    end,
  },
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/markdown.lua
================
return {
  "OXY2DEV/markview.nvim",
  lazy = false,
  dependencies = {
    "nvim-treesitter/nvim-treesitter",
    "nvim-tree/nvim-web-devicons"
  }
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/mini.lua
================
return {
	{
		"echasnovski/mini.surround",
		lazy = false,
		version = false,
		opts = {},
	},
	{
		"echasnovski/mini.indentscope",
		lazy = false,
		version = false,
		opts = {},
	},
	{
		"echasnovski/mini.pairs",
		lazy = false,
		version = false,
		opts = {},
	},
	{
		"echasnovski/mini-git",
		main = "mini.git",
		lazy = false,
		version = false,
		opts = {},
	},
	{
		"echasnovski/mini.diff",
		lazy = false,
		version = false,
		opts = {},
	},
	{
		"echasnovski/mini.bracketed",
		lazy = false,
		version = false,
		opts = {},
	},
	{
		"echasnovski/mini.move",
		lazy = false,
		version = false,
		opts = {
			options = { reindent_linewise = true },
			mappings = {
				-- Visual mode
				left = "",
				right = "",
				down = "<C-S-j>",
				up = "<C-S-k>",

				-- Normal mode
				line_left = "",
				line_right = "",
        line_down = "<C-S-j>",
				line_up = "<C-S-k>",
			},
		},
	},
	{
		"echasnovski/mini.icons",
		lazy = false,
		version = false,
		specs = { { "nvim-tree/nvim-web-devicons", enabled = false, optional = true } },
		opts = {},
		init = function()
			package.preload["nvim-web-devicons"] = function()
				require("mini.icons").mock_nvim_web_devicons()
				return package.loaded["nvim-web-devicons"]
			end
		end,
	},
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/misc.lua
================
return {
  {
    "folke/which-key.nvim",
    event = "VeryLazy",
    init = function()
      vim.o.timeout = true
      vim.o.timeoutlen = 300
    end,
    keys = {
      { "U", "<cmd>redo<cr>" },
    },
    opts = {},
  },
  {
    "jinh0/eyeliner.nvim",
    lazy = false,
    config = function()
      require("eyeliner").setup({
        highlight_on_key = true,
        dim = false,
      })
    end,
  },
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/neotree.lua
================
return {
  "nvim-neo-tree/neo-tree.nvim",
  lazy = false,
  cmd = "Neotree",
  dependencies = {
    "nvim-lua/plenary.nvim",
    "nvim-tree/nvim-web-devicons",
    "MunifTanjim/nui.nvim",
  },
  opts = {
    window = {
      position = "right",
    },
    filesystem = {
      filtered_items = {
        hide_dotfiles = false,
      },
      follow_current_file = {
        leave_dirs_open = true,
        enabled = true,
      },
    },
  },
  keys = {
    {
      "<leader>ns",
      ":Neotree toggle=true source=filesystem action=focus<CR>",
      mode = "n",
      desc = "[N]eotree [S]how",
    },
  },
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/statusline.lua
================
return {
  "nvim-lualine/lualine.nvim",
  dependencies = { "nvim-tree/nvim-web-devicons" },
  lazy = false,
  opts = {
    options = {
      theme = "tokyonight",
      component_separators = { left = "|", right = "|" },
      section_separators = { left = "", right = "" },
    },
  },
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/telescope.lua
================
return {
	"nvim-telescope/telescope.nvim",
	dependencies = {
		"nvim-lua/plenary.nvim",
		"ahmedkhalf/project.nvim",
	},
	lazy = true,
	keys = {
		{ "<leader>fp", "<cmd>Telescope find_files<cr>", mode = "n", desc = "[F]ind [P]roject files" },
		{ "<leader>fg", "<cmd>Telescope git_files<cr>", mode = "n", desc = "[F]ind [G]it files" },
		{ "<leader>fi", "<cmd>Telescope live_grep<cr>", mode = "n", desc = "[F]ind [I]n files" },
		{ "<leader>rp", "<cmd>Telescope projects<cr>", mode = "n", desc = "Show [R]ecent [P]rojects" },
	},
	config = function()
		require("project_nvim").setup({
			detection_methods = { "pattern" },
			patterns = { ".git" },
		})

		local telescope = require("telescope")
		telescope.load_extension("projects")
		telescope.setup({
			path_display = { "shorten" },
		})
	end,
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/terminal.lua
================
return {
	"akinsho/toggleterm.nvim",
	version = "*",
	lazy = true,
	config = true,
	opts = {
		direction = "float",
	},
	keys = {
		{ "<c-t>", '<cmd>exe v:count1 . "ToggleTerm"<cr>' },
	},
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/theme.lua
================
return {
	"folke/tokyonight.nvim",
	lazy = false,
	priority = 1000,
	opts = {
		transparent = true,
		styles = {
			sidebars = "transparent",
			floats = "transparent",
		},
	},
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/bfpimentel/treesitter.lua
================
return {
  "nvim-treesitter/nvim-treesitter",
  build = ":TSUpdate",
  lazy = false,
  config = function(_, opts)
    require('nvim-treesitter.configs').setup(opts)
  end,
  opts = {
    sync_install = false,
    auto_install = true,
    highlight = { enable = true, additional_vim_regex_highlighting = false },
    indent = { enable = true },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = "<C-n>",
        node_incremental = "<C-n>",
        node_decremental = "<C-r>",
        scope_incremental = "<C-s>",
      },
    },
    ensure_installed = {
      "typescript",
      "c",
      "lua",
      "nix",
      "vim",
      "vimdoc",
      "query",
      "elixir",
      "heex",
      "javascript",
      "html",
      "markdown",
      "markdown_inline"
    },
  },
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/nvchad/conform.lua
================
return {
  "stevearc/conform.nvim",
  lazy = false,
  opts = {
    formatters_by_ft = {
      lua = { "lua_ls" },
      sh = { "bashls" },
      yaml = { "yamlls" },
      nix = { "nixfmt" },
      typescript = { "prettierd" },
      typescriptreact = { "prettierd" },
      javascript = { "prettierd" },
      javascriptreact = { "prettierd" },
    },
    prettier = {
      require_cwd = true,
    },
  },
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/nvchad/git.lua
================
return {
	"kdheepak/lazygit.nvim",
	cmd = {
		"LazyGit",
		"LazyGitConfig",
		"LazyGitCurrentFile",
		"LazyGitFilter",
		"LazyGitFilterCurrentFile",
	},
	dependencies = {
		"nvim-lua/plenary.nvim",
	},
	keys = {
		{ "<leader>gg", "<cmd>LazyGit<cr>", desc = "LazyGit" },
	},
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/nvchad/lsp.lua
================
return {
  "neovim/nvim-lspconfig",
  config = function()
    local lspconfig = require("lspconfig")
    local nvlsp = require("nvchad.configs.lspconfig")

    nvlsp.defaults()

    local servers = { "bashls", "yamlls", "clangd", "html", "cssls" }

    for _, lsp in ipairs(servers) do
      lspconfig[lsp].setup {
        on_attach = nvlsp.on_attach,
        on_init = nvlsp.on_init,
        capabilities = nvlsp.capabilities,
      }
    end

    lspconfig.lua_ls.setup {
      on_attach = nvlsp.on_attach,
      on_init = nvlsp.on_init,
      capabilities = nvlsp.capabilities,
      settings = {
        Lua = {
          diagnostics = {
            globals = {
              "vim",
              "use",
            }
          }
        }
      }
    }

    lspconfig.nil_ls.setup {
      on_attach = nvlsp.on_attach,
      on_init = nvlsp.on_init,
      capabilities = nvlsp.capabilities,
      cmd = { "nil" },
      settings = {
        ["nil"] = {
          formatting = {
            command = { "nixfmt" },
          },
        },
      },
    }

    lspconfig.ts_ls.setup {
      on_attach = nvlsp.on_attach,
      on_init = nvlsp.on_init,
      capabilities = nvlsp.capabilities,
      settings = {
        ts_ls = { formatter = { command = "prettierd" } }
      }
    }
  end,
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/nvchad/markdown.lua
================
return {
  "OXY2DEV/markview.nvim",
  lazy = false,
  dependencies = {
    "nvim-treesitter/nvim-treesitter",
    "nvim-tree/nvim-web-devicons"
  }
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/nvchad/mini.lua
================
return {
	{
		"echasnovski/mini.surround",
		lazy = false,
		version = false,
		opts = {},
	},
	{
		"echasnovski/mini.bracketed",
		lazy = false,
		version = false,
		opts = {},
	},
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/nvchad/tree.lua
================
return {
  "nvim-tree/nvim-tree.lua",
  cmd = { "NvimTreeToggle" },
  lazy = false,
  opts = function()
    local opts = require("nvchad.configs.nvimtree")
    opts.view.side = "right"
    opts.view.width = 40
    opts.renderer.icons.git_placement = "right_align"
    return opts
  end
}

================
File: modules/home-manager/shared/neovim/config/lua/plugins/nvchad/treesitter.lua
================
return {
  "nvim-treesitter/nvim-treesitter",
  build = ":TSUpdate",
  lazy = false,
  config = function(_, opts)
    require('nvim-treesitter.configs').setup(opts)
  end,
  opts = {
    sync_install = false,
    auto_install = true,
    highlight = { enable = true, additional_vim_regex_highlighting = false },
    indent = { enable = true },
    incremental_selection = {
      enable = true,
      keymaps = {
        init_selection = "<C-n>",
        node_incremental = "<C-n>",
        node_decremental = "<C-r>",
        scope_incremental = "<C-s>",
      },
    },
    ensure_installed = {
      "typescript",
      "c",
      "lua",
      -- "nix",
      "vim",
      "vimdoc",
      "query",
      "elixir",
      "heex",
      "javascript",
      "html",
      "markdown",
      "markdown_inline"
    },
  },
}

================
File: modules/home-manager/shared/neovim/config/lua/chadrc.lua
================
---@class ChadrcConfig
local M = {}

M.base46 = {
  theme = "tokyonight",
  transparency = true,
  hl_override = {
    Comment = { italic = true },
    ["@comment"] = { italic = true },
  },
}

M.term = {
  float = {
    row = 0.05,
    col = 0.05,
    width = 0.875,
    height = 0.8,
    border = "single",
  },
}

M.ui = {
  tabufline = {
    enabled = false,
  },
  statusline = {
    separator_style = "block",
  },
}

M.nvdash = {
  load_on_startup = true,
  header = {
    "",
    "",
    " ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣤⣴⣦⣤⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ",
    " ⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⠿⠿⠿⠿⣿⣿⣿⣿⣶⣤⡀⠀⠀⠀⠀⠀⠀ ",
    " ⠀⠀⠀⠀⣠⣾⣿⣿⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⢿⣿⣿⣶⡀⠀⠀⠀⠀ ",
    " ⠀⠀⠀⣴⣿⣿⠟⠁⠀⠀⠀⣶⣶⣶⣶⡆⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣦⠀⠀⠀ ",
    " ⠀⠀⣼⣿⣿⠋⠀⠀⠀⠀⠀⠛⠛⢻⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣧⠀⠀ ",
    " ⠀⢸⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⡇⠀ ",
    " ⠀⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⠀ ",
    " ⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⡟⢹⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⣹⣿⣿⠀ ",
    " ⠀⣿⣿⣷⠀⠀⠀⠀⠀⠀⣰⣿⣿⠏⠀⠀⢻⣿⣿⡄⠀⠀⠀⠀⠀⠀⣿⣿⡿⠀ ",
    " ⠀⢸⣿⣿⡆⠀⠀⠀⠀⣴⣿⡿⠃⠀⠀⠀⠈⢿⣿⣷⣤⣤⡆⠀⠀⣰⣿⣿⠇⠀ ",
    " ⠀⠀⢻⣿⣿⣄⠀⠀⠾⠿⠿⠁⠀⠀⠀⠀⠀⠘⣿⣿⡿⠿⠛⠀⣰⣿⣿⡟⠀⠀ ",
    " ⠀⠀⠀⠻⣿⣿⣧⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⠏⠀⠀⠀ ",
    " ⠀⠀⠀⠀⠈⠻⣿⣿⣷⣤⣄⡀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⠟⠁⠀⠀⠀⠀ ",
    " ⠀⠀⠀⠀⠀⠀⠈⠛⠿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⣿⣿⠿⠋⠁⠀⠀⠀⠀⠀⠀ ",
    " ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠛⠛⠛⠛⠛⠛⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ",
    "",
    "",
  },
}

M.cheatsheet = {
  theme = "grid",
}

return M

================
File: modules/home-manager/shared/neovim/config/.gitignore
================
lazy-lock.json

================
File: modules/home-manager/shared/neovim/config/.stylua.toml
================
column_width = 120
line_endings = "Unix"
indent_type = "Spaces"
indent_width = 2
quote_style = "AutoPreferDouble"
call_parentheses = "None"

================
File: modules/home-manager/shared/neovim/config/init.lua
================
vim.g.base46_cache = vim.fn.stdpath "data" .. "/base46/"
vim.g.mapleader = " "

local lazypath = vim.fn.stdpath "data" .. "/lazy/lazy.nvim"

if not vim.uv.fs_stat(lazypath) then
  local repo = "https://github.com/folke/lazy.nvim.git"
  vim.fn.system { "git", "clone", "--filter=blob:none", repo, "--branch=stable", lazypath }
end

vim.opt.rtp:prepend(lazypath)

local lazy_config = require("configs.lazy")

---@diagnostic disable-next-line: different-requires
require("lazy").setup({
  -- { "LazyVim/LazyVim" },
  -- { import = "plugins/bfpimentel" },
  {
    "NvChad/NvChad",
    lazy = false,
    branch = "v2.5",
    import = "nvchad.plugins",
  },
  { import = "plugins/nvchad" },
}, lazy_config)

-- load theme
dofile(vim.g.base46_cache .. "defaults")
dofile(vim.g.base46_cache .. "statusline")

require("configs.options")

require("nvchad.autocmds")

vim.schedule(function()
  require("configs.mappings")
end)

================
File: modules/home-manager/shared/neovim/default.nix
================
{
  pkgs,
  homeManagerConfig,
  config,
  ...
}:

{
  programs.neovim = {
    enable = true;
    defaultEditor = true;
  };

  home.file.".config/nvim".source = homeManagerConfig.linkSharedApp config "neovim";
}

================
File: modules/home-manager/shared/nh/default.nix
================
{ ... }:

{
  programs.nh = {
    enable = true;
    flake = "/etc/nixos";
    clean = {
      enable = true;
      
      extraArgs = "--keep-since 7d";
    };
  };
}

================
File: modules/home-manager/shared/ssh/default.nix
================
{
  system,
  config,
  ...
}:

let
  home = config.home.homeDirectory;
in
{
  programs.ssh = {
    enable = true;
    extraConfig = ''
      AddKeysToAgent yes
      ServerAliveInterval 60
    '';
    matchBlocks =
      if (system != "aarch64-darwin") then
        {
          "github.com" = {
            hostname = "github.com";
            user = "bfpimentel";
            identityFile = "${home}/.ssh/id_personal";
          };
        }
      else
        {
          "github.com-personal" = {
            hostname = "github.com";
            user = "bfpimentel";
            identityFile = "${home}/.ssh/id_personal";
          };
          "github.com-owlet" = {
            hostname = "github.com";
            user = "bfpimentel-owlet";
            identityFile = "${home}/.ssh/id_owlet";
          };
          "malenia" = {
            hostname = "10.22.4.2";
            user = "bruno";
            identityFile = "${home}/.ssh/id_personal";
          };
          "godwyn" = {
            hostname = "10.22.4.4";
            user = "bruno";
            identityFile = "${home}/.ssh/id_personal";
          };
          "miquella" = {
            hostname = "159.112.184.83";
            user = "bruno";
            identityFile = "${home}/.ssh/id_personal";
          };
          "spark-suited" = {
            hostname = "135.181.157.124";
            user = "spark";
            identityFile = "${home}/.ssh/id_spark_suited";
          };
        };
  };
}

================
File: modules/home-manager/shared/zsh/config/plugins/antigen.zsh
================
######################################################################
# This file was autogenerated by `make`. Do not edit it directly!
######################################################################
# Antigen: A simple plugin manager for zsh
 # Authors: Shrikant Sharat Kandula
 #          and Contributors <https://github.com/zsh-users/antigen/contributors>
 # Homepage: http://antigen.sharats.me
 # License: MIT License <mitl.sharats.me>
zmodload zsh/parameter
autoload -U is-at-least

# While boot.zsh is part of the ext/cache functionallity it may be disabled
# with ANTIGEN_CACHE flag, and it's always compiled with antigen.zsh
if [[ $ANTIGEN_CACHE != false ]]; then
  ANTIGEN_CACHE="${ANTIGEN_CACHE:-${ADOTDIR:-$HOME/.antigen}/init.zsh}"
  ANTIGEN_RSRC="${ANTIGEN_RSRC:-${ADOTDIR:-$HOME/.antigen}/.resources}"

  # It may not be necessary to check ANTIGEN_AUTO_CONFIG.
  if [[ $ANTIGEN_AUTO_CONFIG != false && -f $ANTIGEN_RSRC ]]; then
    # Check the list of files for configuration changes (uses -nt comp)
    ANTIGEN_CHECK_FILES=$(cat $ANTIGEN_RSRC 2> /dev/null)
    ANTIGEN_CHECK_FILES=(${(@f)ANTIGEN_CHECK_FILES})

    for config in $ANTIGEN_CHECK_FILES; do
      if [[ "$config" -nt "$config.zwc" ]]; then
        # Flag configuration file as newer
        { zcompile "$config" } &!
        # Kill cache file in order to force full loading (see a few lines below)
        [[ -f "$ANTIGEN_CACHE" ]] && rm -f "$ANTIGEN_CACHE"
      fi
    done
  fi

  # If there is a cache file do load from it
  if [[ -f $ANTIGEN_CACHE && ! $_ANTIGEN_CACHE_LOADED == true ]]; then
    # Wrap antigen in order to defer cache source until `antigen-apply`
    antigen() {
      if [[ $1 == "apply" ]]; then
        source "$ANTIGEN_CACHE"
      # Handle `antigen-init` command properly
      elif [[ $1 == "init" ]]; then
        source "$2"
      fi
    }
    # Do not continue loading antigen as cache bundle takes care of it.
    return 0
  fi
fi
[[ -z "$_ANTIGEN_INSTALL_DIR" ]] && _ANTIGEN_INSTALL_DIR=${0:A:h}

# Each line in this string has the following entries separated by a space
# character.
# <repo-url>, <plugin-location>, <bundle-type>, <has-local-clone>
[[ $_ANTIGEN_CACHE_LOADED != true ]] && typeset -aU _ANTIGEN_BUNDLE_RECORD

# Do not load anything if git is not available.
if (( ! $+commands[git] )); then
    echo 'Antigen: Please install git to use Antigen.' >&2
    return 1
fi

# Used to defer compinit/compdef
typeset -a __deferred_compdefs
compdef () { __deferred_compdefs=($__deferred_compdefs "$*") }

# A syntax sugar to avoid the `-` when calling antigen commands. With this
# function, you can write `antigen-bundle` as `antigen bundle` and so on.
antigen () {
  local cmd="$1"
  if [[ -z "$cmd" ]]; then
    echo 'Antigen: Please give a command to run.' >&2
    return 1
  fi
  shift

  if (( $+functions[antigen-$cmd] )); then
      "antigen-$cmd" "$@"
      return $?
  else
      echo "Antigen: Unknown command: $cmd" >&2
      return 1
  fi
}
# Returns the bundle's git revision
#
# Usage
#   -antigen-bundle-rev bundle-name [is_local_clone]
#
# Returns
#   Bundle rev-parse output (branch name or short ref name)
-antigen-bundle-rev () {
  local bundle=$1
  local is_local_clone=$2

  local bundle_path=$bundle
  # Get bunde path inside $ADOTDIR if bundle was effectively cloned
  if [[ "$is_local_clone" == "true" ]]; then
    bundle_path=$(-antigen-get-clone-dir $bundle)
  fi

  local ref
  ref=$(git --git-dir="$bundle_path/.git" rev-parse --abbrev-ref '@' 2>/dev/null)

  # Avoid 'HEAD' when in detached mode
  if [[ $ref == "HEAD" ]]; then
    ref=$(git --git-dir="$bundle_path/.git" describe --tags --exact-match 2>/dev/null \
	    || git --git-dir="$bundle_path/.git" rev-parse --short '@' 2>/dev/null || "-")
  fi
  echo $ref
}
# Usage:
#   -antigen-bundle-short-name "https://github.com/user/repo.git[|*]" "[branch/name]"
# Returns:
#   user/repo@branch/name
-antigen-bundle-short-name () {
  local bundle_name="${1%|*}"
  local bundle_branch="$2"
  local match mbegin mend MATCH MBEGIN MEND

  [[ "$bundle_name" =~ '.*/(.*/.*).*$' ]] && bundle_name=$match[1]
  bundle_name="${bundle_name%.git*}"

  if [[ -n $bundle_branch ]]; then
    bundle_name="$bundle_name@$bundle_branch"
  fi

  echo $bundle_name
}
# Echo the bundle specs as in the record. The first line is not echoed since it
# is a blank line.
-antigen-echo-record () {
  echo ${(j:\n:)_ANTIGEN_BUNDLE_RECORD}
}
# Filters _ANTIGEN_BUNDLE_RECORD for $1
#
# Usage
#   -antigen-find-bundle example/bundle
#
# Returns
#   String if bundle is found
-antigen-find-bundle () {
  echo $(-antigen-find-record $1 | cut -d' ' -f1)
}

# Filters _ANTIGEN_BUNDLE_RECORD for $1
#
# Usage
#   -antigen-find-record example/bundle
#
# Returns
#   String if record is found
-antigen-find-record () {
  local bundle=$1
  
  if [[ $# -eq 0 ]]; then
    return 1
  fi

  local record=${bundle/\|/\\\|}
  echo "${_ANTIGEN_BUNDLE_RECORD[(r)*$record*]}"
}
# Returns bundle names from _ANTIGEN_BUNDLE_RECORD
#
# Usage
#   -antigen-get-bundles [--short|--simple|--long]
#
# Returns
#   List of bundles installed
-antigen-get-bundles () {
  local mode revision url bundle_name bundle_entry loc no_local_clone
  local record bundle make_local_clone
  mode=${1:-"--short"}

  for record in $_ANTIGEN_BUNDLE_RECORD; do
    bundle=(${(@s/ /)record})
    url=$bundle[1]
    loc=$bundle[2]
    make_local_clone=$bundle[4]

    bundle_name=$(-antigen-bundle-short-name $url)

    case "$mode" in
        --short)
          # Only check revision for bundle with a requested branch
          if [[ $url == *\|* ]]; then
            revision=$(-antigen-bundle-rev $url $make_local_clone)
          else
            revision="master"
          fi

          if [[ $loc != '/' ]]; then
            bundle_name="$bundle_name ~ $loc"
          fi
          echo "$bundle_name @ $revision"
        ;;
        --simple)
          echo "$bundle_name"
        ;;
        --long)
          echo "$record"
        ;;
     esac
  done
}
# Usage:
#  -antigen-get-clone-dir "https://github.com/zsh-users/zsh-syntax-highlighting.git[|feature/branch]"
# Returns:
#  $ANTIGEN_BUNDLES/zsh-users/zsh-syntax-highlighting[-feature-branch]
-antigen-get-clone-dir () {
  local bundle="$1"
  local url="${bundle%|*}"
  local branch match mbegin mend MATCH MBEGIN MEND
  [[ "$bundle" =~ "\|" ]] && branch="${bundle#*|}"

  # Takes a repo url and mangles it, giving the path that this url will be
  # cloned to. Doesn't actually clone anything.
  local clone_dir="$ANTIGEN_BUNDLES"

  url=$(-antigen-bundle-short-name $url)

  # Suffix with branch/tag name
  [[ -n "$branch" ]] && url="$url-${branch//\//-}"
  url=${url//\*/x}

  echo "$clone_dir/$url"
}
# Returns bundles flagged as make_local_clone
#
# Usage
#    -antigen-cloned-bundles
#
# Returns
#    Bundle metadata
-antigen-get-cloned-bundles() {
  -antigen-echo-record |
      awk '$4 == "true" {print $1}' |
      sort -u
}
# Returns a list of themes from a default library (omz)
#
# Usage
#   -antigen-get-themes
#
# Returns
#   List of themes by name
-antigen-get-themes () {
  local library='robbyrussell/oh-my-zsh'
  local bundle=$(-antigen-find-bundle $library)

  if [[ -n "$bundle" ]]; then
    local dir=$(-antigen-get-clone-dir $ANTIGEN_DEFAULT_REPO_URL)
    echo $(ls $dir/themes/ | grep '.zsh-theme$' | sed 's/.zsh-theme//')
  fi

  return 0
}

# This function check ZSH_EVAL_CONTEXT to determine if running in interactive shell. 
#
# Usage
#   -antigen-interactive-mode
#
# Returns
#   Either true or false depending if we are running in interactive mode
-antigen-interactive-mode () {
  WARN "-antigen-interactive-mode: $ZSH_EVAL_CONTEXT \$_ANTIGEN_INTERACTIVE = $_ANTIGEN_INTERACTIVE"
  if [[ $_ANTIGEN_INTERACTIVE != "" ]]; then
    [[ $_ANTIGEN_INTERACTIVE == true ]];
    return
  fi

  [[ "$ZSH_EVAL_CONTEXT" == toplevel* || "$ZSH_EVAL_CONTEXT" == cmdarg* ]];
}
# Parses and retrieves a remote branch given a branch name.
#
# If the branch name contains '*' it will retrieve remote branches
# and try to match against tags and heads, returning the latest matching.
#
# Usage
#     -antigen-parse-branch https://github.com/user/repo.git x.y.z
#
# Returns
#     Branch name
-antigen-parse-branch () {
  local url="$1" branch="$2" branches
  
  local match mbegin mend MATCH MBEGIN MEND

  if [[ "$branch" =~ '\*' ]]; then
    branches=$(git ls-remote --tags -q "$url" "$branch"|cut -d'/' -f3|sort -n|tail -1)
    # There is no --refs flag in git 1.8 and below, this way we
    # emulate this flag -- also git 1.8 ref order is undefined.
    branch=${${branches#*/*/}%^*} # Why you are like this?
  fi

  echo $branch
}
-antigen-update-repos () {
  local repo bundle url target
  local log=/tmp/antigen-v2-migrate.log

  echo "It seems you have bundles cloned with Antigen v1.x."
  echo "We'll try to convert directory structure to v2."
  echo

  echo -n "Moving bundles to '\$ADOTDIR/bundles'... "

  # Migrate old repos -> bundles
  local errors=0
  for repo in $ADOTDIR/repos/*; do
    bundle=${repo/$ADOTDIR\/repos\//}
    bundle=${bundle//-SLASH-/\/}
    bundle=${bundle//-COLON-/\:}
    bundle=${bundle//-STAR-/\*}
    url=${bundle//-PIPE-/\|}
    target=$(-antigen-get-clone-dir $url)
    mkdir -p "${target:A:h}"
    echo " ---> ${repo/$ADOTDIR\/} -> ${target/$ADOTDIR\/}" | tee > $log
    mv "$repo" "$target" &> $log
    if [[ $? != 0 ]]; then
      echo "Failed to migrate '$repo'!."
      errors+=1
    fi
  done

  if [[ $errors == 0 ]]; then
    echo "Done."
  else
    echo "An error ocurred!"
  fi
  echo

  if [[ "$(ls -A $ADOTDIR/repos | wc -l | xargs)" == 0 ]]; then
    echo "You can safely remove \$ADOTDIR/repos."
  else
    echo "Some bundles couldn't be migrated. See \$ADOTDIR/repos."
  fi

  echo
  if [[ $errors == 0 ]]; then
    echo "Bundles migrated successfuly."
    rm $log
  else
    echo "Some errors occured. Review migration log in '$log'."
  fi
  antigen-reset
}
# Ensure that a clone exists for the given repo url and branch. If the first
# argument is `update` and if a clone already exists for the given repo
# and branch, it is pull-ed, i.e., updated.
#
# This function expects three arguments in order:
# - 'url=<url>'
# - 'update=true|false'
# - 'verbose=true|false'
#
# Returns true|false Whether cloning/pulling was succesful
-antigen-ensure-repo () {
  # Argument defaults. Previously using ${1:?"missing url argument"} format
  # but it seems to mess up with cram
  if (( $# < 1 )); then
    echo "Antigen: Missing url argument."
    return 1
  fi

  # The url. No sane default for this, so just empty.
  local url=$1
  # Check if we have to update.
  local update=${2:-false}
  # Verbose output.
  local verbose=${3:-false}

  shift $#

  # Get the clone's directory as per the given repo url and branch.
  local clone_dir=$(-antigen-get-clone-dir $url)
  if [[ -d "$clone_dir" && $update == false ]]; then
    return true
  fi

  # A temporary function wrapping the `git` command with repeated arguments.
  --plugin-git () {
    (\cd -q "$clone_dir" && eval ${ANTIGEN_CLONE_ENV} git --git-dir="$clone_dir/.git" --no-pager "$@" &>>! $ANTIGEN_LOG)
  }

  local success=false

  # If its a specific branch that we want, checkout that branch.
  local branch="master" # TODO FIX THIS
  if [[ $url == *\|* ]]; then
    branch="$(-antigen-parse-branch ${url%|*} ${url#*|})"
  fi

  if [[ ! -d $clone_dir ]]; then
    eval ${ANTIGEN_CLONE_ENV} git clone ${=ANTIGEN_CLONE_OPTS} --branch "$branch" -- "${url%|*}" "$clone_dir" &>> $ANTIGEN_LOG
    success=$?
  elif $update; then
    # Save current revision.
    local old_rev="$(--plugin-git rev-parse HEAD)"
    # Pull changes if update requested.
    --plugin-git checkout "$branch"
    --plugin-git pull origin "$branch"
    success=$?

    # Update submodules.
    --plugin-git submodule update ${=ANTIGEN_SUBMODULE_OPTS}
    # Get the new revision.
    local new_rev="$(--plugin-git rev-parse HEAD)"
  fi

  if [[ -n $old_rev && $old_rev != $new_rev ]]; then
    echo Updated from $old_rev[0,7] to $new_rev[0,7].
    if $verbose; then
      --plugin-git log --oneline --reverse --no-merges --stat '@{1}..'
    fi
  fi

  # Remove the temporary git wrapper function.
  unfunction -- --plugin-git

  return $success
}
# Helper function: Same as `$1=$2`, but will only happen if the name
# specified by `$1` is not already set.
-antigen-set-default () {
  local arg_name="$1"
  local arg_value="$2"
  eval "test -z \"\$$arg_name\" && typeset -g $arg_name='$arg_value'"
}

-antigen-env-setup () {
  typeset -gU fpath path

  # Pre-startup initializations.
  -antigen-set-default ANTIGEN_OMZ_REPO_URL \
    https://github.com/robbyrussell/oh-my-zsh.git
  -antigen-set-default ANTIGEN_PREZTO_REPO_URL \
    https://github.com/sorin-ionescu/prezto.git
  -antigen-set-default ANTIGEN_DEFAULT_REPO_URL $ANTIGEN_OMZ_REPO_URL

  # Default Antigen directory.
  -antigen-set-default ADOTDIR $HOME/.antigen
  [[ ! -d $ADOTDIR ]] && mkdir -p $ADOTDIR

  # Defaults bundles directory.
  -antigen-set-default ANTIGEN_BUNDLES $ADOTDIR/bundles

  # If there is no bundles directory, create it.
  if [[ ! -d $ANTIGEN_BUNDLES ]]; then
    mkdir -p $ANTIGEN_BUNDLES
    # Check for v1 repos directory, transform it to v2 format.
    [[ -d $ADOTDIR/repos ]] && -antigen-update-repos
  fi

  -antigen-set-default ANTIGEN_COMPDUMP "${ADOTDIR:-$HOME}/.zcompdump"
  -antigen-set-default ANTIGEN_LOG /dev/null

  # CLONE_OPTS uses ${=CLONE_OPTS} expansion so don't use spaces
  # for arguments that can be passed as `--key=value`.
  -antigen-set-default ANTIGEN_CLONE_ENV "GIT_TERMINAL_PROMPT=0"
  -antigen-set-default ANTIGEN_CLONE_OPTS "--single-branch --recursive --depth=1"
  -antigen-set-default ANTIGEN_SUBMODULE_OPTS "--recursive --depth=1"

  # Complain when a bundle is already installed.
  -antigen-set-default _ANTIGEN_WARN_DUPLICATES true

  # Compatibility with oh-my-zsh themes.
  -antigen-set-default _ANTIGEN_THEME_COMPAT true
  
  # Add default built-in extensions to load at start up
  -antigen-set-default _ANTIGEN_BUILTIN_EXTENSIONS 'lock parallel defer cache'

  # Setup antigen's own completion.
  if -antigen-interactive-mode; then
    TRACE "Gonna create compdump file @ env-setup" COMPDUMP
    autoload -Uz compinit
    compinit -d "$ANTIGEN_COMPDUMP"
    compdef _antigen antigen
  else
    (( $+functions[antigen-ext-init] )) && antigen-ext-init
  fi
}
# Load a given bundle by sourcing it.
#
# The function also modifies fpath to add the bundle path.
#
# Usage
#   -antigen-load "bundle-url" ["location"] ["make_local_clone"] ["btype"]
#
# Returns
#   Integer. 0 if success 1 if an error ocurred.
-antigen-load () {
  local bundle list
  typeset -A bundle; bundle=($@)

  typeset -Ua list; list=()
  local location="${bundle[dir]}/${bundle[loc]}"

  # Prioritize location when given.
  if [[ -f "${location}" ]]; then
    list=(${location})
  else
    # Directory locations must be suffixed with slash
    location="$location/"

    # Prioritize theme with antigen-theme
    if [[ ${bundle[btype]} == "theme" ]]; then
      list=(${location}*.zsh-theme(N[1]))
    fi

    # Common frameworks
    if [[ $#list == 0 ]]; then
      # dot-plugin, init and functions support (omz, prezto)
      # Support prezto function loading. See https://github.com/zsh-users/antigen/pull/428
      list=(${location}*.plugin.zsh(N[1]) ${location}init.zsh(N[1]) ${location}/functions(N[1]))
    fi

    # Default to zsh and sh
    if [[ $#list == 0 ]]; then
      list=(${location}*.zsh(N) ${location}*.sh(N))
    fi
  fi

  -antigen-load-env ${(kv)bundle}

  # If there is any sourceable try to load it
  if ! -antigen-load-source "${list[@]}" && [[ ! -d ${location} ]]; then
    return 1
  fi

  return 0
}

-antigen-load-env () {
  typeset -A bundle; bundle=($@)
  local location=${bundle[dir]}/${bundle[loc]}

  # Load to path if there is no sourceable
  if [[ -d ${location} ]]; then
    PATH="$PATH:${location:A}"
    fpath+=("${location:A}")
    return
  fi

  PATH="$PATH:${location:A:h}"
  fpath+=("${location:A:h}")
}

-antigen-load-source () {
  typeset -a list
  list=($@)
  local src match mbegin mend MATCH MBEGIN MEND

  # Return error when we're given an empty list
  if [[ $#list == 0 ]]; then
    return 1
  fi
  
  # Using a for rather than `source $list` as we need to check for zsh-themes
  # In order to create antigen-compat file. This is only needed for interactive-mode
  # theme switching, for static loading (cache) there is no need.
  for src in $list; do
    if [[ $_ANTIGEN_THEME_COMPAT == true  && -f "$src" && "$src" == *.zsh-theme* ]]; then
      local compat="${src:A}.antigen-compat"
      echo "# Generated by Antigen. Do not edit!" >! "$compat"
      cat $src | sed -Ee '/\{$/,/^\}/!{
             s/^local //
         }' >>! "$compat"
      src="$compat"
    fi

    if ! source "$src" 2>/dev/null; then
      return 1
    fi
  done
}
# Usage:
#   -antigen-parse-args output_assoc_arr <args...>
-antigen-parse-args () {
  local argkey key value index=0 args
  local match mbegin mend MATCH MBEGIN MEND

  local var=$1
  shift

  # Bundle spec arguments' default values.
  #setopt XTRACE VERBOSE
  builtin typeset -A args
  args[url]="$ANTIGEN_DEFAULT_REPO_URL"
  #unsetopt XTRACE VERBOSE
  args[loc]=/
  args[make_local_clone]=true
  args[btype]=plugin
  #args[branch]= # commented out as it may cause assoc array kv mismatch

  while [[ $# -gt 0 ]]; do
    argkey="${1%\=*}"
    key="${argkey//--/}"
    value="${1#*=}"

    case "$argkey" in
      --url|--loc|--branch|--btype)
        if [[ "$value" == "$argkey" ]]; then
          printf "Required argument for '%s' not provided.\n" $key >&2
        else
          args[$key]="$value"
        fi
      ;;
      --no-local-clone)
        args[make_local_clone]=false
      ;;
      --*)
        printf "Unknown argument '%s'.\n" $key >&2
      ;;
      *)
        value=$key
        case $index in
          0)
            key=url
            local domain=""
            local url_path=$value
            # Full url with protocol or ssh github url (github.com:org/repo)
            if [[ "$value" =~ "://" || "$value" =~ ":" ]]; then
              if [[ "$value" =~ [@.][^/:]+[:]?[0-9]*[:/]?(.*)@?$ ]]; then
                url_path=$match[1]
                domain=${value/$url_path/}
              fi
            fi

            if [[ "$url_path" =~ '@' ]]; then
              args[branch]="${url_path#*@}"
              value="$domain${url_path%@*}"
            else
              value="$domain$url_path"
            fi
          ;;
          1) key=loc ;;
        esac
        let index+=1
        args[$key]="$value"
      ;;
    esac

    shift
  done
  
  # Check if url is just the plugin name. Super short syntax.
  if [[ "${args[url]}" != */* ]]; then
    case "$ANTIGEN_DEFAULT_REPO_URL" in
      "$ANTIGEN_OMZ_REPO_URL")
        args[loc]="plugins/${args[url]}"
      ;;
      "$ANTIGEN_PREZTO_REPO_URL")
        args[loc]="modules/${args[url]}"
      ;;
      *)
        args[loc]="${args[url]}"
      ;;
    esac
    args[url]="$ANTIGEN_DEFAULT_REPO_URL"
  fi

  # Resolve the url.
  # Expand short github url syntax: `username/reponame`.
  local url="${args[url]}"
  if [[ $url != git://* &&
          $url != https://* &&
          $url != http://* &&
          $url != ssh://* &&
          $url != /* &&
          $url != *github.com:*/*
          ]]; then
    url="https://github.com/${url%.git}.git"
  fi
  args[url]="$url"

  # Ignore local clone if url given is not a git directory
  if [[ ${args[url]} == /* && ! -d ${args[url]}/.git ]]; then
    args[make_local_clone]=false
  fi

  # Add the branch information to the url if we need to create a local clone.
  # Format url in bundle-metadata format: url[|branch]
  if [[ ! -z "${args[branch]}" && ${args[make_local_clone]} == true ]]; then
    args[url]="${args[url]}|${args[branch]}"
  fi

  # Add the theme extension to `loc`, if this is a theme, but only
  # if it's especified, ie, --loc=theme-name, in case when it's not
  # specified antige-load-list will look for *.zsh-theme files
  if [[ ${args[btype]} == "theme" &&
      ${args[loc]} != "/" && ${args[loc]} != *.zsh-theme ]]; then
      args[loc]="${args[loc]}.zsh-theme"
  fi

  local name="${args[url]%|*}"
  local branch="${args[branch]}"

  # Extract bundle name.
  if [[ "$name" =~ '.*/(.*/.*).*$' ]]; then
    name="${match[1]}"
  fi
  name="${name%.git*}"

  # Format bundle name with optional branch.
  if [[ -n "${branch}" ]]; then
    args[name]="${name}@${branch}"
  else
    args[name]="${name}"
  fi

  # Format bundle path.
  if [[ ${args[make_local_clone]} == true ]]; then
    local bpath="$name"
    # Suffix with branch/tag name
    if [[ -n "$branch" ]]; then
      # bpath is in the form of repo/name@version => repo/name-version
      # Replace / with - in bundle branch.
      local bbranch=${branch//\//-}
      # If branch/tag is semver-like do replace * by x.
      bbranch=${bbranch//\*/x}
      bpath="${name}-${bbranch}"
    fi

    bpath="$ANTIGEN_BUNDLES/$bpath"
    args[dir]="${(qq)bpath}"
  else
    # if it's local then path is just the "url" argument, loc remains the same
    args[dir]=${args[url]}
  fi
  
  # Escape url and branch (may contain semver-like and pipe characters)
  args[url]="${(qq)args[url]}"
  if [[ -n "${args[branch]}" ]]; then
    args[branch]="${(qq)args[branch]}"
  fi
  
  # Escape bundle name (may contain semver-like characters)
  args[name]="${(qq)args[name]}"

  eval "${var}=(${(kv)args})"

  return 0
}
# Updates revert-info data with git hash.
#
# This does process only cloned bundles.
#
# Usage
#    -antigen-revert-info
#
# Returns
#    Nothing. Generates/updates $ADOTDIR/revert-info.
-antigen-revert-info() {
  local url
  # Update your bundles, i.e., `git pull` in all the plugin repos.
  date >! $ADOTDIR/revert-info

  -antigen-get-cloned-bundles | while read url; do
    local clone_dir="$(-antigen-get-clone-dir "$url")"
    if [[ -d "$clone_dir" ]]; then
      (echo -n "$clone_dir:"
        \cd -q "$clone_dir"
        git rev-parse HEAD) >> $ADOTDIR/revert-info
    fi
  done
}
-antigen-use-oh-my-zsh () {
  typeset -g ZSH ZSH_CACHE_DIR
  ANTIGEN_DEFAULT_REPO_URL=$ANTIGEN_OMZ_REPO_URL
  if [[ -z "$ZSH" ]]; then
    ZSH="$(-antigen-get-clone-dir "$ANTIGEN_DEFAULT_REPO_URL")"
  fi
  if [[ -z "$ZSH_CACHE_DIR" ]]; then
    ZSH_CACHE_DIR="$ZSH/cache/"
  fi
  antigen-bundle --loc=lib
}
-antigen-use-prezto () {
  ANTIGEN_DEFAULT_REPO_URL=$ANTIGEN_PREZTO_REPO_URL
  antigen-bundle "$ANTIGEN_PREZTO_REPO_URL"
}
# Initialize completion
antigen-apply () {
  LOG "Called antigen-apply"

  # Load the compinit module. This will readefine the `compdef` function to
  # the one that actually initializes completions.
  TRACE "Gonna create compdump file @ apply" COMPDUMP
  autoload -Uz compinit
  compinit -d "$ANTIGEN_COMPDUMP"

  # Apply all `compinit`s that have been deferred.
  local cdef
  for cdef in "${__deferred_compdefs[@]}"; do
    compdef "$cdef"
  done

  { zcompile "$ANTIGEN_COMPDUMP" } &!

  unset __deferred_compdefs
}
# Syntaxes
#   antigen-bundle <url> [<loc>=/]
# Keyword only arguments:
#   branch - The branch of the repo to use for this bundle.
antigen-bundle () {
  TRACE "Called antigen-bundle with $@" BUNDLE
  if [[ -z "$1" ]]; then
    printf "Antigen: Must provide a bundle url or name.\n" >&2
    return 1
  fi

  builtin typeset -A bundle; -antigen-parse-args 'bundle' ${=@}
  if [[ -z ${bundle[btype]} ]]; then
    bundle[btype]=bundle
  fi

  local record="${bundle[url]} ${bundle[loc]} ${bundle[btype]} ${bundle[make_local_clone]}"
  if [[ $_ANTIGEN_WARN_DUPLICATES == true && ! ${_ANTIGEN_BUNDLE_RECORD[(I)$record]} == 0 ]]; then
    printf "Seems %s is already installed!\n" ${bundle[name]}
    return 1
  fi
 
  # Clone bundle if we haven't done do already.
  if [[ ! -d "${bundle[dir]}" ]]; then
    if ! -antigen-bundle-install ${(kv)bundle}; then
      return 1
    fi
  fi

  # Load the plugin.
  if ! -antigen-load ${(kv)bundle}; then
    TRACE "-antigen-load failed to load ${bundle[name]}" BUNDLE
    printf "Antigen: Failed to load %s.\n" ${bundle[btype]} >&2
    return 1
  fi
  
  # Only add it to the record if it could be installed and loaded.
  _ANTIGEN_BUNDLE_RECORD+=("$record")
}

#
# Usage:
#   -antigen-bundle-install <record>
# Returns:
#   1 if it fails to install bundle
-antigen-bundle-install () {
  typeset -A bundle; bundle=($@)

  # Ensure a clone exists for this repo, if needed.
  # Get the clone's directory as per the given repo url and branch.
  local bpath="${bundle[dir]}"
  # Clone if it doesn't already exist.
  local start=$(date +'%s')

  printf "Installing %s... " "${bundle[name]}"

  if ! -antigen-ensure-repo "${bundle[url]}"; then
    # Return immediately if there is an error cloning
    TRACE "-antigen-bundle-instal failed to clone ${bundle[url]}" BUNDLE
    printf "Error! Activate logging and try again.\n" >&2
    return 1
  fi

  local took=$(( $(date +'%s') - $start ))
  printf "Done. Took %ds.\n" $took
}
antigen-bundles () {
  # Bulk add many bundles at one go. Empty lines and lines starting with a `#`
  # are ignored. Everything else is given to `antigen-bundle` as is, no
  # quoting rules applied.
  local line
  setopt localoptions no_extended_glob # See https://github.com/zsh-users/antigen/issues/456
  grep '^[[:space:]]*[^[:space:]#]' | while read line; do
    antigen-bundle ${=line%#*}
  done
}
# Cleanup unused repositories.
antigen-cleanup () {
  local force=false
  if [[ $1 == --force ]]; then
    force=true
  fi

  if [[ ! -d "$ANTIGEN_BUNDLES" || -z "$(\ls -A "$ANTIGEN_BUNDLES")" ]]; then
    echo "You don't have any bundles."
    return 0
  fi

  # Find directores in ANTIGEN_BUNDLES, that are not in the bundles record.
  typeset -a unused_clones clones

  local url record clone
  for record in $(-antigen-get-cloned-bundles); do
    url=${record% /*}
    clones+=("$(-antigen-get-clone-dir $url)")
  done

  for clone in $ANTIGEN_BUNDLES/*/*(/); do
    if [[ $clones[(I)$clone] == 0 ]]; then
      unused_clones+=($clone)
    fi
  done

  if [[ -z $unused_clones ]]; then
    echo "You don't have any unidentified bundles."
    return 0
  fi

  echo 'You have clones for the following repos, but are not used.'
  echo "\n${(j:\n:)unused_clones}"

  if $force || (echo -n '\nDelete them all? [y/N] '; read -q); then
    echo
    echo
    for clone in $unused_clones; do
      echo -n "Deleting clone \"$clone\"..."
      \rm -rf "$clone"

      echo ' done.'
    done
  else
    echo
    echo "Nothing deleted."
  fi
}
antigen-help () {
  antigen-version

  cat <<EOF

Antigen is a plugin management system for zsh. It makes it easy to grab awesome
shell scripts and utilities, put up on Github.

Usage: antigen <command> [args]

Commands:
  apply        Must be called in the zshrc after all calls to 'antigen bundle'.
  bundle       Install and load a plugin.
  cache-gen    Generate Antigen's cache with currently loaded bundles.
  cleanup      Remove clones of repos not used by any loaded plugins.
  init         Use caching to quickly load bundles.
  list         List currently loaded plugins.
  purge        Remove a bundle from the filesystem.
  reset        Clean the generated cache.
  restore      Restore plugin state from a snapshot file.
  revert       Revert plugins to their state prior to the last time 'antigen
               update' was run.
  selfupdate   Update antigen.
  snapshot     Create a snapshot of all active plugin repos and save it to a
               snapshot file.
  update       Update plugins.
  use          Load a supported zsh pre-packaged framework.

For further details and complete documentation, visit the project's page at
'http://antigen.sharats.me'.
EOF
}
# Antigen command to load antigen configuration
#
# This method is slighlty more performing than using various antigen-* methods.
#
# Usage
#   Referencing an antigen configuration file:
#
#       antigen-init "/path/to/antigenrc"
#
#   or using HEREDOCS:
#
#       antigen-init <<EOBUNDLES
#           antigen use oh-my-zsh
#
#           antigen bundle zsh/bundle
#           antigen bundle zsh/example
#
#           antigen theme zsh/theme
#
#           antigen apply
#       EOBUNDLES
#
# Returns
#   Nothing
antigen-init () {
  local src="$1" line

  # If we're given an argument it should be a path to a file
  if [[ -n "$src" ]]; then
    if [[ -f "$src" ]]; then
      source "$src"
      return
    else
      printf "Antigen: invalid argument provided.\n" >&2
      return 1
    fi
  fi

  # Otherwise we expect it to be a heredoc
  grep '^[[:space:]]*[^[:space:]#]' | while read -r line; do
    eval $line
  done
}
# List instaled bundles either in long (record), short or simple format.
#
# Usage
#    antigen-list [--short|--long|--simple]
#
# Returns
#    List of bundles
antigen-list () {
  local format=$1

  # List all currently installed bundles.
  if [[ -z $_ANTIGEN_BUNDLE_RECORD ]]; then
    echo "You don't have any bundles." >&2
    return 1
  fi

  -antigen-get-bundles $format
}
# Remove a bundle from filesystem
#
# Usage
#   antigen-purge example/bundle [--force]
#
# Returns
#   Nothing. Removes bundle from filesystem.
antigen-purge () {
  local bundle=$1
  local force=$2

  if [[ $# -eq 0  ]]; then
    echo "Antigen: Missing argument." >&2
    return 1
  fi

  if -antigen-purge-bundle $bundle $force; then
    antigen-reset
  else
    return $?
  fi

  return 0
}

# Remove a bundle from filesystem
#
# Usage
#   antigen-purge example/bundle [--force]
#
# Returns
#   Nothing. Removes bundle from filesystem.
-antigen-purge-bundle () {
  local bundle=$1
  local force=$2
  local clone_dir=""

  local record=""
  local url=""
  local make_local_clone=""

  if [[ $# -eq 0  ]]; then
    echo "Antigen: Missing argument." >&2
    return 1
  fi

  # local keyword doesn't work on zsh <= 5.0.0
  record=$(-antigen-find-record $bundle)

  if [[ ! -n "$record" ]]; then
    echo "Bundle not found in record. Try 'antigen bundle $bundle' first." >&2
    return 1
  fi

  url="$(echo "$record" | cut -d' ' -f1)"
  make_local_clone=$(echo "$record" | cut -d' ' -f4)

  if [[ $make_local_clone == "false" ]]; then
    echo "Bundle has no local clone. Will not be removed." >&2
    return 1
  fi

  clone_dir=$(-antigen-get-clone-dir "$url")
  if [[ $force == "--force" ]] || read -q "?Remove '$clone_dir'? (y/n) "; then
    # Need empty line after read -q
    [[ ! -n $force ]] && echo "" || echo "Removing '$clone_dir'.";
    rm -rf "$clone_dir"
    return $?
  fi

  return 1
}
# Removes cache payload and metadata if available
#
# Usage
#   antigen-reset
#
# Returns
#   Nothing
antigen-reset () {
  [[ -f "$ANTIGEN_CACHE" ]] && rm -f "$ANTIGEN_CACHE" "$ANTIGEN_CACHE.zwc" 1> /dev/null
  [[ -f "$ANTIGEN_RSRC" ]] && rm -f "$ANTIGEN_RSRC" 1> /dev/null
  [[ -f "$ANTIGEN_COMPDUMP" ]] && rm -f "$ANTIGEN_COMPDUMP" "$ANTIGEN_COMPDUMP.zwc" 1> /dev/null
  [[ -f "$ANTIGEN_LOCK" ]] && rm -f "$ANTIGEN_LOCK" 1> /dev/null
  echo 'Done. Please open a new shell to see the changes.'
}
antigen-restore () {
  local line
  if [[ $# == 0 ]]; then
    echo 'Please provide a snapshot file to restore from.' >&2
    return 1
  fi

  local snapshot_file="$1"

  # TODO: Before doing anything with the snapshot file, verify its checksum.
  # If it fails, notify this to the user and confirm if restore should
  # proceed.

  echo -n "Restoring from $snapshot_file..."

  sed -n '1!p' "$snapshot_file" |
    while read line; do
      local version_hash="${line%% *}"
      local url="${line##* }"
      local clone_dir="$(-antigen-get-clone-dir "$url")"

      if [[ ! -d $clone_dir ]]; then
          git clone "$url" "$clone_dir" &> /dev/null
      fi

      (\cd -q "$clone_dir" && git checkout $version_hash) &> /dev/null
    done

  echo ' done.'
  echo 'Please open a new shell to get the restored changes.'
}
# Reads $ADORDIR/revert-info and restores bundles' revision
antigen-revert () {
  local line
  if [[ -f $ADOTDIR/revert-info ]]; then
    cat $ADOTDIR/revert-info | sed -n '1!p' | while read line; do
      local dir="$(echo "$line" | cut -d: -f1)"
      git --git-dir="$dir/.git" --work-tree="$dir" \
        checkout "$(echo "$line" | cut -d: -f2)" 2> /dev/null
    done

    echo "Reverted to state before running -update on $(
            cat $ADOTDIR/revert-info | sed -n '1p')."

  else
    echo 'No revert information available. Cannot revert.' >&2
    return 1
  fi
}
# Update (with `git pull`) antigen itself.
# TODO: Once update is finished, show a summary of the new commits, as a kind of
# "what's new" message.
antigen-selfupdate () {
  (\cd -q $_ANTIGEN_INSTALL_DIR
   if [[ ! ( -d .git || -f .git ) ]]; then
     echo "Your copy of antigen doesn't appear to be a git clone. " \
       "The 'selfupdate' command cannot work in this case."
     return 1
   fi
   local head="$(git rev-parse --abbrev-ref HEAD)"
   if [[ $head == "HEAD" ]]; then
     # If current head is detached HEAD, checkout to master branch.
     git checkout master
   fi
   git pull

   # TODO Should be transparently hooked by zcache
   antigen-reset &>> /dev/null
  )
}
antigen-snapshot () {
  local snapshot_file="${1:-antigen-shapshot}"
  local urls url dir version_hash snapshot_content
  local -a bundles

  # The snapshot content lines are pairs of repo-url and git version hash, in
  # the form:
  #   <version-hash> <repo-url>
  urls=$(-antigen-echo-record | awk '$4 == "true" {print $1}' | sort -u)
  for url in ${(f)urls}; do
    dir="$(-antigen-get-clone-dir "$url")"
    version_hash="$(\cd -q "$dir" && git rev-parse HEAD)"
    bundles+=("$version_hash $url");
  done
  snapshot_content=${(j:\n:)bundles}

  {
    # The first line in the snapshot file is for metadata, in the form:
    #   key='value'; key='value'; key='value';
    # Where `key`s are valid shell variable names.

    # Snapshot version. Has no relation to antigen version. If the snapshot
    # file format changes, this number can be incremented.
    echo -n "version='1';"

    # Snapshot creation date+time.
    echo -n " created_on='$(date)';"

    # Add a checksum with the md5 checksum of all the snapshot lines.
    chksum() { (md5sum; test $? = 127 && md5) 2>/dev/null | cut -d' ' -f1 }
    local checksum="$(echo "$snapshot_content" | chksum)"
    unset -f chksum;
    echo -n " checksum='${checksum%% *}';"

    # A newline after the metadata and then the snapshot lines.
    echo "\n$snapshot_content"

  } > "$snapshot_file"
}
# Loads a given theme.
#
# Shares the same syntax as antigen-bundle command.
#
# Usage
#   antigen-theme zsh/theme[.zsh-theme]
#
# Returns
#   0 if everything was succesfully
antigen-theme () {
  local name=$1 result=0 record
  local match mbegin mend MATCH MBEGIN MEND

  if [[ -z "$1" ]]; then
    printf "Antigen: Must provide a theme url or name.\n" >&2
    return 1
  fi

  -antigen-theme-reset-hooks

  record=$(-antigen-find-record "theme")
  if [[ "$1" != */* && "$1" != --* ]]; then
    # The first argument is just a name of the plugin, to be picked up from
    # the default repo.
    antigen-bundle --loc=themes/$name --btype=theme

  else
    antigen-bundle "$@" --btype=theme

  fi
  result=$?

  # Remove a theme from the record if the following conditions apply:
  #   - there was no error in bundling the given theme
  #   - there is a theme registered
  #   - registered theme is not the same as the current one
  if [[ $result == 0 && -n $record ]]; then
    # http://zsh-workers.zsh.narkive.com/QwfCWpW8/what-s-wrong-with-this-expression
    if [[ "$record" =~ "$@" ]]; then
      return $result
    else
      _ANTIGEN_BUNDLE_RECORD[$_ANTIGEN_BUNDLE_RECORD[(I)$record]]=()
    fi
  fi

  return $result
}

-antigen-theme-reset-hooks () {
  # This is only needed on interactive mode
  autoload -U add-zsh-hook is-at-least
  local hook

  # Clear out prompts
  PROMPT=""
  if [[ -n $RPROMPT ]]; then
    RPROMPT=""
  fi

  for hook in chpwd precmd preexec periodic; do
    add-zsh-hook -D "${hook}" "prompt_*"
    # common in omz themes
    add-zsh-hook -D "${hook}" "*_${hook}"
    add-zsh-hook -d "${hook}" "vcs_info"
  done
}
# Updates the bundles or a single bundle.
#
# Usage
#    antigen-update [example/bundle]
#
# Returns
#    Nothing. Performs a `git pull`.
antigen-update () {
  local bundle=$1 url

  # Clear log
  :> $ANTIGEN_LOG

  # Update revert-info data
  -antigen-revert-info

  # If no argument is given we update all bundles
  if [[ $# -eq 0  ]]; then
    # Here we're ignoring all non cloned bundles (ie, --no-local-clone)
    -antigen-get-cloned-bundles | while read url; do
      -antigen-update-bundle $url
    done
    # TODO next minor version
    # antigen-reset
  else
    if -antigen-update-bundle $bundle; then
      # TODO next minor version
      # antigen-reset
    else
      return $?
    fi
  fi
}

# Updates a bundle performing a `git pull`.
#
# Usage
#    -antigen-update-bundle example/bundle
#
# Returns
#    Nothing. Performs a `git pull`.
-antigen-update-bundle () {
  local bundle="$1"
  local record=""
  local url=""
  local make_local_clone=""
  local start=$(date +'%s')
    
  if [[ $# -eq 0 ]]; then
    printf "Antigen: Missing argument.\n" >&2
    return 1
  fi

  record=$(-antigen-find-record $bundle)
  if [[ ! -n "$record" ]]; then
    printf "Bundle not found in record. Try 'antigen bundle %s' first.\n" $bundle >&2
    return 1
  fi

  url="$(echo "$record" | cut -d' ' -f1)"
  make_local_clone=$(echo "$record" | cut -d' ' -f4)
  
  local branch="master"
  if [[ $url == *\|* ]]; then
    branch="$(-antigen-parse-branch ${url%|*} ${url#*|})"
  fi

  printf "Updating %s... " $(-antigen-bundle-short-name "$url" "$branch")
  
  if [[ $make_local_clone == "false" ]]; then
    printf "Bundle has no local clone. Will not be updated.\n" >&2
    return 1
  fi

  # update=true verbose=false
  if ! -antigen-ensure-repo "$url" true false; then
    printf "Error! Activate logging and try again.\n" >&2
    return 1
  fi
  
  local took=$(( $(date +'%s') - $start ))
  printf "Done. Took %ds.\n" $took
}
antigen-use () {
  if [[ $1 == oh-my-zsh ]]; then
    -antigen-use-oh-my-zsh
  elif [[ $1 == prezto ]]; then
    -antigen-use-prezto
  elif [[ $1 != "" ]]; then
    ANTIGEN_DEFAULT_REPO_URL=$1
    antigen-bundle $@
  else
    echo 'Usage: antigen-use <library-name|url>' >&2
    echo 'Where <library-name> is any one of the following:' >&2
    echo ' * oh-my-zsh' >&2
    echo ' * prezto' >&2
    echo '<url> is the full url.' >&2
    return 1
  fi
}
antigen-version () {
  local version="v2.2.2"
  local extensions revision=""
  if [[ -d $_ANTIGEN_INSTALL_DIR/.git ]]; then
    revision=" ($(git --git-dir=$_ANTIGEN_INSTALL_DIR/.git rev-parse --short '@'))"
  fi

  printf "Antigen %s%s\n" $version $revision
  if (( $+functions[antigen-ext] )); then
    typeset -a extensions; extensions=($(antigen-ext-list))
    if [[ $#extensions -gt 0 ]]; then
      printf "Extensions loaded: %s\n" ${(j:, :)extensions}
    fi
  fi
}
typeset -Ag _ANTIGEN_HOOKS; _ANTIGEN_HOOKS=()
typeset -Ag _ANTIGEN_HOOKS_META; _ANTIGEN_HOOKS_META=()
typeset -g _ANTIGEN_HOOK_PREFIX="-antigen-hook-"
typeset -g _ANTIGEN_EXTENSIONS; _ANTIGEN_EXTENSIONS=()

# -antigen-add-hook antigen-apply antigen-apply-hook replace
#   - Replaces hooked function with hook, do not call hooked function
#   - Return -1 to stop calling further hooks
# -antigen-add-hook antigen-apply antigen-apply-hook pre (pre-call)
#   - By default it will call hooked function
# -antigen-add-hook antigen-pply antigen-apply-hook post (post-call)
#   - Calls antigen-apply and then calls hook function
# Usage:
#  -antigen-add-hook antigen-apply antigen-apply-hook ["replace"|"pre"|"post"] ["once"|"repeat"]
antigen-add-hook () {
  local target="$1" hook="$2" type="$3" mode="${4:-repeat}"
  
  if (( ! $+functions[$target] )); then
    printf "Antigen: Function %s doesn't exist.\n" $target
    return 1
  fi

  if (( ! $+functions[$hook] )); then
    printf "Antigen: Function %s doesn't exist.\n" $hook
    return 1
  fi

  if [[ "${_ANTIGEN_HOOKS[$target]}" == "" ]]; then
    _ANTIGEN_HOOKS[$target]="${hook}"
  else
    _ANTIGEN_HOOKS[$target]="${_ANTIGEN_HOOKS[$target]}:${hook}"
  fi

  _ANTIGEN_HOOKS_META[$hook]="target $target type $type mode $mode called 0"
  
  # Do shadow for this function if there is none already
  local hook_function="${_ANTIGEN_HOOK_PREFIX}$target"
  if (( ! $+functions[$hook_function] )); then
    # Preserve hooked function
    eval "function ${_ANTIGEN_HOOK_PREFIX}$(functions -- $target)"

    # Create hook, call hook-handler to further process hook functions
    eval "function $target () {
      noglob -antigen-hook-handler $target \$@
      return \$?
    }"
  fi
  
  return 0
}

# Private function to handle multiple hooks in a central point.
-antigen-hook-handler () {
  local target="$1" args hook called
  local hooks meta
  shift
  typeset -a args; args=(${@})

  typeset -a pre_hooks replace_hooks post_hooks;
  typeset -a hooks; hooks=(${(s|:|)_ANTIGEN_HOOKS[$target]})
  
  typeset -A meta;
  for hook in $hooks; do
    meta=(${(s: :)_ANTIGEN_HOOKS_META[$hook]})
    if [[ ${meta[mode]} == "once" && ${meta[called]} == 1 ]]; then
      WARN "Ignoring hook due to mode ${meta[mode]}: $hook"
      continue
    fi

    let called=${meta[called]}+1
    meta[called]=$called
    _ANTIGEN_HOOKS_META[$hook]="${(kv)meta}"
    WARN "Updated meta: "${(kv)meta}

    case "${meta[type]}" in
      "pre")
      pre_hooks+=($hook)
      ;;
      "replace")
      replace_hooks+=($hook)
      ;;
      "post")
      post_hooks+=($hook)
      ;;
    esac
  done

  WARN "Processing hooks: ${hooks}"

  for hook in $pre_hooks; do
    WARN "Pre hook:" $hook $args
    noglob $hook $args
    [[ $? == -1 ]] && WARN "$hook shortcircuited" && return $ret
  done

  # A replace hook will return inmediately
  local replace_hook=0 ret=0
  for hook in $replace_hooks; do
    replace_hook=1
    # Should not be needed if `antigen-remove-hook` removed unneeded hooks.
    if (( $+functions[$hook] )); then
      WARN "Replace hook:" $hook $args
      noglob $hook $args
      [[ $? == -1 ]] && WARN "$hook shortcircuited" && return $ret
    fi
  done
  
  if [[ $replace_hook == 0 ]]; then
    WARN "${_ANTIGEN_HOOK_PREFIX}$target $args"
    noglob ${_ANTIGEN_HOOK_PREFIX}$target $args
    ret=$?
  else
    WARN "Replaced hooked function."
  fi

  for hook in $post_hooks; do
    WARN "Post hook:" $hook $args
    noglob $hook $args
    [[ $? == -1 ]] && WARN "$hook shortcircuited" && return $ret
  done
  
  LOG "Return from hook ${target} with ${ret}"

  return $ret
}

# Usage:
#  -antigen-remove-hook antigen-apply-hook
antigen-remove-hook () {
  local hook="$1"
  typeset -A meta; meta=(${(s: :)_ANTIGEN_HOOKS_META[$hook]})
  local target="${meta[target]}"
  local -a hooks; hooks=(${(s|:|)_ANTIGEN_HOOKS[$target]})

  # Remove registered hook
  if [[ $#hooks > 0 ]]; then
    hooks[$hooks[(I)$hook]]=()
  fi
  _ANTIGEN_HOOKS[${target}]="${(j|:|)hooks}"
  
  if [[ $#hooks == 0 ]]; then
    # Destroy base hook
    eval "function $(functions -- ${_ANTIGEN_HOOK_PREFIX}$target | sed s/${_ANTIGEN_HOOK_PREFIX}//)"
    if (( $+functions[${_ANTIGEN_HOOK_PREFIX}$target] )); then
      unfunction -- "${_ANTIGEN_HOOK_PREFIX}$target"
    fi
  fi

  unfunction -- $hook 2> /dev/null
}

# Remove all defined hooks.
-antigen-reset-hooks () {
  local target

  for target in ${(k)_ANTIGEN_HOOKS}; do
    # Release all hooked functions
    eval "function $(functions -- ${_ANTIGEN_HOOK_PREFIX}$target | sed s/${_ANTIGEN_HOOK_PREFIX}//)"
    unfunction -- "${_ANTIGEN_HOOK_PREFIX}$target" 2> /dev/null
  done
  
  _ANTIGEN_HOOKS=()
  _ANTIGEN_HOOKS_META=()
  _ANTIGEN_EXTENSIONS=()
}

# Initializes an extension
# Usage:
#  antigen-ext ext-name
antigen-ext () {
  local ext=$1
  local func="-antigen-$ext-init"
  if (( $+functions[$func] && $_ANTIGEN_EXTENSIONS[(I)$ext] == 0 )); then
    eval $func
    local ret=$?
    WARN "$func return code was $ret"
    if (( $ret == 0 )); then 
      LOG "LOADED EXTENSION $ext" EXT
      -antigen-$ext-execute && _ANTIGEN_EXTENSIONS+=($ext)
    else
      WARN "IGNORING EXTENSION $func" EXT
      return 1
    fi
    
  else
    printf "Antigen: No extension defined or already loaded: %s\n" $func >&2
    return 1
  fi
}

# List installed extensions
# Usage:
#   antigen ext-list
antigen-ext-list () {
  echo $_ANTIGEN_EXTENSIONS
}

# Initializes built-in extensions
# Usage:
#   antigen-ext-init
antigen-ext-init () {
  # Initialize extensions. unless in interactive mode.
  local ext
  for ext in ${(s/ /)_ANTIGEN_BUILTIN_EXTENSIONS}; do
    # Check if extension is loaded before intializing it
    (( $+functions[-antigen-$ext-init] )) && antigen-ext $ext
  done
}
# Initialize defer lib
-antigen-defer-init () {
  typeset -ga _DEFERRED_BUNDLE; _DEFERRED_BUNDLE=()
  if -antigen-interactive-mode; then
    return 1
  fi
}

-antigen-defer-execute () {
  # Hooks antigen-bundle in order to defer its execution.
  antigen-bundle-defer () {
    _DEFERRED_BUNDLE+=("${(j: :)${@}}")
    return -1 # Stop right there
  }
  antigen-add-hook antigen-bundle antigen-bundle-defer replace
  
  # Hooks antigen-apply in order to release hooked functions
  antigen-apply-defer () {
    WARN "Defer pre-apply" DEFER PRE-APPLY
    antigen-remove-hook antigen-bundle-defer

    # Process all deferred bundles.
    local bundle
    for bundle in ${_DEFERRED_BUNDLE[@]}; do
      LOG "Processing deferred bundle: ${bundle}" DEFER
      antigen-bundle $bundle
    done

    unset _DEFERRED_BUNDLE
  }
  antigen-add-hook antigen-apply antigen-apply-defer pre once
}
# Initialize lock lib
-antigen-lock-init () {
  # Default lock path.
  -antigen-set-default ANTIGEN_LOCK $ADOTDIR/.lock
  typeset -g _ANTIGEN_LOCK_PROCESS=false
  
  # Use env variable to determine if we should load this extension
  -antigen-set-default ANTIGEN_MUTEX true
  # Set ANTIGEN_MUTEX to false to avoid loading this extension
  if [[ $ANTIGEN_MUTEX == true ]]; then
    return 0;
  fi
  
  # Do not use mutex
  return 1;
}

-antigen-lock-execute () {
  # Hook antigen command in order to check/create a lock file.
  # This hook is only run once then releases itself.
  antigen-lock () {
    LOG "antigen-lock called"
    # If there is a lock set up then we won't process anything.
    if [[ -f $ANTIGEN_LOCK ]]; then
      # Set up flag do the message is not repeated for each antigen-* command
      [[ $_ANTIGEN_LOCK_PROCESS == false ]] && printf "Antigen: Another process in running.\n"
      _ANTIGEN_LOCK_PROCESS=true
      # Do not further process hooks. For this hook to properly work it
      # should be registered first.
      return -1
    fi

    WARN "Creating antigen-lock file at $ANTIGEN_LOCK"
    touch $ANTIGEN_LOCK
  }
  antigen-add-hook antigen antigen-lock pre once

  # Hook antigen-apply in order to release .lock file.
  antigen-apply-lock () {
    WARN "Freeing antigen-lock file at $ANTIGEN_LOCK"
    unset _ANTIGEN_LOCK_PROCESS
    rm -f $ANTIGEN_LOCK &> /dev/null
  }
  antigen-add-hook antigen-apply antigen-apply-lock post once
}
# Initialize parallel lib
-antigen-parallel-init () {
  WARN "Init parallel extension" PARALLEL
  typeset -ga _PARALLEL_BUNDLE; _PARALLEL_BUNDLE=()
  if -antigen-interactive-mode; then
    return 1
  fi
}

-antigen-parallel-execute() {
  WARN "Exec parallel extension" PARALLEL
  # Install bundles in parallel
  antigen-bundle-parallel-execute () {
    WARN "Parallel antigen-bundle-parallel-execute" PARALLEL
    typeset -a pids; pids=()
    local args pid

    WARN "Gonna install in parallel ${#_PARALLEL_BUNDLE} bundles." PARALLEL
    # Do ensure-repo in parallel
    WARN "${_PARALLEL_BUNDLE}" PARALLEL
    typeset -Ua repositories # Used to keep track of cloned repositories to avoid
                             # trying to clone it multiple times.
    for args in ${_PARALLEL_BUNDLE}; do
      typeset -A bundle; -antigen-parse-args 'bundle' ${=args}

      if [[ ! -d ${bundle[dir]} && $repositories[(I)${bundle[url]}] == 0 ]]; then
        WARN "Install in parallel ${bundle[name]}." PARALLEL
        echo "Installing ${bundle[name]}!..."
        # $bundle[url]'s format is "url|branch" as to create "$ANTIGEN_BUNDLES/bundle/name-branch",
        # this way you may require multiple branches from the same repository.
        -antigen-ensure-repo "${bundle[url]}" > /dev/null &!
        pids+=($!)
      else
        WARN "Bundle ${bundle[name]} already cloned locally." PARALLEL
      fi
      
      repositories+=(${bundle[url]})
    done

    # Wait for all background processes to end
    while [[ $#pids > 0 ]]; do
      for pid in $pids; do
        # `ps` may diplay an error message such "Signal 18 (CONT) caught by ps
        # (procps-ng version 3.3.9).", see https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=732410
        if [[ $(ps -o pid= -p $pid 2>/dev/null) == "" ]]; then
          pids[$pids[(I)$pid]]=()
        fi
      done
      sleep .5
    done

    builtin local bundle &> /dev/null
    for bundle in ${_PARALLEL_BUNDLE[@]}; do
      antigen-bundle $bundle
    done
    

    WARN "Parallel install done" PARALLEL
  }

  # Hooks antigen-apply in order to release hooked functions
  antigen-apply-parallel () {
    WARN "Parallel pre-apply" PARALLEL PRE-APPLY
    #antigen-remove-hook antigen-pre-apply-parallel
    # Hooks antigen-bundle in order to parallel its execution.
    antigen-bundle-parallel () {
      TRACE "antigen-bundle-parallel: $@" PARALLEL
      _PARALLEL_BUNDLE+=("${(j: :)${@}}")
    }
    antigen-add-hook antigen-bundle antigen-bundle-parallel replace
  }
  antigen-add-hook antigen-apply antigen-apply-parallel pre once
  
  antigen-apply-parallel-execute () {
      WARN "Parallel replace-apply" PARALLEL REPLACE-APPLY
      antigen-remove-hook antigen-bundle-parallel
      # Process all parallel bundles.
      antigen-bundle-parallel-execute

      unset _PARALLEL_BUNDLE
      antigen-remove-hook antigen-apply-parallel-execute
      antigen-apply
  }
  antigen-add-hook antigen-apply antigen-apply-parallel-execute replace once
}
typeset -ga _ZCACHE_BUNDLE_SOURCE _ZCACHE_CAPTURE_BUNDLE
typeset -g _ZCACHE_CAPTURE_PREFIX

# Generates cache from listed bundles.
#
# Iterates over _ANTIGEN_BUNDLE_RECORD and join all needed sources into one,
# if this is done through -antigen-load-list.
# Result is stored in ANTIGEN_CACHE.
#
# _ANTIGEN_BUNDLE_RECORD and fpath is stored in cache.
#
# Usage
#   -zcache-generate-cache
#
# Returns
#   Nothing. Generates ANTIGEN_CACHE
-antigen-cache-generate () {
  local -aU _fpath _PATH _sources
  local record

  LOG "Gonna generate cache for $_ZCACHE_BUNDLE_SOURCE"
  for record in $_ZCACHE_BUNDLE_SOURCE; do
    record=${record:A}
    # LOG "Caching $record"
    if [[ -f $record ]]; then
      # Adding $'\n' as a suffix as j:\n: doesn't work inside a heredoc.
      if [[ $_ANTIGEN_THEME_COMPAT == true && "$record" == *.zsh-theme* ]]; then
        local compat="${record:A}.antigen-compat"
        echo "# Generated by Antigen. Do not edit!" >! "$compat"
        cat $record | sed -Ee '/\{$/,/^\}/!{
             s/^local //
         }' >>! "$compat"
        record="$compat"
      fi
      _sources+=("source '${record}';"$'\n')
    elif [[ -d $record ]]; then
      _PATH+=("${record}")
      _fpath+=("${record}")
    fi
  done

cat > $ANTIGEN_CACHE <<EOC
#-- START ZCACHE GENERATED FILE
#-- GENERATED: $(date)
#-- ANTIGEN v2.2.2
$(functions -- _antigen)
antigen () {
  local MATCH MBEGIN MEND
  [[ "\$ZSH_EVAL_CONTEXT" =~ "toplevel:*" || "\$ZSH_EVAL_CONTEXT" =~ "cmdarg:*" ]] && source "$_ANTIGEN_INSTALL_DIR/antigen.zsh" && eval antigen \$@;
  return 0;
}
typeset -gaU fpath path
fpath+=(${_fpath[@]}) path+=(${_PATH[@]})
_antigen_compinit () {
  autoload -Uz compinit; compinit -d "$ANTIGEN_COMPDUMP"; compdef _antigen antigen
  add-zsh-hook -D precmd _antigen_compinit
}
autoload -Uz add-zsh-hook; add-zsh-hook precmd _antigen_compinit
compdef () {}

if [[ -n "$ZSH" ]]; then
  ZSH="$ZSH"; ZSH_CACHE_DIR="$ZSH_CACHE_DIR"
fi
#--- BUNDLES BEGIN
${(j::)_sources}
#--- BUNDLES END
typeset -gaU _ANTIGEN_BUNDLE_RECORD; _ANTIGEN_BUNDLE_RECORD=($(print ${(qq)_ANTIGEN_BUNDLE_RECORD}))
typeset -g _ANTIGEN_CACHE_LOADED; _ANTIGEN_CACHE_LOADED=true
typeset -ga _ZCACHE_BUNDLE_SOURCE; _ZCACHE_BUNDLE_SOURCE=($(print ${(qq)_ZCACHE_BUNDLE_SOURCE}))
typeset -g _ANTIGEN_CACHE_VERSION; _ANTIGEN_CACHE_VERSION='v2.2.2'

#-- END ZCACHE GENERATED FILE
EOC

  { zcompile "$ANTIGEN_CACHE" } &!

  # Compile config files, if any
  LOG "CHECK_FILES $ANTIGEN_CHECK_FILES"
  [[ $ANTIGEN_AUTO_CONFIG == true && -n $ANTIGEN_CHECK_FILES ]] && {
    echo ${(j:\n:)ANTIGEN_CHECK_FILES} >! "$ANTIGEN_RSRC"
    for rsrc in $ANTIGEN_CHECK_FILES; do
      zcompile $rsrc
    done
  } &!

  return true
}

# Initializes caching mechanism.
#
# Hooks `antigen-bundle` and `antigen-apply` in order to defer bundle install
# and load. All bundles are loaded from generated cache rather than dynamically
# as these are bundled.
#
# Usage
#  -antigen-cache-init
# Returns
#  Nothing
-antigen-cache-init () {
  if -antigen-interactive-mode; then
    return 1
  fi

  _ZCACHE_CAPTURE_PREFIX=${_ZCACHE_CAPTURE_PREFIX:-"--zcache-"}
  _ZCACHE_BUNDLE_SOURCE=(); _ZCACHE_CAPTURE_BUNDLE=()

  # Cache auto config files to check for changes (.zshrc, .antigenrc etc)
  -antigen-set-default ANTIGEN_AUTO_CONFIG true
  
  # Default cache path.
  -antigen-set-default ANTIGEN_CACHE $ADOTDIR/init.zsh
  -antigen-set-default ANTIGEN_RSRC $ADOTDIR/.resources
  if [[ $ANTIGEN_CACHE == false ]]; then
    return 1
  fi
  
  return 0
}

-antigen-cache-execute () {
  # Main function. Deferred antigen-apply.
  antigen-apply-cached () {
    # TRACE "APPLYING CACHE" EXT
    # Auto determine check_files
    # There always should be 5 steps from original source as the correct way is to use
    # `antigen` wrapper not `antigen-apply` directly and it's called by an extension.
    LOG "TRACE: ${funcfiletrace}"
    if [[ $ANTIGEN_AUTO_CONFIG == true && $#ANTIGEN_CHECK_FILES -eq 0 ]]; then
      ANTIGEN_CHECK_FILES+=(~/.zshrc)
      if [[ $#funcfiletrace -ge 6 ]]; then
        ANTIGEN_CHECK_FILES+=("${${funcfiletrace[6]%:*}##* }")
      fi
    fi

    # Generate and compile cache
    -antigen-cache-generate
    [[ -f "$ANTIGEN_CACHE" ]] && source "$ANTIGEN_CACHE";

    # Commented out in order to have a working `cache-gen` command
    #unset _ZCACHE_BUNDLE_SOURCE
    unset _ZCACHE_CAPTURE_BUNDLE _ZCACHE_CAPTURE_FUNCTIONS

    # Release all hooked functions
    antigen-remove-hook -antigen-load-env-cached
    antigen-remove-hook -antigen-load-source-cached
    antigen-remove-hook antigen-bundle-cached
  }
  
  antigen-add-hook antigen-apply antigen-apply-cached post once
  
  # Defer antigen-bundle.
  antigen-bundle-cached () {
    _ZCACHE_CAPTURE_BUNDLE+=("${(j: :)${@}}")
  }
  antigen-add-hook antigen-bundle antigen-bundle-cached pre
  
  # Defer loading.
  -antigen-load-env-cached () {
    local bundle
    typeset -A bundle; bundle=($@)
    local location=${bundle[dir]}/${bundle[loc]}
    
    # Load to path if there is no sourceable
    if [[ ${bundle[loc]} == "/" ]]; then
      _ZCACHE_BUNDLE_SOURCE+=("${location}")
      return
    fi

    _ZCACHE_BUNDLE_SOURCE+=("${location}")
  }
  antigen-add-hook -antigen-load-env -antigen-load-env-cached replace
  
  # Defer sourcing.
  -antigen-load-source-cached () {
    _ZCACHE_BUNDLE_SOURCE+=($@)
  }
  antigen-add-hook -antigen-load-source -antigen-load-source-cached replace
  
  return 0
}

# Generate static-cache file at $ANTIGEN_CACHE using currently loaded
# bundles from $_ANTIGEN_BUNDLE_RECORD
#
# Usage
#   antigen-cache-gen
#
# Returns
#   Nothing
antigen-cache-gen () {
  -antigen-cache-generate
}
#compdef _antigen
# Setup antigen's autocompletion
_antigen () {
  local -a _1st_arguments
  _1st_arguments=(
    'apply:Load all bundle completions'
    'bundle:Install and load the given plugin'
    'bundles:Bulk define bundles'
    'cleanup:Clean up the clones of repos which are not used by any bundles currently loaded'
    'cache-gen:Generate cache'
    'init:Load Antigen configuration from file'
    'list:List out the currently loaded bundles'
    'purge:Remove a cloned bundle from filesystem'
    'reset:Clears cache'
    'restore:Restore the bundles state as specified in the snapshot'
    'revert:Revert the state of all bundles to how they were before the last antigen update'
    'selfupdate:Update antigen itself'
    'snapshot:Create a snapshot of all the active clones'
    'theme:Switch the prompt theme'
    'update:Update all bundles'
    'use:Load any (supported) zsh pre-packaged framework'
  );

  _1st_arguments+=(
    'help:Show this message'
    'version:Display Antigen version'
  )

  __bundle() {
    _arguments \
      '--loc[Path to the location <path-to/location>]' \
      '--url[Path to the repository <github-account/repository>]' \
      '--branch[Git branch name]' \
      '--no-local-clone[Do not create a clone]'
  }
  __list() {
    _arguments \
      '--simple[Show only bundle name]' \
      '--short[Show only bundle name and branch]' \
      '--long[Show bundle records]'
  }


  __cleanup() {
    _arguments \
      '--force[Do not ask for confirmation]'
  }

  _arguments '*:: :->command'

  if (( CURRENT == 1 )); then
    _describe -t commands "antigen command" _1st_arguments
    return
  fi

  local -a _command_args
  case "$words[1]" in
    bundle)
      __bundle
      ;;
    use)
      compadd "$@" "oh-my-zsh" "prezto"
      ;;
    cleanup)
      __cleanup
      ;;
    (update|purge)
      compadd $(type -f \-antigen-get-bundles &> /dev/null || antigen &> /dev/null; -antigen-get-bundles --simple 2> /dev/null)
      ;;
    theme)
      compadd $(type -f \-antigen-get-themes &> /dev/null || antigen &> /dev/null; -antigen-get-themes 2> /dev/null)
      ;;
    list)
      __list
    ;;
  esac
}
zmodload zsh/datetime
ANTIGEN_DEBUG_LOG=${ANTIGEN_DEBUG_LOG:-${ADOTDIR:-$HOME/.antigen}/debug.log}
LOG () {
  local PREFIX="[LOG][${EPOCHREALTIME}]"
  echo "${PREFIX} ${funcfiletrace[1]}\n${PREFIX} $@" >> $ANTIGEN_DEBUG_LOG
}

ERR () {
  local PREFIX="[ERR][${EPOCHREALTIME}]"
  echo "${PREFIX} ${funcfiletrace[1]}\n${PREFIX} $@" >> $ANTIGEN_DEBUG_LOG
}

WARN () {
  local PREFIX="[WRN][${EPOCHREALTIME}]"
  echo "${PREFIX} ${funcfiletrace[1]}\n${PREFIX} $@" >> $ANTIGEN_DEBUG_LOG
}

TRACE () {
  local PREFIX="[TRA][${EPOCHREALTIME}]"
  echo "${PREFIX} ${funcfiletrace[1]}\n${PREFIX} $@\n${PREFIX} ${(j:\n:)funcstack}" >> $ANTIGEN_DEBUG_LOG
}
-antigen-env-setup

================
File: modules/home-manager/shared/zsh/config/themes/tokyonight.omp.toml
================
terminal_background = 'transparent'
console_title_template = ' {{ .Folder }} :: {{if .Root}}Admin{{end}}'
version = 3
final_space = true

[palette]
  blue-bell = '#9aa5ce'
  blue-black = '#565f89'
  celeste-blue = '#b4f9f8'
  light-sky-blue = '#7dcfff'
  main-bg = '#24283b'
  pastal-grey = '#cfc9c2'
  pistachio-green = '#9ece6a'
  t-background = 'p:main-bg'
  terminal-black = '#414868'
  terminal-blue = '#7aa2f7'
  terminal-green = '#73daca'
  terminal-magenta = '#bb9af7'
  terminal-red = '#f7768e'
  terminal-white = '#c0caf5'
  terminal-yellow = '#e0af68'
  white-blue = '#a9b1d6'

[[blocks]]
  type = 'prompt'
  alignment = 'left'
  newline = true

  [[blocks.segments]]
    template = '➜ '
    foreground = 'p:terminal-blue'
    background = 'transparent'
    type = 'text'
    style = 'plain'

    [blocks.segments.properties]
      cache_duration = 'none'

  [[blocks.segments]]
    template = '{{ .UserName }}@{{.HostName }} '
    foreground = 'p:terminal-yellow'
    background = 'transparent'
    type = 'text'
    style = 'plain'

    [blocks.segments.properties]
      cache_duration = 'none'

  [[blocks.segments]]
    template = '<b>{{ .Path }}</b> <p:light-sky-blue>⚡</>'
    foreground = 'p:terminal-magenta'
    type = 'path'
    style = 'plain'

    [blocks.segments.properties]
      cache_duration = 'none'
      style = 'folder'

  [[blocks.segments]]
    template = '({{ .HEAD}})'
    foreground = 'p:light-sky-blue'
    type = 'git'
    style = 'plain'
    foreground_templates = ['{{ if or (.Working.Changed) (.Staging.Changed) }}p:terminal-red{{ end }}', '{{ if and (gt .Ahead 0) (gt .Behind 0)}}p:light-sky-blue {{ end }}', '{{ if gt .Ahead 0 }}p:terminal-blue{{ end }}', '{{ if gt .Behind 0 }}p:celeste-blue{{ end }}']

    [blocks.segments.properties]
      branch_icon = ' '
      cache_duration = 'none'
      fetch_status = true

  [[blocks.segments]]
    template = ' '
    foreground = 'p:terminal-red'
    type = 'status'
    style = 'plain'

    [blocks.segments.properties]
      cache_duration = 'none'

[[blocks]]
  type = 'prompt'
  alignment = 'right'
  overflow = 'hide'

  [[blocks.segments]]
    foreground = 'p:white-blue'
    type = 'command'
    style = 'plain'

    [blocks.segments.properties]
      cache_duration = 'none'
      command = 'git log --pretty=format:%cr -1 || date +%H:%M:%S'
      shell = 'bash'

[[blocks]]
  type = 'prompt'
  alignment = 'left'
  newline = true

  [[blocks.segments]]
    template = '▶'
    foreground = 'p:pistachio-green'
    type = 'text'
    style = 'plain'

    [blocks.segments.properties]
      cache_duration = 'none'

================
File: modules/home-manager/shared/zsh/config/.gitignore
================
/*

!.gitignore
!plugins
!themes
!.zshrc*

================
File: modules/home-manager/shared/zsh/config/.zshrc
================
export TERM="xterm-256color"
export ZSH="$HOME/.config/zsh"

# Environment
export LANG=en_US.UTF-8
export VISUAL="nvim"
export EDITOR="$VISUAL"

export PATH="$PATH:/run/current-system/sw/bin"
export PATH="$PATH:$HOME/.flutter/bin"
export PATH="$PATH:$BUN_INSTALL/bin"
export PATH="$PATH:$HOME/neovim/bin"

# Antigen
#source "$ZSH/plugins/antigen.zsh"

#antigen bundle git
#antigen bundle zsh-users/zsh-autosuggestions
#antigen bundle zsh-users/zsh-completions
#antigen bundle zsh-users/zsh-syntax-highlighting

#antigen apply

# Theming
#eval "$(oh-my-posh init zsh --config $ZSH/themes/tokyonight.omp.toml)"

# History
#HISTSIZE=5000
#HISTFILE=~/.zsh_history
#SAVEHIST=$HISTSIZE
#HISTDUP=erase
#setopt appendhistory
#setopt sharehistory
#setopt hist_ignore_space
#setopt hist_ignore_all_dups
#setopt hist_save_no_dups
#setopt hist_ignore_dups
#setopt hist_find_no_dups

# BAT
export BAT_THEME=tokyonight_night

# FZF 
export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"

export FZF_COMPLETION_OPTS='--border --info=inline'
export FZF_CTRL_T_OPTS="--preview '$show_file_or_dir_preview'"
export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"
export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS \
  --highlight-line \
  --info=inline-right \
  --ansi \
  --layout=reverse \
  --border=none
  --color=bg+:#283457 \
  --color=bg:#16161e \
  --color=border:#27a1b9 \
  --color=fg:#c0caf5 \
  --color=gutter:#16161e \
  --color=header:#ff9e64 \
  --color=hl+:#2ac3de \
  --color=hl:#2ac3de \
  --color=info:#545c7e \
  --color=marker:#ff007c \
  --color=pointer:#ff007c \
  --color=prompt:#2ac3de \
  --color=query:#c0caf5:regular \
  --color=scrollbar:#27a1b9 \
  --color=separator:#ff9e64 \
  --color=spinner:#ff007c \
"

_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

show_file_or_dir_preview="if [ -d {} ]; then eza --tree --color=always {} | head -200; else bat -n --color=always --line-range :500 {}; fi"

_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
    cd)           fzf --preview 'eza --tree --color=always {} | head -200'  "$@" ;;
    export|unset) fzf --preview "eval 'echo \${}'"                          "$@" ;;
    ssh)          fzf --preview 'dig {}'                                    "$@" ;;
    *)            fzf --preview "$show_file_or_dir_preview"                 "$@" ;;
  esac
}

#source <(fzf --zsh)

# Aliases
#alias ls="eza --icons=always"

alias vim="nvim"

alias gst="lazygit"

alias cnix="nvim /etc/nixos"
alias cdnix="cd /etc/nixos"

alias cn="vim ~/.config/nvim"
alias cz="vim ~/.config/zsh"

#alias visudo="sudo -E visudo"

alias drs="(cd /etc/nixos && darwin-rebuild switch --flake .#solaire)"

# NVM
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
#[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# bun completions
#[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# RBENV
#if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# SDKMan
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

================
File: modules/home-manager/shared/zsh/default.nix
================
{
  system,
  config,
  homeManagerConfig,
  ...
}:

let
  systemSpecificRebuildCmd =
    if (system == "aarch64-darwin") then "darwin-rebuild" else "sudo nixos-rebuild";
in
{
  programs.zsh = {
    enable = true;
    envExtra = ''
      ZDOTDIR="${config.home.homeDirectory}/.config/zsh"
      alias rnix="${systemSpecificRebuildCmd} switch --flake /etc/nixos --impure"
    '';
  };

  home.file.".config/zsh".source = homeManagerConfig.linkSharedApp config "zsh";
}

================
File: modules/home-manager/shared/default.nix
================
{ ... }:

{
  imports = [
    # ./nh
    ./neovim
    ./lazygit
    ./zsh
    ./bat
    ./ssh
  ];
}

================
File: modules/home-manager/users/hjalte.nix
================
{ ... }:

{
  programs.git = {
    enable = true;
    userName = "hjalte";
    userEmail = "hjalte@bogehave.com";
  };
}

================
File: modules/home-manager/default.nix
================
{
  hostname,
  username,
  ...
}:

{
  imports = [
    (./. + "/hosts/${hostname}")
    (./. + "/users/${username}.nix")
    ./shared
  ];

  programs.home-manager.enable = true;

  home = {
    username = username;
    enableNixpkgsReleaseCheck = false;
    stateVersion = "24.05";
  };
}

================
File: modules/nixos/services/glances/default.nix
================
{ pkgs, ... }:

{
  environment.systemPackages = with pkgs; [ glances ];

  networking.firewall.allowedTCPPorts = [ 61208 ];

  systemd.services.glances = {
    description = "Glances";
    wantedBy = [ "multi-user.target" ];
    serviceConfig = {
      ExecStart = "${pkgs.glances}/bin/glances -w";
      Type = "simple";
    };
  };
}

================
File: modules/nixos/services/prometheus/default.nix
================
{ ... }:

{
  services.prometheus = {
    enable = true;
    port = 9001;
    # extraFlags = [ "--web.enable-admin-api" ];
    exporters = {
      node = {
        enable = true;
        enabledCollectors = [ "systemd" ];
        port = 9002;
      };
    };
  };

  networking.firewall = {
    allowedUDPPorts = [
      9001
      9002
    ];
    allowedTCPPorts = [
      9001
      9002
    ];
  };
}

================
File: modules/nixos/services/ssh/default.nix
================
{ ... }:

{
  services.openssh = {
    enable = true;
    openFirewall = true;
    settings = {
      PermitRootLogin = "no";
      PasswordAuthentication = false;
      ClientAliveInterval = 300;
      ClientAliveCountMax = 3;
      TCPKeepAlive = "yes";
    };
  };
}

================
File: modules/nixos/services/tailscale/default.nix
================
{
  config,
  pkgs,
  vars,
  ...
}:

{
  environment.systemPackages = [ pkgs.tailscale ];

  services.tailscale.enable = true;

  networking.firewall = {
    trustedInterfaces = [ "tailscale0" ];
    allowedUDPPorts = [ config.services.tailscale.port ];
    allowedTCPPorts = [ 22 ];
  };

  systemd.services.tailscale-autoconnect = {
    description = "Automatic connection to Tailscale";
    after = [
      "network-pre.target"
      "tailscaled.service"
    ];
    wants = [
      "network-pre.target"
      "tailscaled.service"
    ];
    wantedBy = [ "multi-user.target" ];
    serviceConfig.Type = "oneshot";
    script = with pkgs; ''
      # wait tailscale to settle
      sleep 2

      # check if already authenticated
      status="$(${tailscale}/bin/tailscale status -json | ${jq}/bin/jq -r .BackendState)"
      if [ $status = "Running" ]; then # if so, then do nothing
        exit 0
      fi

      # authenticate
      ${tailscale}/bin/tailscale up --authkey file:${config.age.secrets.tailscale-servers.path} --advertise-routes=${vars.ip}/32 --accept-dns=true --accept-routes

      # with headscale
      # ${tailscale}/bin/tailscale up --authkey file:${config.age.secrets.tailscale-servers.path} --login-server=https://headscale.bfmp.lol --advertise-routes=${vars.ip}/32 --accept-dns=true
    '';
  };
}

================
File: modules/nixos/services/default.nix
================
{ ... }:

{
  imports = [
    ./tailscale
    ./glances
    ./ssh
    ./prometheus
  ];
}

================
File: modules/nixos/age.nix
================
{ username, ... }:

{
  age = {
    identityPaths = [ "/home/${username}/.ssh/id_personal" ];

    secrets = {
      share.file = ../../secrets/share.age;
      cloudflare.file = ../../secrets/cloudflare.age;

      sonarr.file = ../../secrets/sonarr.age;
      radarr.file = ../../secrets/radarr.age;
      readarr.file = ../../secrets/readarr.age;
      bazarr.file = ../../secrets/bazarr.age;
      prowlarr.file = ../../secrets/prowlarr.age;
      vaultwarden.file = ../../secrets/vaultwarden.age;
      immich.file = ../../secrets/immich.age;
      audiobookshelf.file = ../../secrets/audiobookshelf.age;
      plex.file = ../../secrets/plex.age;
      freshrss.file = ../../secrets/freshrss.age;
      speedtest-tracker.file = ../../secrets/speedtest-tracker.age;
      authentik.file = ../../secrets/authentik.age;
      wordpress.file = ../../secrets/wordpress.age;
      jellyfin.file = ../../secrets/jellyfin.age;
      ollama-webui.file = ../../secrets/ollama-webui.age;
      paperless.file = ../../secrets/paperless.age;
      ntfy = {
        file = ../../secrets/ntfy.age;
        mode = "600";
        owner = username;
        group = username;
      };

      tailscale-servers.file = ../../secrets/tailscale/servers.age;

      restic-env.file = ../../secrets/restic/env.age;
      restic-repo-containers.file = ../../secrets/restic/repo-containers.age;
      restic-password-containers.file = ../../secrets/restic/password-containers.age;
      restic-repo-photos.file = ../../secrets/restic/repo-photos.age;
      restic-password-photos.file = ../../secrets/restic/password-photos.age;

      nginx-vault = {
        file = ../../secrets/nginx/vault.age;
        mode = "600";
        owner = username;
        group = username;
      };
      nginx-baikal = {
        file = ../../secrets/nginx/baikal.age;
        mode = "600";
        owner = username;
        group = username;
      };
    };
  };
}

================
File: modules/nixos/default.nix
================
{
  system = import ./system.nix;

  age = import ./age.nix;
  users = import ./users.nix;
  networking = import ./networking.nix;
  locale = import ./locale.nix;
  pkgs = import ./pkgs.nix;

  services = import ./services;
}

================
File: modules/nixos/locale.nix
================
{
  config,
  lib,
  pkgs,
  ...
}:

{
  time.timeZone = "Europe/Copenhagen";

  i18n = {
    defaultLocale = "en_US.UTF-8";
    extraLocaleSettings = {
      LC_ADDRESS = "da_DK.UTF-8";
      LC_IDENTIFICATION = "da_DK.UTF-8";
      LC_MEASUREMENT = "da_DK.UTF-8";
      LC_MONETARY = "da_DK.UTF-8";
      LC_NAME = "da_DK.UTF-8";
      LC_NUMERIC = "da_DK.UTF-8";
      LC_PAPER = "da_DK.UTF-8";
      LC_TELEPHONE = "da_DK.UTF-8";
      LC_TIME = "da_DK.UTF-8";
    };
  };

  console.keyMap = "dk";  # Keeping US keyboard layout, change to "dk" if you want Danish layout
}

================
File: modules/nixos/networking.nix
================
{ vars, hostname, ... }:

{
  networking = {
    hostName = "${hostname}";
    defaultGateway = vars.defaultGateway;
    enableIPv6 = false;
    useDHCP = false;
    nameservers = [
      "1.1.1.1"
      "8.8.8.8"
    ];
    interfaces = {
      "${vars.networkInterface}".ipv4.addresses = [
        {
          address = vars.ip;
          prefixLength = 24;
        }
      ];
    };
    firewall = {
      enable = true;
      allowPing = true;
      pingLimit = "--limit 1/minute --limit-burst 5";
      trustedInterfaces = [
        vars.networkInterface
        "podman0"
      ];
      checkReversePath = false;
    };
  };
}

================
File: modules/nixos/pkgs.nix
================
{
  pkgs,
  inputs,
  ...
}:

{
  nixpkgs.config.allowUnfree = true;

  environment.systemPackages = with pkgs; [
    git
    wget
    curl
    unzip
    eza
    fzf
    fd
    ripgrep
    pciutils
    tcpdump
    lm_sensors
    lazygit
    oh-my-posh

    clang-tools
    gcc
    cargo
    nodejs_22

    nil
    lua-language-server
    bash-language-server
    yaml-language-server
    typescript-language-server
    nixfmt-rfc-style
    prettierd

    podman-tui
    podman-compose

    inputs.agenix.packages."${system}".default
    inputs.home-manager.packages."${system}".default
  ];

  programs.zsh.enable = true;

  environment.pathsToLink = [ "/share/zsh" ];
}

================
File: modules/nixos/system.nix
================
{ ... }:

{
  nix.settings.experimental-features = [
    "nix-command"
    "flakes"
  ];

  nix.nixPath = [ "nixos-config=/etc/nixos" ];
}

================
File: modules/nixos/users.nix
================
{
  pkgs,
  username,
  fullname,
  vars,
  lib,
  ...
}:

{
  users.groups = {
    "${username}" = {
      gid = vars.defaultUserGID;
    };
    podman = {
      gid = 994;
    };
  };

  users.users = {
    "${username}" = {
      uid = vars.defaultUserUID;
      group = "${username}";
      description = "${fullname}";
      isNormalUser = true;
      shell = pkgs.zsh;
      extraGroups = [
        "podman"
        "networkmanager"
        "wheel"
        "postgres"
        "grafana"
        "render"
        "video"
      ];
      subUidRanges = [
        {
          startUid = 100000;
          count = 65536;
        }
      ];
      subGidRanges = [
        {
          startGid = 100000;
          count = 65536;
        }
      ];
      openssh.authorizedKeys.keys = [
        ""
      ];
    };
  };
}

================
File: overlays/patches/slirp4netns.patch
================
diff --git a/sandbox.c b/sandbox.c
index f0ab48e..4251b5a 100644
--- a/sandbox.c
+++ b/sandbox.c
@@ -15,37 +15,73 @@
 
 #include <glib.h>
 
+static int close_fd_safe(int *fd)
+{
+    int ret = 0;
+
+    if (*fd > -1) {
+        ret = close(*fd);
+        if (ret < 0) {
+            fprintf(stderr, "cannot close fd %d\n", *fd);
+            *fd = -1;
+        }
+    }
+
+    return ret;
+}
+
 static int add_mount(const char *from, const char *to)
 {
-    int ret;
+    int fd = -1, ret = -1, fd_ret = -1;
 
-    ret = mount("", from, "", MS_SLAVE | MS_REC, NULL);
+    fd = open_tree(AT_FDCWD, from, AT_NO_AUTOMOUNT | AT_SYMLINK_NOFOLLOW);
+    if (fd == -1) {
+        fprintf(stderr, "cannot open tree %s\n", from);
+        goto exit;
+    }
+
+    struct mount_attr attr = { .propagation = MS_SLAVE };
+
+    ret = mount_setattr(fd, "",
+                        AT_EMPTY_PATH | AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT,
+                        &attr, sizeof(attr));
     if (ret < 0 && errno != EINVAL) {
         fprintf(stderr, "cannot make mount propagation slave %s\n", from);
-        return ret;
+        goto exit;
     }
-    ret = mount(from, to, "",
-                MS_BIND | MS_REC | MS_SLAVE | MS_NOSUID | MS_NODEV | MS_NOEXEC,
-                NULL);
+
+    ret = close_fd_safe(&fd);
     if (ret < 0) {
-        fprintf(stderr, "cannot bind mount %s to %s (errno: %d)\n", from, to,
-                errno);
-        return ret;
+        goto exit;
+    }
+
+    fd = open_tree(AT_FDCWD, from,
+                   OPEN_TREE_CLONE | AT_RECURSIVE | AT_NO_AUTOMOUNT |
+                       AT_SYMLINK_NOFOLLOW);
+    if (fd == -1) {
+        fprintf(stderr, "cannot open tree %s\n", from);
+        goto exit;
     }
-    ret = mount("", to, "", MS_SLAVE | MS_REC, NULL);
+
+    ret = mount_setattr(fd, "",
+                        AT_EMPTY_PATH | AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT,
+                        &attr, sizeof(attr));
     if (ret < 0) {
-        fprintf(stderr, "cannot make mount propagation slave %s\n", to);
-        return ret;
+        fprintf(stderr, "cannot make mount propagation slave %s\n", from);
+        goto exit;
     }
-    ret = mount(from, to, "",
-                MS_REMOUNT | MS_BIND | MS_RDONLY | MS_NOSUID | MS_NODEV |
-                    MS_NOEXEC,
-                NULL);
+
+    ret = move_mount(fd, "", AT_FDCWD, to, MOVE_MOUNT_F_EMPTY_PATH);
     if (ret < 0) {
-        fprintf(stderr, "cannot remount ro %s\n", to);
-        return ret;
+        fprintf(stderr, "cannot move mount %s to %s (errno: %d)\n", from, to,
+                errno);
+        goto exit;
     }
-    return 0;
+
+exit:
+    close_fd_safe(&fd);
+    printf("add_mount: %s -> %s = %d\n", from, to, ret);
+    return ret;
 }
 
 /* Bind /etc/resolv.conf if it is a symlink to a file outside /etc or
@@ -54,22 +90,16 @@ static int bind_escaped_resolv_conf(const char *root)
 {
     char *real_resolv = realpath("/etc/resolv.conf", NULL);
 
-    /* Doesn't exist or is not an escaping symlink */
-    if (real_resolv == NULL || g_str_has_prefix(real_resolv, "/etc") ||
-        g_str_has_prefix(real_resolv, "/run")) {
+    /* Doesn't exist */
+    if (real_resolv == NULL) {
         free(real_resolv);
         return 0;
     }
 
-    char *resolv_dest = g_strconcat(root, real_resolv, NULL);
+    char *resolv_dest = g_strconcat(root, "/etc/resolv.conf", NULL);
     char *resolv_dest_dir = g_path_get_dirname(resolv_dest);
     int ret = 0;
 
-    fprintf(stderr,
-            "sandbox: /etc/resolv.conf (-> %s) seems a symlink to a file "
-            "outside {/etc, /run}, attempting to bind it as well.\n",
-            real_resolv);
-
     ret = g_mkdir_with_parents(resolv_dest_dir, 0755);
     if (ret < 0) {
         fprintf(stderr, "cannot create resolve dest dir path: %s\n",
@@ -77,14 +107,6 @@ static int bind_escaped_resolv_conf(const char *root)
         goto finish;
     }
 
-    ret = creat(resolv_dest, 0644);
-    if (ret < 0) {
-        fprintf(stderr, "cannot create empty resolv.conf dest file %s\n",
-                resolv_dest);
-        goto finish;
-    }
-    close(ret);
-
     ret = add_mount(real_resolv, resolv_dest);
     if (ret < 0) {
         fprintf(stderr, "cannot bind mount resolv.conf\n");
@@ -98,6 +120,15 @@ finish:
     return ret;
 }
 
+/* check /etc/resolv.conf existance */
+static void check_resolv_conf()
+{
+    if (access("/etc/resolv.conf", F_OK) != 0) {
+        fprintf(stderr, "cannot read /etc/resolv.conf, this may indicate a "
+                        "bind failure.\n");
+    }
+}
+
 /* lock down the process doing the following:
  - create a new mount namespace
  - bind mount /etc and /run from the host
@@ -230,5 +261,7 @@ int create_sandbox()
         return ret;
     }
 
+    check_resolv_conf();
+
     return 0;
 }

================
File: overlays/default.nix
================
{ inputs, pkgs, ... }:

{
  additions = final: _prev: import ../pkgs final.pkgs;
  modifications = final: prev: {
    slirp4netns = prev.slirp4netns.overrideAttrs (oldAttrs: {
      patches = (oldAttrs.patches or [ ]) ++ [ ./patches/slirp4netns.patch ];
    });
    ollama = prev.ollama.overrideAttrs (oldAttrs: {
      cudaSupport = true;
      cudaCapabilities = [ "12.0" ];
    });
  };
}

================
File: pkgs/default.nix
================
{
  # ...
}

================
File: flake.lock
================
{
  "nodes": {
    "agenix": {
      "inputs": {
        "darwin": "darwin",
        "home-manager": [
          "home-manager"
        ],
        "nixpkgs": [
          "nixpkgs"
        ],
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1723293904,
        "narHash": "sha256-b+uqzj+Wa6xgMS9aNbX4I+sXeb5biPDi39VgvSFqFvU=",
        "owner": "ryantm",
        "repo": "agenix",
        "rev": "f6291c5935fdc4e0bef208cfc0dcab7e3f7a1c41",
        "type": "github"
      },
      "original": {
        "owner": "ryantm",
        "repo": "agenix",
        "type": "github"
      }
    },
    "brew-src": {
      "flake": false,
      "locked": {
        "lastModified": 1731323744,
        "narHash": "sha256-SxUQm4cTHcaoPQHoXe26ZV8cZiMWBGow8MjE4L+MckM=",
        "owner": "Homebrew",
        "repo": "brew",
        "rev": "254bf3fe9d8fa2e1b2fb55dbcf535b2d870180c4",
        "type": "github"
      },
      "original": {
        "owner": "Homebrew",
        "ref": "4.4.5",
        "repo": "brew",
        "type": "github"
      }
    },
    "darwin": {
      "inputs": {
        "nixpkgs": [
          "agenix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1700795494,
        "narHash": "sha256-gzGLZSiOhf155FW7262kdHo2YDeugp3VuIFb4/GGng0=",
        "owner": "lnl7",
        "repo": "nix-darwin",
        "rev": "4b9b83d5a92e8c1fbfd8eb27eda375908c11ec4d",
        "type": "github"
      },
      "original": {
        "owner": "lnl7",
        "ref": "master",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "flake-utils": {
      "inputs": {
        "systems": "systems_2"
      },
      "locked": {
        "lastModified": 1710146030,
        "narHash": "sha256-SZ5L6eA7HJ/nmkzGG7/ISclqe6oZdOZTNoesiInkXPQ=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "b1d9ab70662946ef0850d488da1c9019f3a9752a",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1734366194,
        "narHash": "sha256-vykpJ1xsdkv0j8WOVXrRFHUAdp9NXHpxdnn1F4pYgSw=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "80b0fdf483c5d1cb75aaad909bd390d48673857f",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "ref": "release-24.11",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "impermanence": {
      "locked": {
        "lastModified": 1734945620,
        "narHash": "sha256-olIfsfJK4/GFmPH8mXMmBDAkzVQ1TWJmeGT3wBGfQPY=",
        "owner": "nix-community",
        "repo": "impermanence",
        "rev": "d000479f4f41390ff7cf9204979660ad5dd16176",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "impermanence",
        "type": "github"
      }
    },
    "nix-darwin": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1733570843,
        "narHash": "sha256-sQJAxY1TYWD1UyibN/FnN97paTFuwBw3Vp3DNCyKsMk=",
        "owner": "LnL7",
        "repo": "nix-darwin",
        "rev": "a35b08d09efda83625bef267eb24347b446c80b8",
        "type": "github"
      },
      "original": {
        "owner": "LnL7",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "nix-darwin_2": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      },
      "locked": {
        "lastModified": 1716329735,
        "narHash": "sha256-ap51w+VqG21vuzyQ04WrhI2YbWHd3UGz0e7dc/QQmoA=",
        "owner": "LnL7",
        "repo": "nix-darwin",
        "rev": "eac4f25028c1975a939c8f8fba95c12f8a25e01c",
        "type": "github"
      },
      "original": {
        "owner": "LnL7",
        "repo": "nix-darwin",
        "type": "github"
      }
    },
    "nix-homebrew": {
      "inputs": {
        "brew-src": "brew-src",
        "flake-utils": "flake-utils",
        "nix-darwin": "nix-darwin_2",
        "nixpkgs": "nixpkgs_2"
      },
      "locked": {
        "lastModified": 1732145543,
        "narHash": "sha256-VRQh/lvCSko9YV7haXyPt7DSp+EkgjjBv/9U4cY9c50=",
        "owner": "zhaofengli-wip",
        "repo": "nix-homebrew",
        "rev": "ac3945ee614f69ab89c6935b3f0567028de5f012",
        "type": "github"
      },
      "original": {
        "owner": "zhaofengli-wip",
        "repo": "nix-homebrew",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1687274257,
        "narHash": "sha256-TutzPriQcZ8FghDhEolnHcYU2oHIG5XWF+/SUBNnAOE=",
        "path": "/nix/store/22qgs3skscd9bmrxv9xv4q5d4wwm5ppx-source",
        "rev": "2c9ecd1f0400076a4d6b2193ad468ff0a7e7fdc5",
        "type": "path"
      },
      "original": {
        "id": "nixpkgs",
        "type": "indirect"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1734875076,
        "narHash": "sha256-Pzyb+YNG5u3zP79zoi8HXYMs15Q5dfjDgwCdUI5B0nY=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "1807c2b91223227ad5599d7067a61665c52d1295",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-24.11",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_2": {
      "locked": {
        "lastModified": 1716330097,
        "narHash": "sha256-8BO3B7e3BiyIDsaKA0tY8O88rClYRTjvAp66y+VBUeU=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "5710852ba686cc1fd0d3b8e22b3117d43ba374c2",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_3": {
      "locked": {
        "lastModified": 1734649271,
        "narHash": "sha256-4EVBRhOjMDuGtMaofAIqzJbg4Ql7Ai0PSeuVZTHjyKQ=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "d70bd19e0a38ad4790d3913bf08fcbfc9eeca507",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "agenix": "agenix",
        "home-manager": "home-manager",
        "impermanence": "impermanence",
        "nix-darwin": "nix-darwin",
        "nix-homebrew": "nix-homebrew",
        "nixpkgs": "nixpkgs_3",
        "nixpkgs-stable": "nixpkgs-stable"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "systems_2": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}

================
File: flake.nix
================
{
  description = "homelab flake";

  inputs = {
    nixpkgs = {
      url = "github:nixos/nixpkgs/nixos-unstable";
    };
    nixpkgs-stable = {
      url = "github:nixos/nixpkgs/nixos-24.11";
    };
    nix-darwin = {
      url = "github:LnL7/nix-darwin";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nix-homebrew = {
      url = "github:zhaofengli-wip/nix-homebrew";
    };
    home-manager = {
      url = "github:nix-community/home-manager/release-24.11";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    agenix = {
      url = "github:ryantm/agenix";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.home-manager.follows = "home-manager";
    };
    impermanence = {
      url = "github:nix-community/impermanence";
    };
  };

  outputs =
    {
      self,
      nixpkgs,
      nixpkgs-stable,
      nix-darwin,
      nix-homebrew,
      home-manager,
      agenix,
      impermanence,
      ...
    }@inputs:
    let
      inherit (self) outputs;

      forAllSystems = nixpkgs.lib.genAttrs [
        "x86_64-linux"
        "aarch64-linux"
        "aarch64-darwin"
      ];

      nixosModules = import ./modules/nixos;
      darwinModules = import ./modules/darwin;
      homeManagerModules = import ./modules/home-manager;

      legacyPackages = forAllSystems (
        system:
        import nixpkgs {
          inherit system;
          config.allowUnfree = true;
        }
      );

      buildHomeManagerConfig =
        hostname:
        let
          rootPath = "/etc/nixos/modules/home-manager";
          hostPath = "${rootPath}/hosts/${hostname}";
          sharedPath = "${rootPath}/shared";
        in
        {
          linkHostApp = config: app: config.lib.file.mkOutOfStoreSymlink "${hostPath}/${app}/config";
          linkSharedApp = config: app: config.lib.file.mkOutOfStoreSymlink "${sharedPath}/${app}/config";
        };

      createNixOS =
        system: hostname: username: fullname: email:
        (
          let
            vars = import (./. + "/hosts/${hostname}/vars.nix");
            specialArgs = {
              inherit
                system
                inputs
                outputs
                hostname
                username
                fullname
                email
                vars
                ;
            };
            modules = (builtins.attrValues nixosModules) ++ [
              (./. + "/hosts/${hostname}")
              agenix.nixosModules.default
              impermanence.nixosModules.impermanence
              home-manager.nixosModules.home-manager
              {
                home-manager.useGlobalPkgs = true;
                home-manager.useUserPackages = true;
                home-manager.users."${username}" = homeManagerModules;
                home-manager.extraSpecialArgs = specialArgs // {
                  homeManagerConfig = buildHomeManagerConfig hostname;
                };
              }
            ];
          in
          nixpkgs.lib.nixosSystem { inherit system modules specialArgs; }
        );

      createDarwin =
        hostname: username: fullname: email:
        (
          let
            system = "aarch64-darwin";
            specialArgs = {
              inherit
                inputs
                outputs
                hostname
                username
                fullname
                email
                system
                ;
            };
            modules = (builtins.attrValues darwinModules) ++ [
              (./. + "/hosts/${hostname}")
              agenix.nixosModules.default
              home-manager.darwinModules.home-manager
              {
                home-manager.useGlobalPkgs = true;
                home-manager.useUserPackages = true;
                home-manager.users."${username}" = homeManagerModules;
                home-manager.extraSpecialArgs = specialArgs // {
                  homeManagerConfig = buildHomeManagerConfig hostname;
                };
              }
              nix-homebrew.darwinModules.nix-homebrew
              {
                nix-homebrew = {
                  enable = true;
                  user = username;
                  enableRosetta = true;
                  autoMigrate = true;
                  # mutableTaps = false;
                };
              }
            ];
          in
          nix-darwin.lib.darwinSystem { inherit specialArgs modules; }
        );
    in
    {
      inherit legacyPackages;

      formatter = forAllSystems (system: nixpkgs.legacyPackages."${system}".nixpkgs-rfc-style);

      overlays = import ./overlays { inherit inputs; };

      nixosConfigurations = {
        malenia = createNixOS "x86_64-linux" "malenia" "hjalte" "Hjalte Bøgehave" "hjalte@bogehave.com";
        miquella = createNixOS "aarch64-linux" "miquella" "hjalte" "Hjalte Bøgehave" "hjalte@bogehave.com";
      };

      darwinConfigurations = {
        solaire = createDarwin "solaire" "hjalte" "Hjalte Bøgehave" "hjalte@bogehave.com";
      };

      darwinPackages = self.darwinConfigurations.${outputs.networking.hostName}.pkgs;
    };
}

================
File: README.md
================
# bfpimentel's nixOS configs

This repo is for my personal NixOS machines and Nix Package Manager. It's public for demo purposes and I'm happy to answer any questions, but don't expect me to be fast on answering them.

The following machines are being configured:
1. *malenia*: Homelab (x64) powered by NixOS.
2. *miquella*: OCI (Arm) machine powered by NixOS.
3. *solaire*: MacOS (Darwin) machine powered by NixOS package manager for environment and user configuration.

# nixos



================================================================
End of Codebase
================================================================
